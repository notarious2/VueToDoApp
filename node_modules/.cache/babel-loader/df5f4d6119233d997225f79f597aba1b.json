{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineStore } from \"pinia\";\nimport axios from \"axios\";\nimport { router } from \"../../main.js\";\nexport const useAuthStore = defineStore(\"authentication\", {\n  state: () => ({\n    token: \"\",\n    // initialize state from local storage to enable user to stay logged in\n    user: JSON.parse(localStorage.getItem(\"user\")),\n    errorLogIn: false\n  }),\n  getters: {\n    isAuthenticated: state => !!state.token\n  },\n  actions: {\n    login(username, password) {\n      const params = new URLSearchParams();\n      params.append(\"username\", username);\n      params.append(\"password\", password);\n      const headers = {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      };\n      axios.post(\"http://localhost:8000/login\", params, {\n        headers: headers\n      }).then(response => {\n        // store user details and jwt in local storage to keep user logged in between page refreshes\n        localStorage.setItem(\"user\", JSON.stringify(response.data)); // update pinia state\n\n        this.token = response.data[\"access_token\"];\n        console.log(this.token);\n        router.push({\n          path: \"/template\"\n        });\n      }).catch(error => {\n        console.log(error.response);\n        this.errorLogIn = true;\n      });\n    },\n\n    logout() {\n      this.user = null;\n      localStorage.removeItem(\"user\");\n      router.push(\"/auth\");\n    },\n\n    getToken() {\n      const tokenExists = localStorage.getItem(\"user\");\n\n      if (tokenExists) {\n        this.token = tokenExists[\"access_token\"];\n        return true;\n      } else {\n        return false;\n      }\n    },\n\n    clearError() {\n      this.errorLogIn = false;\n    }\n\n  }\n});","map":{"version":3,"names":["defineStore","axios","router","useAuthStore","state","token","user","JSON","parse","localStorage","getItem","errorLogIn","getters","isAuthenticated","actions","login","username","password","params","URLSearchParams","append","headers","Accept","post","then","response","setItem","stringify","data","console","log","push","path","catch","error","logout","removeItem","getToken","tokenExists","clearError"],"sources":["C:/Users/notar/Desktop/Udemy/todo_front/src/components/store/userAuth.js"],"sourcesContent":["import { defineStore } from \"pinia\";\r\nimport axios from \"axios\";\r\nimport { router } from \"../../main.js\";\r\n\r\nexport const useAuthStore = defineStore(\"authentication\", {\r\n  state: () => ({\r\n    token: \"\",\r\n    // initialize state from local storage to enable user to stay logged in\r\n    user: JSON.parse(localStorage.getItem(\"user\")),\r\n    errorLogIn: false,\r\n  }),\r\n  getters: {\r\n    isAuthenticated: (state) => !!state.token,\r\n  },\r\n  actions: {\r\n    login(username, password) {\r\n      const params = new URLSearchParams();\r\n      params.append(\"username\", username);\r\n      params.append(\"password\", password);\r\n\r\n      const headers = {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n      };\r\n      axios\r\n        .post(\"http://localhost:8000/login\", params, {\r\n          headers: headers,\r\n        })\r\n        .then((response) => {\r\n          // store user details and jwt in local storage to keep user logged in between page refreshes\r\n          localStorage.setItem(\"user\", JSON.stringify(response.data));\r\n          // update pinia state\r\n          this.token = response.data[\"access_token\"];\r\n\r\n          console.log(this.token);\r\n          router.push({ path: \"/template\" });\r\n        })\r\n        .catch((error) => {\r\n          console.log(error.response);\r\n          this.errorLogIn = true;\r\n        });\r\n    },\r\n    logout() {\r\n      this.user = null;\r\n      localStorage.removeItem(\"user\");\r\n      router.push(\"/auth\");\r\n    },\r\n\r\n    getToken() {\r\n      const tokenExists = localStorage.getItem(\"user\");\r\n      if (tokenExists) {\r\n        this.token = tokenExists[\"access_token\"];\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    },\r\n\r\n    clearError() {\r\n      this.errorLogIn = false;\r\n    },\r\n  },\r\n});\r\n"],"mappings":";AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,eAAvB;AAEA,OAAO,MAAMC,YAAY,GAAGH,WAAW,CAAC,gBAAD,EAAmB;EACxDI,KAAK,EAAE,OAAO;IACZC,KAAK,EAAE,EADK;IAEZ;IACAC,IAAI,EAAEC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAHM;IAIZC,UAAU,EAAE;EAJA,CAAP,CADiD;EAOxDC,OAAO,EAAE;IACPC,eAAe,EAAGT,KAAD,IAAW,CAAC,CAACA,KAAK,CAACC;EAD7B,CAP+C;EAUxDS,OAAO,EAAE;IACPC,KAAK,CAACC,QAAD,EAAWC,QAAX,EAAqB;MACxB,MAAMC,MAAM,GAAG,IAAIC,eAAJ,EAAf;MACAD,MAAM,CAACE,MAAP,CAAc,UAAd,EAA0BJ,QAA1B;MACAE,MAAM,CAACE,MAAP,CAAc,UAAd,EAA0BH,QAA1B;MAEA,MAAMI,OAAO,GAAG;QACdC,MAAM,EAAE,kBADM;QAEd,gBAAgB;MAFF,CAAhB;MAIArB,KAAK,CACFsB,IADH,CACQ,6BADR,EACuCL,MADvC,EAC+C;QAC3CG,OAAO,EAAEA;MADkC,CAD/C,EAIGG,IAJH,CAISC,QAAD,IAAc;QAClB;QACAhB,YAAY,CAACiB,OAAb,CAAqB,MAArB,EAA6BnB,IAAI,CAACoB,SAAL,CAAeF,QAAQ,CAACG,IAAxB,CAA7B,EAFkB,CAGlB;;QACA,KAAKvB,KAAL,GAAaoB,QAAQ,CAACG,IAAT,CAAc,cAAd,CAAb;QAEAC,OAAO,CAACC,GAAR,CAAY,KAAKzB,KAAjB;QACAH,MAAM,CAAC6B,IAAP,CAAY;UAAEC,IAAI,EAAE;QAAR,CAAZ;MACD,CAZH,EAaGC,KAbH,CAaUC,KAAD,IAAW;QAChBL,OAAO,CAACC,GAAR,CAAYI,KAAK,CAACT,QAAlB;QACA,KAAKd,UAAL,GAAkB,IAAlB;MACD,CAhBH;IAiBD,CA3BM;;IA4BPwB,MAAM,GAAG;MACP,KAAK7B,IAAL,GAAY,IAAZ;MACAG,YAAY,CAAC2B,UAAb,CAAwB,MAAxB;MACAlC,MAAM,CAAC6B,IAAP,CAAY,OAAZ;IACD,CAhCM;;IAkCPM,QAAQ,GAAG;MACT,MAAMC,WAAW,GAAG7B,YAAY,CAACC,OAAb,CAAqB,MAArB,CAApB;;MACA,IAAI4B,WAAJ,EAAiB;QACf,KAAKjC,KAAL,GAAaiC,WAAW,CAAC,cAAD,CAAxB;QACA,OAAO,IAAP;MACD,CAHD,MAGO;QACL,OAAO,KAAP;MACD;IACF,CA1CM;;IA4CPC,UAAU,GAAG;MACX,KAAK5B,UAAL,GAAkB,KAAlB;IACD;;EA9CM;AAV+C,CAAnB,CAAhC"},"metadata":{},"sourceType":"module"}