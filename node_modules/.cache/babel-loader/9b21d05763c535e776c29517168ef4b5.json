{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineStore } from \"pinia\";\nimport axios from \"axios\";\nimport authHeader from \"../services/auth-header\";\nimport router from \"../../router.js\";\nexport const useTaskStore = defineStore(\"tasks\", {\n  state: () => ({\n    display: false,\n    tasksList: [],\n    tasksSlice: [],\n    date: new Date().toISOString().slice(0, 10),\n    enteredText: \"\",\n    editedText: \"\",\n    invalidInput: false\n  }),\n  actions: {\n    async loadTasks() {\n      try {\n        const response = await axios.get(\"task\", {\n          headers: authHeader()\n        }); // working with response\n\n        const result = response.data;\n        const newArray = [];\n        result.forEach(element => {\n          if (!newArray.filter(arr => arr[\"date\"] === element.date).length > 0) {\n            newArray.push({\n              date: element.date,\n              tasks: [{ ...element,\n                editable: false\n              }]\n            });\n          } else {\n            const idx = newArray.findIndex(arr => arr.date === element.date);\n            newArray[idx].tasks.push({ ...element,\n              editable: false\n            });\n          }\n        }); // tasksList.value = newArray;\n\n        console.log(\"Load...\");\n        return newArray;\n      } catch (err) {\n        console.log(err.response.status);\n      }\n    },\n\n    loadOneTask(task_date) {\n      if (this.tasksList.filter(arr => arr[\"date\"] === task_date).length === 0) {\n        this.display = false;\n        this.tasksSlice = [];\n      } else {\n        // console.log(tasksList.value.filter((arr) => arr[\"date\"] === task_date)[0]);\n        this.tasksSlice = this.tasksList.filter(arr => arr[\"date\"] === task_date)[0];\n        this.display = true; // SORT THE SLICE\n\n        this.tasksSlice.tasks.sort((a, b) => a.priority > b.priority ? 1 : b.priority > a.priority ? -1 : 0);\n      }\n    },\n\n    // Checking or unchecking specific object in an array\n    async checkUncheck(element) {\n      try {\n        await axios.patch(\"task/update/\" + element.task_id, {\n          completed: element.completed ? false : true\n        }, {\n          headers: authHeader()\n        });\n        console.log(\"Completed!\"); // rerender ALL to-do tasks\n\n        this.tasksList = await this.loadTasks(); // get selected date's slice\n\n        this.loadOneTask(this.date);\n      } catch (err) {\n        console.log(err);\n\n        if (err.response.status === 401) {\n          localStorage.removeItem(\"user\");\n          router.push({\n            name: \"Authorization\"\n          });\n        }\n      }\n    },\n\n    // adding the task - Post Request\n    async addNewTask() {\n      // priority is 1 if there are not tasks on that day, else it is autoincremented\n      const priority = \"date\" in this.tasksSlice ? this.tasksSlice.tasks.length + 1 : 1;\n\n      if (this.enteredText !== \"\") {\n        try {\n          await axios.post(\"task\", {\n            priority: priority,\n            date: this.date,\n            text: this.enteredText,\n            completed: false\n          }, {\n            headers: authHeader()\n          });\n          console.log(\"Add request\"); // rerender ALL to-do tasks\n\n          this.tasksList = await this.loadTasks(); // get selected date's slice\n\n          this.loadOneTask(this.date); //clear input field\n\n          this.enteredText = \"\";\n        } catch (err) {\n          if (err.response.status === 401) {\n            localStorage.removeItem(\"user\");\n            router.push({\n              name: \"Authorization\"\n            });\n          }\n\n          console.log(err);\n        }\n      } else {\n        this.invalidInput = true;\n      }\n    },\n\n    // clear invalid input - to be used at blur\n    clearInvalidInput() {\n      this.invalidInput = false;\n    },\n\n    // Deleting specific task\n    async deleteTask(element) {\n      try {\n        await axios.get(\"task/delete/\" + element.task_id, {\n          headers: authHeader()\n        }); // rerender ALL to-do tasks\n\n        console.log(\"Deleted!\");\n        this.tasksList = await this.loadTasks(); // get selected date's slice\n\n        this.loadOneTask(this.date);\n      } catch (err) {\n        console.log(err);\n\n        if (err.response.status === 401) {\n          localStorage.removeItem(\"user\");\n          router.push({\n            name: \"Authorization\"\n          });\n        }\n      }\n\n      this.updatePriority();\n    },\n\n    // update tasks index/id on change - on drag / also used for deletion\n    async updatePriority() {\n      // GET changed priorities FIRST\n      const prioritiesList = {};\n\n      for (const idx in this.tasksSlice.tasks) {\n        if (this.tasksSlice.tasks[idx].priority !== Number(idx) + 1) {\n          prioritiesList[this.tasksSlice.tasks[idx].task_id] = Number(idx) + 1;\n        }\n      }\n\n      if (Object.keys(prioritiesList).length > 0) {\n        const payload = {};\n        payload[this.date] = prioritiesList; // Update MULTIPLE field with ONE PATCH Request\n\n        try {\n          await axios.patch(\"task/update_order\", { ...payload\n          }, {\n            headers: authHeader()\n          });\n          console.log(\"Multiple Rows Update!\");\n        } catch (err) {\n          console.log(err);\n\n          if (err.response.status === 401) {\n            localStorage.removeItem(\"user\");\n            router.push({\n              name: \"Authorization\"\n            });\n          }\n        }\n\n        this.tasksList = await this.loadTasks();\n        this.loadOneTask(this.date);\n      }\n    },\n\n    // Apply EDIT changes at blur\n    async applyEditChanges(element) {\n      // No need to send HTTP request if Text is unchanged\n      if (this.editedText && this.editedText !== element.text) {\n        try {\n          await axios.patch(\"task/update/\" + element.task_id, {\n            text: this.editedText\n          }, {\n            headers: authHeader()\n          });\n          console.log(\"Edited!\"); // rerender ALL to-do tasks\n\n          this.tasksList = await this.loadTasks(); // get selected date's slice\n\n          this.loadOneTask(this.date);\n        } catch (err) {\n          if (err.response.status === 401) {\n            localStorage.removeItem(\"user\");\n            router.push({\n              name: \"Authorization\"\n            });\n          }\n\n          console.log(err);\n        }\n      }\n    }\n\n  }\n});","map":{"version":3,"names":["defineStore","axios","authHeader","router","useTaskStore","state","display","tasksList","tasksSlice","date","Date","toISOString","slice","enteredText","editedText","invalidInput","actions","loadTasks","response","get","headers","result","data","newArray","forEach","element","filter","arr","length","push","tasks","editable","idx","findIndex","console","log","err","status","loadOneTask","task_date","sort","a","b","priority","checkUncheck","patch","task_id","completed","localStorage","removeItem","name","addNewTask","post","text","clearInvalidInput","deleteTask","updatePriority","prioritiesList","Number","Object","keys","payload","applyEditChanges"],"sources":["C:/Users/notar/Desktop/Udemy/todo_front/src/components/store/TaskStore.js"],"sourcesContent":["import { defineStore } from \"pinia\";\r\nimport axios from \"axios\";\r\nimport authHeader from \"../services/auth-header\";\r\nimport router from \"../../router.js\";\r\n\r\nexport const useTaskStore = defineStore(\"tasks\", {\r\n  state: () => ({\r\n    display: false,\r\n    tasksList: [],\r\n    tasksSlice: [],\r\n    date: new Date().toISOString().slice(0, 10),\r\n    enteredText: \"\",\r\n    editedText: \"\",\r\n    invalidInput: false,\r\n  }),\r\n  actions: {\r\n    async loadTasks() {\r\n      try {\r\n        const response = await axios.get(\"task\", {\r\n          headers: authHeader(),\r\n        });\r\n        // working with response\r\n        const result = response.data;\r\n        const newArray = [];\r\n        result.forEach((element) => {\r\n          if (\r\n            !newArray.filter((arr) => arr[\"date\"] === element.date).length > 0\r\n          ) {\r\n            newArray.push({\r\n              date: element.date,\r\n              tasks: [{ ...element, editable: false }],\r\n            });\r\n          } else {\r\n            const idx = newArray.findIndex((arr) => arr.date === element.date);\r\n            newArray[idx].tasks.push({ ...element, editable: false });\r\n          }\r\n        });\r\n        // tasksList.value = newArray;\r\n        console.log(\"Load...\");\r\n        return newArray;\r\n      } catch (err) {\r\n        console.log(err.response.status);\r\n      }\r\n    },\r\n    loadOneTask(task_date) {\r\n      if (\r\n        this.tasksList.filter((arr) => arr[\"date\"] === task_date).length === 0\r\n      ) {\r\n        this.display = false;\r\n        this.tasksSlice = [];\r\n      } else {\r\n        // console.log(tasksList.value.filter((arr) => arr[\"date\"] === task_date)[0]);\r\n        this.tasksSlice = this.tasksList.filter(\r\n          (arr) => arr[\"date\"] === task_date\r\n        )[0];\r\n        this.display = true;\r\n        // SORT THE SLICE\r\n        this.tasksSlice.tasks.sort((a, b) =>\r\n          a.priority > b.priority ? 1 : b.priority > a.priority ? -1 : 0\r\n        );\r\n      }\r\n    },\r\n\r\n    // Checking or unchecking specific object in an array\r\n    async checkUncheck(element) {\r\n      try {\r\n        await axios.patch(\r\n          \"task/update/\" + element.task_id,\r\n          { completed: element.completed ? false : true },\r\n          { headers: authHeader() }\r\n        );\r\n        console.log(\"Completed!\");\r\n        // rerender ALL to-do tasks\r\n        this.tasksList = await this.loadTasks();\r\n        // get selected date's slice\r\n        this.loadOneTask(this.date);\r\n      } catch (err) {\r\n        console.log(err);\r\n        if (err.response.status === 401) {\r\n          localStorage.removeItem(\"user\");\r\n          router.push({ name: \"Authorization\" });\r\n        }\r\n      }\r\n    },\r\n    // adding the task - Post Request\r\n    async addNewTask() {\r\n      // priority is 1 if there are not tasks on that day, else it is autoincremented\r\n      const priority =\r\n        \"date\" in this.tasksSlice ? this.tasksSlice.tasks.length + 1 : 1;\r\n      if (this.enteredText !== \"\") {\r\n        try {\r\n          await axios.post(\r\n            \"task\",\r\n            {\r\n              priority: priority,\r\n              date: this.date,\r\n              text: this.enteredText,\r\n              completed: false,\r\n            },\r\n            {\r\n              headers: authHeader(),\r\n            }\r\n          );\r\n          console.log(\"Add request\");\r\n\r\n          // rerender ALL to-do tasks\r\n          this.tasksList = await this.loadTasks();\r\n          // get selected date's slice\r\n          this.loadOneTask(this.date);\r\n          //clear input field\r\n          this.enteredText = \"\";\r\n        } catch (err) {\r\n          if (err.response.status === 401) {\r\n            localStorage.removeItem(\"user\");\r\n            router.push({ name: \"Authorization\" });\r\n          }\r\n          console.log(err);\r\n        }\r\n      } else {\r\n        this.invalidInput = true;\r\n      }\r\n    },\r\n    // clear invalid input - to be used at blur\r\n    clearInvalidInput() {\r\n      this.invalidInput = false;\r\n    },\r\n    // Deleting specific task\r\n\r\n    async deleteTask(element) {\r\n      try {\r\n        await axios.get(\"task/delete/\" + element.task_id, {\r\n          headers: authHeader(),\r\n        });\r\n\r\n        // rerender ALL to-do tasks\r\n        console.log(\"Deleted!\");\r\n        this.tasksList = await this.loadTasks();\r\n        // get selected date's slice\r\n        this.loadOneTask(this.date);\r\n      } catch (err) {\r\n        console.log(err);\r\n        if (err.response.status === 401) {\r\n          localStorage.removeItem(\"user\");\r\n          router.push({ name: \"Authorization\" });\r\n        }\r\n      }\r\n      this.updatePriority();\r\n    },\r\n    // update tasks index/id on change - on drag / also used for deletion\r\n    async updatePriority() {\r\n      // GET changed priorities FIRST\r\n      const prioritiesList = {};\r\n      for (const idx in this.tasksSlice.tasks) {\r\n        if (this.tasksSlice.tasks[idx].priority !== Number(idx) + 1) {\r\n          prioritiesList[this.tasksSlice.tasks[idx].task_id] = Number(idx) + 1;\r\n        }\r\n      }\r\n      if (Object.keys(prioritiesList).length > 0) {\r\n        const payload = {};\r\n        payload[this.date] = prioritiesList;\r\n        // Update MULTIPLE field with ONE PATCH Request\r\n        try {\r\n          await axios.patch(\r\n            \"task/update_order\",\r\n            {\r\n              ...payload,\r\n            },\r\n            {\r\n              headers: authHeader(),\r\n            }\r\n          );\r\n          console.log(\"Multiple Rows Update!\");\r\n        } catch (err) {\r\n          console.log(err);\r\n          if (err.response.status === 401) {\r\n            localStorage.removeItem(\"user\");\r\n            router.push({ name: \"Authorization\" });\r\n          }\r\n        }\r\n\r\n        this.tasksList = await this.loadTasks();\r\n        this.loadOneTask(this.date);\r\n      }\r\n    },\r\n\r\n    // Apply EDIT changes at blur\r\n    async applyEditChanges(element) {\r\n      // No need to send HTTP request if Text is unchanged\r\n      if (this.editedText && this.editedText !== element.text) {\r\n        try {\r\n          await axios.patch(\r\n            \"task/update/\" + element.task_id,\r\n            { text: this.editedText },\r\n            { headers: authHeader() }\r\n          );\r\n          console.log(\"Edited!\");\r\n          // rerender ALL to-do tasks\r\n          this.tasksList = await this.loadTasks();\r\n          // get selected date's slice\r\n          this.loadOneTask(this.date);\r\n        } catch (err) {\r\n          if (err.response.status === 401) {\r\n            localStorage.removeItem(\"user\");\r\n            router.push({ name: \"Authorization\" });\r\n          }\r\n          console.log(err);\r\n        }\r\n      }\r\n    },\r\n  },\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}