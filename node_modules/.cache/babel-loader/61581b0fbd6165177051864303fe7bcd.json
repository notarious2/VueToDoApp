{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.regexp.flags.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\nimport \"core-js/modules/es.array.unshift.js\";\n\n/**\n  * vee-validate v4.6.10\n  * (c) 2022 Abdelrahman Awad\n  * @license MIT\n  */\nimport { inject, getCurrentInstance, warn as warn$1, ref, unref, computed, reactive, watch, onUnmounted, nextTick, onMounted, provide, isRef, onBeforeUnmount, defineComponent, toRef, resolveDynamicComponent, h, watchEffect, markRaw } from 'vue';\nimport { setupDevtoolsPlugin } from '@vue/devtools-api';\n\nfunction isCallable(fn) {\n  return typeof fn === 'function';\n}\n\nfunction isNullOrUndefined(value) {\n  return value === null || value === undefined;\n}\n\nconst isObject = obj => obj !== null && !!obj && typeof obj === 'object' && !Array.isArray(obj);\n\nfunction isIndex(value) {\n  return Number(value) >= 0;\n}\n\nfunction toNumber(value) {\n  const n = parseFloat(value);\n  return isNaN(n) ? value : n;\n}\n\nconst RULES = {};\n/**\r\n * Adds a custom validator to the list of validation rules.\r\n */\n\nfunction defineRule(id, validator) {\n  // makes sure new rules are properly formatted.\n  guardExtend(id, validator);\n  RULES[id] = validator;\n}\n/**\r\n * Gets an already defined rule\r\n */\n\n\nfunction resolveRule(id) {\n  return RULES[id];\n}\n/**\r\n * Guards from extension violations.\r\n */\n\n\nfunction guardExtend(id, validator) {\n  if (isCallable(validator)) {\n    return;\n  }\n\n  throw new Error(`Extension Error: The validator '${id}' must be a function.`);\n}\n\nconst FormContextKey = Symbol('vee-validate-form');\nconst FieldContextKey = Symbol('vee-validate-field-instance');\nconst IS_ABSENT = Symbol('Default empty value');\nconst isClient = typeof window !== 'undefined';\n\nfunction isLocator(value) {\n  return isCallable(value) && !!value.__locatorRef;\n}\n\nfunction isYupValidator(value) {\n  return !!value && isCallable(value.validate);\n}\n\nfunction hasCheckedAttr(type) {\n  return type === 'checkbox' || type === 'radio';\n}\n\nfunction isContainerValue(value) {\n  return isObject(value) || Array.isArray(value);\n}\n/**\r\n * True if the value is an empty object or array\r\n */\n\n\nfunction isEmptyContainer(value) {\n  if (Array.isArray(value)) {\n    return value.length === 0;\n  }\n\n  return isObject(value) && Object.keys(value).length === 0;\n}\n/**\r\n * Checks if the path opted out of nested fields using `[fieldName]` syntax\r\n */\n\n\nfunction isNotNestedPath(path) {\n  return /^\\[.+\\]$/i.test(path);\n}\n/**\r\n * Checks if an element is a native HTML5 multi-select input element\r\n */\n\n\nfunction isNativeMultiSelect(el) {\n  return isNativeSelect(el) && el.multiple;\n}\n/**\r\n * Checks if an element is a native HTML5 select input element\r\n */\n\n\nfunction isNativeSelect(el) {\n  return el.tagName === 'SELECT';\n}\n/**\r\n * Checks if a tag name with attrs object will render a native multi-select element\r\n */\n\n\nfunction isNativeMultiSelectNode(tag, attrs) {\n  // The falsy value array is the values that Vue won't add the `multiple` prop if it has one of these values\n  const hasTruthyBindingValue = ![false, null, undefined, 0].includes(attrs.multiple) && !Number.isNaN(attrs.multiple);\n  return tag === 'select' && 'multiple' in attrs && hasTruthyBindingValue;\n}\n/**\r\n * Checks if a node should have a `:value` binding or not\r\n *\r\n * These nodes should not have a value binding\r\n * For files, because they are not reactive\r\n * For multi-selects because the value binding will reset the value\r\n */\n\n\nfunction shouldHaveValueBinding(tag, attrs) {\n  return !isNativeMultiSelectNode(tag, attrs) && attrs.type !== 'file' && !hasCheckedAttr(attrs.type);\n}\n\nfunction isFormSubmitEvent(evt) {\n  return isEvent(evt) && evt.target && 'submit' in evt.target;\n}\n\nfunction isEvent(evt) {\n  if (!evt) {\n    return false;\n  }\n\n  if (typeof Event !== 'undefined' && isCallable(Event) && evt instanceof Event) {\n    return true;\n  } // this is for IE and Cypress #3161\n\n  /* istanbul ignore next */\n\n\n  if (evt && evt.srcElement) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction isPropPresent(obj, prop) {\n  return prop in obj && obj[prop] !== IS_ABSENT;\n}\n/**\r\n * Compares if two values are the same borrowed from:\r\n * https://github.com/epoberezkin/fast-deep-equal\r\n * We added a case for file matching since `Object.keys` doesn't work with Files.\r\n * */\n\n\nfunction isEqual(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    if (a.constructor !== b.constructor) return false; // eslint-disable-next-line no-var\n\n    var length, i, keys;\n\n    if (Array.isArray(a)) {\n      length = a.length; // eslint-disable-next-line eqeqeq\n\n      if (length != b.length) return false;\n\n      for (i = length; i-- !== 0;) if (!isEqual(a[i], b[i])) return false;\n\n      return true;\n    }\n\n    if (a instanceof Map && b instanceof Map) {\n      if (a.size !== b.size) return false;\n\n      for (i of a.entries()) if (!b.has(i[0])) return false;\n\n      for (i of a.entries()) if (!isEqual(i[1], b.get(i[0]))) return false;\n\n      return true;\n    } // We added this part for file comparison, arguably a little naive but should work for most cases.\n    // #3911\n\n\n    if (isFile(a) && isFile(b)) {\n      if (a.size !== b.size) return false;\n      if (a.name !== b.name) return false;\n      if (a.lastModified !== b.lastModified) return false;\n      if (a.type !== b.type) return false;\n      return true;\n    }\n\n    if (a instanceof Set && b instanceof Set) {\n      if (a.size !== b.size) return false;\n\n      for (i of a.entries()) if (!b.has(i[0])) return false;\n\n      return true;\n    }\n\n    if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {\n      length = a.length; // eslint-disable-next-line eqeqeq\n\n      if (length != b.length) return false;\n\n      for (i = length; i-- !== 0;) if (a[i] !== b[i]) return false;\n\n      return true;\n    }\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;) if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      // eslint-disable-next-line no-var\n      var key = keys[i];\n      if (!isEqual(a[key], b[key])) return false;\n    }\n\n    return true;\n  } // true if both NaN, false otherwise\n  // eslint-disable-next-line no-self-compare\n\n\n  return a !== a && b !== b;\n}\n\nfunction isFile(a) {\n  if (!isClient) {\n    return false;\n  }\n\n  return a instanceof File;\n} // do not edit .js files directly - edit src/index.jst\n\n\nvar fastDeepEqual = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n    var length, i, keys;\n\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n\n      for (i = length; i-- !== 0;) if (!equal(a[i], b[i])) return false;\n\n      return true;\n    }\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;) if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  } // true if both NaN, false otherwise\n\n\n  return a !== a && b !== b;\n};\n\nfunction cleanupNonNestedPath(path) {\n  if (isNotNestedPath(path)) {\n    return path.replace(/\\[|\\]/gi, '');\n  }\n\n  return path;\n}\n\nfunction getFromPath(object, path, fallback) {\n  if (!object) {\n    return fallback;\n  }\n\n  if (isNotNestedPath(path)) {\n    return object[cleanupNonNestedPath(path)];\n  }\n\n  const resolvedValue = (path || '').split(/\\.|\\[(\\d+)\\]/).filter(Boolean).reduce((acc, propKey) => {\n    if (isContainerValue(acc) && propKey in acc) {\n      return acc[propKey];\n    }\n\n    return fallback;\n  }, object);\n  return resolvedValue;\n}\n/**\r\n * Sets a nested property value in a path, creates the path properties if it doesn't exist\r\n */\n\n\nfunction setInPath(object, path, value) {\n  if (isNotNestedPath(path)) {\n    object[cleanupNonNestedPath(path)] = value;\n    return;\n  }\n\n  const keys = path.split(/\\.|\\[(\\d+)\\]/).filter(Boolean);\n  let acc = object;\n\n  for (let i = 0; i < keys.length; i++) {\n    // Last key, set it\n    if (i === keys.length - 1) {\n      acc[keys[i]] = value;\n      return;\n    } // Key does not exist, create a container for it\n\n\n    if (!(keys[i] in acc) || isNullOrUndefined(acc[keys[i]])) {\n      // container can be either an object or an array depending on the next key if it exists\n      acc[keys[i]] = isIndex(keys[i + 1]) ? [] : {};\n    }\n\n    acc = acc[keys[i]];\n  }\n}\n\nfunction unset(object, key) {\n  if (Array.isArray(object) && isIndex(key)) {\n    object.splice(Number(key), 1);\n    return;\n  }\n\n  if (isObject(object)) {\n    delete object[key];\n  }\n}\n/**\r\n * Removes a nested property from object\r\n */\n\n\nfunction unsetPath(object, path) {\n  if (isNotNestedPath(path)) {\n    delete object[cleanupNonNestedPath(path)];\n    return;\n  }\n\n  const keys = path.split(/\\.|\\[(\\d+)\\]/).filter(Boolean);\n  let acc = object;\n\n  for (let i = 0; i < keys.length; i++) {\n    // Last key, unset it\n    if (i === keys.length - 1) {\n      unset(acc, keys[i]);\n      break;\n    } // Key does not exist, exit\n\n\n    if (!(keys[i] in acc) || isNullOrUndefined(acc[keys[i]])) {\n      break;\n    }\n\n    acc = acc[keys[i]];\n  }\n\n  const pathValues = keys.map((_, idx) => {\n    return getFromPath(object, keys.slice(0, idx).join('.'));\n  });\n\n  for (let i = pathValues.length - 1; i >= 0; i--) {\n    if (!isEmptyContainer(pathValues[i])) {\n      continue;\n    }\n\n    if (i === 0) {\n      unset(object, keys[0]);\n      continue;\n    }\n\n    unset(pathValues[i - 1], keys[i - 1]);\n  }\n}\n/**\r\n * A typed version of Object.keys\r\n */\n\n\nfunction keysOf(record) {\n  return Object.keys(record);\n} // Uses same component provide as its own injections\n// Due to changes in https://github.com/vuejs/vue-next/pull/2424\n\n\nfunction injectWithSelf(symbol, def = undefined) {\n  const vm = getCurrentInstance();\n  return (vm === null || vm === void 0 ? void 0 : vm.provides[symbol]) || inject(symbol, def);\n}\n\nfunction warn(message) {\n  warn$1(`[vee-validate]: ${message}`);\n}\n/**\r\n * Ensures we deal with a singular field value\r\n */\n\n\nfunction normalizeField(field) {\n  if (Array.isArray(field)) {\n    return field[0];\n  }\n\n  return field;\n}\n\nfunction resolveNextCheckboxValue(currentValue, checkedValue, uncheckedValue) {\n  if (Array.isArray(currentValue)) {\n    const newVal = [...currentValue]; // Use isEqual since checked object values can possibly fail the equality check #3883\n\n    const idx = newVal.findIndex(v => fastDeepEqual(v, checkedValue));\n    idx >= 0 ? newVal.splice(idx, 1) : newVal.push(checkedValue);\n    return newVal;\n  }\n\n  return fastDeepEqual(currentValue, checkedValue) ? uncheckedValue : checkedValue;\n}\n/**\r\n * Creates a throttled function that only invokes the provided function (`func`) at most once per within a given number of milliseconds\r\n * (`limit`)\r\n */\n\n\nfunction throttle(func, limit) {\n  let inThrottle;\n  let lastResult;\n  return function (...args) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const context = this;\n\n    if (!inThrottle) {\n      inThrottle = true;\n      setTimeout(() => inThrottle = false, limit);\n      lastResult = func.apply(context, args);\n    }\n\n    return lastResult;\n  };\n}\n\nfunction debounceAsync(inner, ms = 0) {\n  let timer = null;\n  let resolves = [];\n  return function (...args) {\n    // Run the function after a certain amount of time\n    if (timer) {\n      window.clearTimeout(timer);\n    }\n\n    timer = window.setTimeout(() => {\n      // Get the result of the inner function, then apply it to the resolve function of\n      // each promise that has been created since the last time the inner function was run\n      const result = inner(...args);\n      resolves.forEach(r => r(result));\n      resolves = [];\n    }, ms);\n    return new Promise(resolve => resolves.push(resolve));\n  };\n}\n\nfunction applyModelModifiers(value, modifiers) {\n  if (!isObject(modifiers)) {\n    return value;\n  }\n\n  if (modifiers.number) {\n    return toNumber(value);\n  }\n\n  return value;\n}\n\nfunction withLatest(fn, onDone) {\n  let latestRun;\n  return async function runLatest(...args) {\n    const pending = fn(...args);\n    latestRun = pending;\n    const result = await pending;\n\n    if (pending !== latestRun) {\n      return result;\n    }\n\n    latestRun = undefined;\n    onDone(result, args);\n    return result;\n  };\n} // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nconst normalizeChildren = (tag, context, slotProps) => {\n  if (!context.slots.default) {\n    return context.slots.default;\n  }\n\n  if (typeof tag === 'string' || !tag) {\n    return context.slots.default(slotProps());\n  }\n\n  return {\n    default: () => {\n      var _a, _b;\n\n      return (_b = (_a = context.slots).default) === null || _b === void 0 ? void 0 : _b.call(_a, slotProps());\n    }\n  };\n};\n/**\r\n * Vue adds a `_value` prop at the moment on the input elements to store the REAL value on them, real values are different than the `value` attribute\r\n * as they do not get casted to strings unlike `el.value` which preserves user-code behavior\r\n */\n\n\nfunction getBoundValue(el) {\n  if (hasValueBinding(el)) {\n    return el._value;\n  }\n\n  return undefined;\n}\n/**\r\n * Vue adds a `_value` prop at the moment on the input elements to store the REAL value on them, real values are different than the `value` attribute\r\n * as they do not get casted to strings unlike `el.value` which preserves user-code behavior\r\n */\n\n\nfunction hasValueBinding(el) {\n  return '_value' in el;\n}\n\nfunction normalizeEventValue(value) {\n  if (!isEvent(value)) {\n    return value;\n  }\n\n  const input = value.target; // Vue sets the current bound value on `_value` prop\n  // for checkboxes it it should fetch the value binding type as is (boolean instead of string)\n\n  if (hasCheckedAttr(input.type) && hasValueBinding(input)) {\n    return getBoundValue(input);\n  }\n\n  if (input.type === 'file' && input.files) {\n    const files = Array.from(input.files);\n    return input.multiple ? files : files[0];\n  }\n\n  if (isNativeMultiSelect(input)) {\n    return Array.from(input.options).filter(opt => opt.selected && !opt.disabled).map(getBoundValue);\n  } // makes sure we get the actual `option` bound value\n  // #3440\n\n\n  if (isNativeSelect(input)) {\n    const selectedOption = Array.from(input.options).find(opt => opt.selected);\n    return selectedOption ? getBoundValue(selectedOption) : input.value;\n  }\n\n  return input.value;\n}\n/**\r\n * Normalizes the given rules expression.\r\n */\n\n\nfunction normalizeRules(rules) {\n  const acc = {};\n  Object.defineProperty(acc, '_$$isNormalized', {\n    value: true,\n    writable: false,\n    enumerable: false,\n    configurable: false\n  });\n\n  if (!rules) {\n    return acc;\n  } // Object is already normalized, skip.\n\n\n  if (isObject(rules) && rules._$$isNormalized) {\n    return rules;\n  }\n\n  if (isObject(rules)) {\n    return Object.keys(rules).reduce((prev, curr) => {\n      const params = normalizeParams(rules[curr]);\n\n      if (rules[curr] !== false) {\n        prev[curr] = buildParams(params);\n      }\n\n      return prev;\n    }, acc);\n  }\n  /* istanbul ignore if */\n\n\n  if (typeof rules !== 'string') {\n    return acc;\n  }\n\n  return rules.split('|').reduce((prev, rule) => {\n    const parsedRule = parseRule(rule);\n\n    if (!parsedRule.name) {\n      return prev;\n    }\n\n    prev[parsedRule.name] = buildParams(parsedRule.params);\n    return prev;\n  }, acc);\n}\n/**\r\n * Normalizes a rule param.\r\n */\n\n\nfunction normalizeParams(params) {\n  if (params === true) {\n    return [];\n  }\n\n  if (Array.isArray(params)) {\n    return params;\n  }\n\n  if (isObject(params)) {\n    return params;\n  }\n\n  return [params];\n}\n\nfunction buildParams(provided) {\n  const mapValueToLocator = value => {\n    // A target param using interpolation\n    if (typeof value === 'string' && value[0] === '@') {\n      return createLocator(value.slice(1));\n    }\n\n    return value;\n  };\n\n  if (Array.isArray(provided)) {\n    return provided.map(mapValueToLocator);\n  } // #3073\n\n\n  if (provided instanceof RegExp) {\n    return [provided];\n  }\n\n  return Object.keys(provided).reduce((prev, key) => {\n    prev[key] = mapValueToLocator(provided[key]);\n    return prev;\n  }, {});\n}\n/**\r\n * Parses a rule string expression.\r\n */\n\n\nconst parseRule = rule => {\n  let params = [];\n  const name = rule.split(':')[0];\n\n  if (rule.includes(':')) {\n    params = rule.split(':').slice(1).join(':').split(',');\n  }\n\n  return {\n    name,\n    params\n  };\n};\n\nfunction createLocator(value) {\n  const locator = crossTable => {\n    const val = getFromPath(crossTable, value) || crossTable[value];\n    return val;\n  };\n\n  locator.__locatorRef = value;\n  return locator;\n}\n\nfunction extractLocators(params) {\n  if (Array.isArray(params)) {\n    return params.filter(isLocator);\n  }\n\n  return keysOf(params).filter(key => isLocator(params[key])).map(key => params[key]);\n}\n\nconst DEFAULT_CONFIG = {\n  generateMessage: ({\n    field\n  }) => `${field} is not valid.`,\n  bails: true,\n  validateOnBlur: true,\n  validateOnChange: true,\n  validateOnInput: false,\n  validateOnModelUpdate: true\n};\nlet currentConfig = Object.assign({}, DEFAULT_CONFIG);\n\nconst getConfig = () => currentConfig;\n\nconst setConfig = newConf => {\n  currentConfig = Object.assign(Object.assign({}, currentConfig), newConf);\n};\n\nconst configure = setConfig;\n/**\r\n * Validates a value against the rules.\r\n */\n\nasync function validate(value, rules, options = {}) {\n  const shouldBail = options === null || options === void 0 ? void 0 : options.bails;\n  const field = {\n    name: (options === null || options === void 0 ? void 0 : options.name) || '{field}',\n    rules,\n    bails: shouldBail !== null && shouldBail !== void 0 ? shouldBail : true,\n    formData: (options === null || options === void 0 ? void 0 : options.values) || {}\n  };\n  const result = await _validate(field, value);\n  const errors = result.errors;\n  return {\n    errors,\n    valid: !errors.length\n  };\n}\n/**\r\n * Starts the validation process.\r\n */\n\n\nasync function _validate(field, value) {\n  if (isYupValidator(field.rules)) {\n    return validateFieldWithYup(value, field.rules, {\n      bails: field.bails\n    });\n  } // if a generic function or chain of generic functions\n\n\n  if (isCallable(field.rules) || Array.isArray(field.rules)) {\n    const ctx = {\n      field: field.name,\n      form: field.formData,\n      value: value\n    }; // Normalize the pipeline\n\n    const pipeline = Array.isArray(field.rules) ? field.rules : [field.rules];\n    const length = pipeline.length;\n    const errors = [];\n\n    for (let i = 0; i < length; i++) {\n      const rule = pipeline[i];\n      const result = await rule(value, ctx);\n      const isValid = typeof result !== 'string' && result;\n\n      if (isValid) {\n        continue;\n      }\n\n      const message = typeof result === 'string' ? result : _generateFieldError(ctx);\n      errors.push(message);\n\n      if (field.bails) {\n        return {\n          errors\n        };\n      }\n    }\n\n    return {\n      errors\n    };\n  }\n\n  const normalizedContext = Object.assign(Object.assign({}, field), {\n    rules: normalizeRules(field.rules)\n  });\n  const errors = [];\n  const rulesKeys = Object.keys(normalizedContext.rules);\n  const length = rulesKeys.length;\n\n  for (let i = 0; i < length; i++) {\n    const rule = rulesKeys[i];\n    const result = await _test(normalizedContext, value, {\n      name: rule,\n      params: normalizedContext.rules[rule]\n    });\n\n    if (result.error) {\n      errors.push(result.error);\n\n      if (field.bails) {\n        return {\n          errors\n        };\n      }\n    }\n  }\n\n  return {\n    errors\n  };\n}\n/**\r\n * Handles yup validation\r\n */\n\n\nasync function validateFieldWithYup(value, validator, opts) {\n  var _a;\n\n  const errors = await validator.validate(value, {\n    abortEarly: (_a = opts.bails) !== null && _a !== void 0 ? _a : true\n  }).then(() => []).catch(err => {\n    // Yup errors have a name prop one them.\n    // https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n    if (err.name === 'ValidationError') {\n      return err.errors;\n    } // re-throw the error so we don't hide it\n\n\n    throw err;\n  });\n  return {\n    errors\n  };\n}\n/**\r\n * Tests a single input value against a rule.\r\n */\n\n\nasync function _test(field, value, rule) {\n  const validator = resolveRule(rule.name);\n\n  if (!validator) {\n    throw new Error(`No such validator '${rule.name}' exists.`);\n  }\n\n  const params = fillTargetValues(rule.params, field.formData);\n  const ctx = {\n    field: field.name,\n    value,\n    form: field.formData,\n    rule: Object.assign(Object.assign({}, rule), {\n      params\n    })\n  };\n  const result = await validator(value, params, ctx);\n\n  if (typeof result === 'string') {\n    return {\n      error: result\n    };\n  }\n\n  return {\n    error: result ? undefined : _generateFieldError(ctx)\n  };\n}\n/**\r\n * Generates error messages.\r\n */\n\n\nfunction _generateFieldError(fieldCtx) {\n  const message = getConfig().generateMessage;\n\n  if (!message) {\n    return 'Field is invalid';\n  }\n\n  return message(fieldCtx);\n}\n\nfunction fillTargetValues(params, crossTable) {\n  const normalize = value => {\n    if (isLocator(value)) {\n      return value(crossTable);\n    }\n\n    return value;\n  };\n\n  if (Array.isArray(params)) {\n    return params.map(normalize);\n  }\n\n  return Object.keys(params).reduce((acc, param) => {\n    acc[param] = normalize(params[param]);\n    return acc;\n  }, {});\n}\n\nasync function validateYupSchema(schema, values) {\n  const errorObjects = await schema.validate(values, {\n    abortEarly: false\n  }).then(() => []).catch(err => {\n    // Yup errors have a name prop one them.\n    // https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n    if (err.name !== 'ValidationError') {\n      throw err;\n    } // list of aggregated errors\n\n\n    return err.inner || [];\n  });\n  const results = {};\n  const errors = {};\n\n  for (const error of errorObjects) {\n    const messages = error.errors;\n    results[error.path] = {\n      valid: !messages.length,\n      errors: messages\n    };\n\n    if (messages.length) {\n      errors[error.path] = messages[0];\n    }\n  }\n\n  return {\n    valid: !errorObjects.length,\n    results,\n    errors\n  };\n}\n\nasync function validateObjectSchema(schema, values, opts) {\n  const paths = keysOf(schema);\n  const validations = paths.map(async path => {\n    var _a, _b, _c;\n\n    const fieldResult = await validate(getFromPath(values, path), schema[path], {\n      name: ((_a = opts === null || opts === void 0 ? void 0 : opts.names) === null || _a === void 0 ? void 0 : _a[path]) || path,\n      values: values,\n      bails: (_c = (_b = opts === null || opts === void 0 ? void 0 : opts.bailsMap) === null || _b === void 0 ? void 0 : _b[path]) !== null && _c !== void 0 ? _c : true\n    });\n    return Object.assign(Object.assign({}, fieldResult), {\n      path\n    });\n  });\n  let isAllValid = true;\n  const validationResults = await Promise.all(validations);\n  const results = {};\n  const errors = {};\n\n  for (const result of validationResults) {\n    results[result.path] = {\n      valid: result.valid,\n      errors: result.errors\n    };\n\n    if (!result.valid) {\n      isAllValid = false;\n      errors[result.path] = result.errors[0];\n    }\n  }\n\n  return {\n    valid: isAllValid,\n    results,\n    errors\n  };\n}\n\nfunction set(obj, key, val) {\n  if (typeof val.value === 'object') val.value = klona(val.value);\n\n  if (!val.enumerable || val.get || val.set || !val.configurable || !val.writable || key === '__proto__') {\n    Object.defineProperty(obj, key, val);\n  } else obj[key] = val.value;\n}\n\nfunction klona(x) {\n  if (typeof x !== 'object') return x;\n  var i = 0,\n      k,\n      list,\n      tmp,\n      str = Object.prototype.toString.call(x);\n\n  if (str === '[object Object]') {\n    tmp = Object.create(x.__proto__ || null);\n  } else if (str === '[object Array]') {\n    tmp = Array(x.length);\n  } else if (str === '[object Set]') {\n    tmp = new Set();\n    x.forEach(function (val) {\n      tmp.add(klona(val));\n    });\n  } else if (str === '[object Map]') {\n    tmp = new Map();\n    x.forEach(function (val, key) {\n      tmp.set(klona(key), klona(val));\n    });\n  } else if (str === '[object Date]') {\n    tmp = new Date(+x);\n  } else if (str === '[object RegExp]') {\n    tmp = new RegExp(x.source, x.flags);\n  } else if (str === '[object DataView]') {\n    tmp = new x.constructor(klona(x.buffer));\n  } else if (str === '[object ArrayBuffer]') {\n    tmp = x.slice(0);\n  } else if (str.slice(-6) === 'Array]') {\n    // ArrayBuffer.isView(x)\n    // ~> `new` bcuz `Buffer.slice` => ref\n    tmp = new x.constructor(x);\n  }\n\n  if (tmp) {\n    for (list = Object.getOwnPropertySymbols(x); i < list.length; i++) {\n      set(tmp, list[i], Object.getOwnPropertyDescriptor(x, list[i]));\n    }\n\n    for (i = 0, list = Object.getOwnPropertyNames(x); i < list.length; i++) {\n      if (Object.hasOwnProperty.call(tmp, k = list[i]) && tmp[k] === x[k]) continue;\n      set(tmp, k, Object.getOwnPropertyDescriptor(x, k));\n    }\n  }\n\n  return tmp || x;\n}\n\nlet ID_COUNTER = 0;\n\nfunction useFieldState(path, init) {\n  const {\n    value,\n    initialValue,\n    setInitialValue\n  } = _useFieldValue(path, init.modelValue, !init.standalone);\n\n  const {\n    errorMessage,\n    errors,\n    setErrors\n  } = _useFieldErrors(path, !init.standalone);\n\n  const meta = _useFieldMeta(value, initialValue, errors);\n\n  const id = ID_COUNTER >= Number.MAX_SAFE_INTEGER ? 0 : ++ID_COUNTER;\n\n  function setState(state) {\n    var _a;\n\n    if ('value' in state) {\n      value.value = state.value;\n    }\n\n    if ('errors' in state) {\n      setErrors(state.errors);\n    }\n\n    if ('touched' in state) {\n      meta.touched = (_a = state.touched) !== null && _a !== void 0 ? _a : meta.touched;\n    }\n\n    if ('initialValue' in state) {\n      setInitialValue(state.initialValue);\n    }\n  }\n\n  return {\n    id,\n    path,\n    value,\n    initialValue,\n    meta,\n    errors,\n    errorMessage,\n    setState\n  };\n}\n/**\r\n * Creates the field value and resolves the initial value\r\n */\n\n\nfunction _useFieldValue(path, modelValue, shouldInjectForm = true) {\n  const form = shouldInjectForm === true ? injectWithSelf(FormContextKey, undefined) : undefined;\n  const modelRef = ref(unref(modelValue));\n\n  function resolveInitialValue() {\n    if (!form) {\n      return unref(modelRef);\n    }\n\n    return getFromPath(form.meta.value.initialValues, unref(path), unref(modelRef));\n  }\n\n  function setInitialValue(value) {\n    if (!form) {\n      modelRef.value = value;\n      return;\n    }\n\n    form.stageInitialValue(unref(path), value, true);\n  }\n\n  const initialValue = computed(resolveInitialValue); // if no form is associated, use a regular ref.\n\n  if (!form) {\n    const value = ref(resolveInitialValue());\n    return {\n      value,\n      initialValue,\n      setInitialValue\n    };\n  } // to set the initial value, first check if there is a current value, if there is then use it.\n  // otherwise use the configured initial value if it exists.\n  // prioritize model value over form values\n  // #3429\n\n\n  const currentValue = modelValue ? unref(modelValue) : getFromPath(form.values, unref(path), unref(initialValue));\n  form.stageInitialValue(unref(path), currentValue, true); // otherwise use a computed setter that triggers the `setFieldValue`\n\n  const value = computed({\n    get() {\n      return getFromPath(form.values, unref(path));\n    },\n\n    set(newVal) {\n      form.setFieldValue(unref(path), newVal);\n    }\n\n  });\n  return {\n    value,\n    initialValue,\n    setInitialValue\n  };\n}\n/**\r\n * Creates meta flags state and some associated effects with them\r\n */\n\n\nfunction _useFieldMeta(currentValue, initialValue, errors) {\n  const meta = reactive({\n    touched: false,\n    pending: false,\n    valid: true,\n    validated: !!unref(errors).length,\n    initialValue: computed(() => unref(initialValue)),\n    dirty: computed(() => {\n      return !isEqual(unref(currentValue), unref(initialValue));\n    })\n  });\n  watch(errors, value => {\n    meta.valid = !value.length;\n  }, {\n    immediate: true,\n    flush: 'sync'\n  });\n  return meta;\n}\n/**\r\n * Creates the error message state for the field state\r\n */\n\n\nfunction _useFieldErrors(path, shouldInjectForm) {\n  const form = shouldInjectForm ? injectWithSelf(FormContextKey, undefined) : undefined;\n\n  function normalizeErrors(messages) {\n    if (!messages) {\n      return [];\n    }\n\n    return Array.isArray(messages) ? messages : [messages];\n  }\n\n  if (!form) {\n    const errors = ref([]);\n    return {\n      errors,\n      errorMessage: computed(() => errors.value[0]),\n      setErrors: messages => {\n        errors.value = normalizeErrors(messages);\n      }\n    };\n  }\n\n  const errors = computed(() => form.errorBag.value[unref(path)] || []);\n  return {\n    errors,\n    errorMessage: computed(() => errors.value[0]),\n    setErrors: messages => {\n      form.setFieldErrorBag(unref(path), normalizeErrors(messages));\n    }\n  };\n}\n\nfunction installDevtoolsPlugin(app) {\n  if (process.env.NODE_ENV !== 'production') {\n    setupDevtoolsPlugin({\n      id: 'vee-validate-devtools-plugin',\n      label: 'VeeValidate Plugin',\n      packageName: 'vee-validate',\n      homepage: 'https://vee-validate.logaretm.com/v4',\n      app,\n      logo: 'https://vee-validate.logaretm.com/v4/logo.png'\n    }, setupApiHooks);\n  }\n}\n\nconst DEVTOOLS_FORMS = {};\nconst DEVTOOLS_FIELDS = {};\nlet API;\nconst refreshInspector = throttle(() => {\n  setTimeout(async () => {\n    await nextTick();\n    API === null || API === void 0 ? void 0 : API.sendInspectorState(INSPECTOR_ID);\n    API === null || API === void 0 ? void 0 : API.sendInspectorTree(INSPECTOR_ID);\n  }, 100);\n}, 100);\n\nfunction registerFormWithDevTools(form) {\n  const vm = getCurrentInstance();\n\n  if (!API) {\n    const app = vm === null || vm === void 0 ? void 0 : vm.appContext.app;\n\n    if (!app) {\n      return;\n    }\n\n    installDevtoolsPlugin(app);\n  }\n\n  DEVTOOLS_FORMS[form.formId] = Object.assign({}, form);\n  DEVTOOLS_FORMS[form.formId]._vm = vm;\n  onUnmounted(() => {\n    delete DEVTOOLS_FORMS[form.formId];\n    refreshInspector();\n  });\n  refreshInspector();\n}\n\nfunction registerSingleFieldWithDevtools(field) {\n  const vm = getCurrentInstance();\n\n  if (!API) {\n    const app = vm === null || vm === void 0 ? void 0 : vm.appContext.app;\n\n    if (!app) {\n      return;\n    }\n\n    installDevtoolsPlugin(app);\n  }\n\n  DEVTOOLS_FIELDS[field.id] = Object.assign({}, field);\n  DEVTOOLS_FIELDS[field.id]._vm = vm;\n  onUnmounted(() => {\n    delete DEVTOOLS_FIELDS[field.id];\n    refreshInspector();\n  });\n  refreshInspector();\n}\n\nconst INSPECTOR_ID = 'vee-validate-inspector';\nconst COLORS = {\n  error: 0xbd4b4b,\n  success: 0x06d77b,\n  unknown: 0x54436b,\n  white: 0xffffff,\n  black: 0x000000,\n  blue: 0x035397,\n  purple: 0xb980f0,\n  orange: 0xf5a962,\n  gray: 0xbbbfca\n};\nlet SELECTED_NODE = null;\n\nfunction setupApiHooks(api) {\n  API = api;\n  api.addInspector({\n    id: INSPECTOR_ID,\n    icon: 'rule',\n    label: 'vee-validate',\n    noSelectionText: 'Select a vee-validate node to inspect',\n    actions: [{\n      icon: 'done_outline',\n      tooltip: 'Validate selected item',\n      action: async () => {\n        if (!SELECTED_NODE) {\n          console.error('There is not a valid selected vee-validate node or component');\n          return;\n        }\n\n        const result = await SELECTED_NODE.validate();\n        console.log(result);\n      }\n    }, {\n      icon: 'delete_sweep',\n      tooltip: 'Clear validation state of the selected item',\n      action: () => {\n        if (!SELECTED_NODE) {\n          console.error('There is not a valid selected vee-validate node or component');\n          return;\n        }\n\n        if ('id' in SELECTED_NODE) {\n          SELECTED_NODE.resetField();\n          return;\n        }\n\n        SELECTED_NODE.resetForm();\n      }\n    }]\n  });\n  api.on.getInspectorTree(payload => {\n    if (payload.inspectorId !== INSPECTOR_ID) {\n      return;\n    }\n\n    const forms = Object.values(DEVTOOLS_FORMS);\n    const fields = Object.values(DEVTOOLS_FIELDS);\n    payload.rootNodes = [...forms.map(mapFormForDevtoolsInspector), ...fields.map(field => mapFieldForDevtoolsInspector(field))];\n  });\n  api.on.getInspectorState((payload, ctx) => {\n    if (payload.inspectorId !== INSPECTOR_ID || ctx.currentTab !== `custom-inspector:${INSPECTOR_ID}`) {\n      return;\n    }\n\n    const {\n      form,\n      field,\n      type\n    } = decodeNodeId(payload.nodeId);\n\n    if (form && type === 'form') {\n      payload.state = buildFormState(form);\n      SELECTED_NODE = form;\n      return;\n    }\n\n    if (field && type === 'field') {\n      payload.state = buildFieldState(field);\n      SELECTED_NODE = field;\n      return;\n    }\n\n    SELECTED_NODE = null;\n  });\n}\n\nfunction mapFormForDevtoolsInspector(form) {\n  const {\n    textColor,\n    bgColor\n  } = getTagTheme(form);\n  const formTreeNodes = {};\n  Object.values(form.fieldsByPath.value).forEach(field => {\n    const fieldInstance = Array.isArray(field) ? field[0] : field;\n\n    if (!fieldInstance) {\n      return;\n    }\n\n    setInPath(formTreeNodes, unref(fieldInstance.name), mapFieldForDevtoolsInspector(fieldInstance, form));\n  });\n\n  function buildFormTree(tree, path = []) {\n    const key = [...path].pop();\n\n    if ('id' in tree) {\n      return Object.assign(Object.assign({}, tree), {\n        label: key || tree.label\n      });\n    }\n\n    if (isObject(tree)) {\n      return {\n        id: `${path.join('.')}`,\n        label: key || '',\n        children: Object.keys(tree).map(key => buildFormTree(tree[key], [...path, key]))\n      };\n    }\n\n    if (Array.isArray(tree)) {\n      return {\n        id: `${path.join('.')}`,\n        label: `${key}[]`,\n        children: tree.map((c, idx) => buildFormTree(c, [...path, String(idx)]))\n      };\n    }\n\n    return {\n      id: '',\n      label: '',\n      children: []\n    };\n  }\n\n  const {\n    children\n  } = buildFormTree(formTreeNodes);\n  return {\n    id: encodeNodeId(form),\n    label: 'Form',\n    children,\n    tags: [{\n      label: 'Form',\n      textColor,\n      backgroundColor: bgColor\n    }, {\n      label: `${Object.keys(form.fieldsByPath.value).length} fields`,\n      textColor: COLORS.white,\n      backgroundColor: COLORS.unknown\n    }]\n  };\n}\n\nfunction mapFieldForDevtoolsInspector(field, form) {\n  const fieldInstance = normalizeField(field);\n  const {\n    textColor,\n    bgColor\n  } = getTagTheme(fieldInstance);\n  const isGroup = Array.isArray(field) && field.length > 1;\n  return {\n    id: encodeNodeId(form, fieldInstance, !isGroup),\n    label: unref(fieldInstance.name),\n    children: Array.isArray(field) ? field.map(fieldItem => mapFieldForDevtoolsInspector(fieldItem, form)) : undefined,\n    tags: [isGroup ? undefined : {\n      label: 'Field',\n      textColor,\n      backgroundColor: bgColor\n    }, !form ? {\n      label: 'Standalone',\n      textColor: COLORS.black,\n      backgroundColor: COLORS.gray\n    } : undefined, !isGroup && fieldInstance.type === 'checkbox' ? {\n      label: 'Checkbox',\n      textColor: COLORS.white,\n      backgroundColor: COLORS.blue\n    } : undefined, !isGroup && fieldInstance.type === 'radio' ? {\n      label: 'Radio',\n      textColor: COLORS.white,\n      backgroundColor: COLORS.purple\n    } : undefined, isGroup ? {\n      label: 'Group',\n      textColor: COLORS.black,\n      backgroundColor: COLORS.orange\n    } : undefined].filter(Boolean)\n  };\n}\n\nfunction encodeNodeId(form, field, encodeIndex = true) {\n  const fieldPath = form ? unref(field === null || field === void 0 ? void 0 : field.name) : field === null || field === void 0 ? void 0 : field.id;\n  const fieldGroup = fieldPath ? form === null || form === void 0 ? void 0 : form.fieldsByPath.value[fieldPath] : undefined;\n  let idx;\n\n  if (encodeIndex && field && Array.isArray(fieldGroup)) {\n    idx = fieldGroup.indexOf(field);\n  }\n\n  const idObject = {\n    f: form === null || form === void 0 ? void 0 : form.formId,\n    ff: fieldPath,\n    idx,\n    type: field ? 'field' : 'form'\n  };\n  return btoa(JSON.stringify(idObject));\n}\n\nfunction decodeNodeId(nodeId) {\n  try {\n    const idObject = JSON.parse(atob(nodeId));\n    const form = DEVTOOLS_FORMS[idObject.f];\n\n    if (!form && idObject.ff) {\n      const field = DEVTOOLS_FIELDS[idObject.ff];\n\n      if (!field) {\n        return {};\n      }\n\n      return {\n        type: idObject.type,\n        field\n      };\n    }\n\n    if (!form) {\n      return {};\n    }\n\n    const fieldGroup = form.fieldsByPath.value[idObject.ff];\n    return {\n      type: idObject.type,\n      form,\n      field: Array.isArray(fieldGroup) ? fieldGroup[idObject.idx || 0] : fieldGroup\n    };\n  } catch (err) {// console.error(`Devtools: [vee-validate] Failed to parse node id ${nodeId}`);\n  }\n\n  return {};\n}\n\nfunction buildFieldState(field) {\n  const {\n    errors,\n    meta,\n    value\n  } = field;\n  return {\n    'Field state': [{\n      key: 'errors',\n      value: errors.value\n    }, {\n      key: 'initialValue',\n      value: meta.initialValue\n    }, {\n      key: 'currentValue',\n      value: value.value\n    }, {\n      key: 'touched',\n      value: meta.touched\n    }, {\n      key: 'dirty',\n      value: meta.dirty\n    }, {\n      key: 'valid',\n      value: meta.valid\n    }]\n  };\n}\n\nfunction buildFormState(form) {\n  const {\n    errorBag,\n    meta,\n    values,\n    isSubmitting,\n    submitCount\n  } = form;\n  return {\n    'Form state': [{\n      key: 'submitCount',\n      value: submitCount.value\n    }, {\n      key: 'isSubmitting',\n      value: isSubmitting.value\n    }, {\n      key: 'touched',\n      value: meta.value.touched\n    }, {\n      key: 'dirty',\n      value: meta.value.dirty\n    }, {\n      key: 'valid',\n      value: meta.value.valid\n    }, {\n      key: 'initialValues',\n      value: meta.value.initialValues\n    }, {\n      key: 'currentValues',\n      value: values\n    }, {\n      key: 'errors',\n      value: keysOf(errorBag.value).reduce((acc, key) => {\n        var _a;\n\n        const message = (_a = errorBag.value[key]) === null || _a === void 0 ? void 0 : _a[0];\n\n        if (message) {\n          acc[key] = message;\n        }\n\n        return acc;\n      }, {})\n    }]\n  };\n}\n/**\r\n * Resolves the tag color based on the form state\r\n */\n\n\nfunction getTagTheme(fieldOrForm) {\n  // const fallbackColors = {\n  //   bgColor: COLORS.unknown,\n  //   textColor: COLORS.white,\n  // };\n  const isValid = 'id' in fieldOrForm ? fieldOrForm.meta.valid : fieldOrForm.meta.value.valid;\n  return {\n    bgColor: isValid ? COLORS.success : COLORS.error,\n    textColor: isValid ? COLORS.black : COLORS.white\n  };\n}\n/**\r\n * Creates a field composite.\r\n */\n\n\nfunction useField(name, rules, opts) {\n  if (hasCheckedAttr(opts === null || opts === void 0 ? void 0 : opts.type)) {\n    return useCheckboxField(name, rules, opts);\n  }\n\n  return _useField(name, rules, opts);\n}\n\nfunction _useField(name, rules, opts) {\n  const {\n    initialValue: modelValue,\n    validateOnMount,\n    bails,\n    type,\n    checkedValue,\n    label,\n    validateOnValueUpdate,\n    uncheckedValue,\n    standalone,\n    keepValueOnUnmount,\n    modelPropName,\n    syncVModel\n  } = normalizeOptions(unref(name), opts);\n  const form = !standalone ? injectWithSelf(FormContextKey) : undefined; // a flag indicating if the field is about to be removed/unmounted.\n\n  let markedForRemoval = false;\n  const {\n    id,\n    value,\n    initialValue,\n    meta,\n    setState,\n    errors,\n    errorMessage\n  } = useFieldState(name, {\n    modelValue,\n    standalone\n  });\n\n  if (syncVModel) {\n    useVModel({\n      value,\n      prop: modelPropName,\n      handleChange\n    });\n  }\n  /**\r\n   * Handles common onBlur meta update\r\n   */\n\n\n  const handleBlur = () => {\n    meta.touched = true;\n  };\n\n  const normalizedRules = computed(() => {\n    let rulesValue = unref(rules);\n    const schema = unref(form === null || form === void 0 ? void 0 : form.schema);\n\n    if (schema && !isYupValidator(schema)) {\n      rulesValue = extractRuleFromSchema(schema, unref(name)) || rulesValue;\n    }\n\n    if (isYupValidator(rulesValue) || isCallable(rulesValue) || Array.isArray(rulesValue)) {\n      return rulesValue;\n    }\n\n    return normalizeRules(rulesValue);\n  });\n\n  async function validateCurrentValue(mode) {\n    var _a, _b;\n\n    if (form === null || form === void 0 ? void 0 : form.validateSchema) {\n      return (_a = (await form.validateSchema(mode)).results[unref(name)]) !== null && _a !== void 0 ? _a : {\n        valid: true,\n        errors: []\n      };\n    }\n\n    return validate(value.value, normalizedRules.value, {\n      name: unref(label) || unref(name),\n      values: (_b = form === null || form === void 0 ? void 0 : form.values) !== null && _b !== void 0 ? _b : {},\n      bails\n    });\n  }\n\n  const validateWithStateMutation = withLatest(async () => {\n    meta.pending = true;\n    meta.validated = true;\n    return validateCurrentValue('validated-only');\n  }, result => {\n    if (markedForRemoval) {\n      result.valid = true;\n      result.errors = [];\n    }\n\n    setState({\n      errors: result.errors\n    });\n    meta.pending = false;\n    return result;\n  });\n  const validateValidStateOnly = withLatest(async () => {\n    return validateCurrentValue('silent');\n  }, result => {\n    if (markedForRemoval) {\n      result.valid = true;\n    }\n\n    meta.valid = result.valid;\n    return result;\n  });\n\n  function validate$1(opts) {\n    if ((opts === null || opts === void 0 ? void 0 : opts.mode) === 'silent') {\n      return validateValidStateOnly();\n    }\n\n    return validateWithStateMutation();\n  } // Common input/change event handler\n\n\n  function handleChange(e, shouldValidate = true) {\n    const newValue = normalizeEventValue(e);\n    value.value = newValue;\n\n    if (!validateOnValueUpdate && shouldValidate) {\n      validateWithStateMutation();\n    }\n  } // Runs the initial validation\n\n\n  onMounted(() => {\n    if (validateOnMount) {\n      return validateWithStateMutation();\n    } // validate self initially if no form was handling this\n    // forms should have their own initial silent validation run to make things more efficient\n\n\n    if (!form || !form.validateSchema) {\n      validateValidStateOnly();\n    }\n  });\n\n  function setTouched(isTouched) {\n    meta.touched = isTouched;\n  }\n\n  let unwatchValue;\n  let lastWatchedValue = klona(value.value);\n\n  function watchValue() {\n    unwatchValue = watch(value, (val, oldVal) => {\n      if (isEqual(val, oldVal) && isEqual(val, lastWatchedValue)) {\n        return;\n      }\n\n      const validateFn = validateOnValueUpdate ? validateWithStateMutation : validateValidStateOnly;\n      validateFn();\n      lastWatchedValue = klona(val);\n    }, {\n      deep: true\n    });\n  }\n\n  watchValue();\n\n  function resetField(state) {\n    var _a;\n\n    unwatchValue === null || unwatchValue === void 0 ? void 0 : unwatchValue();\n    const newValue = state && 'value' in state ? state.value : initialValue.value;\n    setState({\n      value: klona(newValue),\n      initialValue: klona(newValue),\n      touched: (_a = state === null || state === void 0 ? void 0 : state.touched) !== null && _a !== void 0 ? _a : false,\n      errors: (state === null || state === void 0 ? void 0 : state.errors) || []\n    });\n    meta.pending = false;\n    meta.validated = false;\n    validateValidStateOnly(); // need to watch at next tick to avoid triggering the value watcher\n\n    nextTick(() => {\n      watchValue();\n    });\n  }\n\n  function setValue(newValue) {\n    value.value = newValue;\n  }\n\n  function setErrors(errors) {\n    setState({\n      errors: Array.isArray(errors) ? errors : [errors]\n    });\n  }\n\n  const field = {\n    id,\n    name,\n    label,\n    value,\n    meta,\n    errors,\n    errorMessage,\n    type,\n    checkedValue,\n    uncheckedValue,\n    bails,\n    keepValueOnUnmount,\n    resetField,\n    handleReset: () => resetField(),\n    validate: validate$1,\n    handleChange,\n    handleBlur,\n    setState,\n    setTouched,\n    setErrors,\n    setValue\n  };\n  provide(FieldContextKey, field);\n\n  if (isRef(rules) && typeof unref(rules) !== 'function') {\n    watch(rules, (value, oldValue) => {\n      if (isEqual(value, oldValue)) {\n        return;\n      }\n\n      meta.validated ? validateWithStateMutation() : validateValidStateOnly();\n    }, {\n      deep: true\n    });\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    field._vm = getCurrentInstance();\n    watch(() => Object.assign(Object.assign({\n      errors: errors.value\n    }, meta), {\n      value: value.value\n    }), refreshInspector, {\n      deep: true\n    });\n\n    if (!form) {\n      registerSingleFieldWithDevtools(field);\n    }\n  } // if no associated form return the field API immediately\n\n\n  if (!form) {\n    return field;\n  } // associate the field with the given form\n\n\n  form.register(field);\n  onBeforeUnmount(() => {\n    markedForRemoval = true;\n    form.unregister(field);\n  }); // extract cross-field dependencies in a computed prop\n\n  const dependencies = computed(() => {\n    const rulesVal = normalizedRules.value; // is falsy, a function schema or a yup schema\n\n    if (!rulesVal || isCallable(rulesVal) || isYupValidator(rulesVal) || Array.isArray(rulesVal)) {\n      return {};\n    }\n\n    return Object.keys(rulesVal).reduce((acc, rule) => {\n      const deps = extractLocators(rulesVal[rule]).map(dep => dep.__locatorRef).reduce((depAcc, depName) => {\n        const depValue = getFromPath(form.values, depName) || form.values[depName];\n\n        if (depValue !== undefined) {\n          depAcc[depName] = depValue;\n        }\n\n        return depAcc;\n      }, {});\n      Object.assign(acc, deps);\n      return acc;\n    }, {});\n  }); // Adds a watcher that runs the validation whenever field dependencies change\n\n  watch(dependencies, (deps, oldDeps) => {\n    // Skip if no dependencies or if the field wasn't manipulated\n    if (!Object.keys(deps).length) {\n      return;\n    }\n\n    const shouldValidate = !isEqual(deps, oldDeps);\n\n    if (shouldValidate) {\n      meta.validated ? validateWithStateMutation() : validateValidStateOnly();\n    }\n  });\n  return field;\n}\n/**\r\n * Normalizes partial field options to include the full options\r\n */\n\n\nfunction normalizeOptions(name, opts) {\n  const defaults = () => ({\n    initialValue: undefined,\n    validateOnMount: false,\n    bails: true,\n    rules: '',\n    label: name,\n    validateOnValueUpdate: true,\n    standalone: false,\n    keepValueOnUnmount: undefined,\n    modelPropName: 'modelValue',\n    syncVModel: true\n  });\n\n  if (!opts) {\n    return defaults();\n  } // TODO: Deprecate this in next major release\n\n\n  const checkedValue = 'valueProp' in opts ? opts.valueProp : opts.checkedValue;\n  return Object.assign(Object.assign(Object.assign({}, defaults()), opts || {}), {\n    checkedValue\n  });\n}\n/**\r\n * Extracts the validation rules from a schema\r\n */\n\n\nfunction extractRuleFromSchema(schema, fieldName) {\n  // no schema at all\n  if (!schema) {\n    return undefined;\n  } // there is a key on the schema object for this field\n\n\n  return schema[fieldName];\n}\n\nfunction useCheckboxField(name, rules, opts) {\n  const form = !(opts === null || opts === void 0 ? void 0 : opts.standalone) ? injectWithSelf(FormContextKey) : undefined;\n  const checkedValue = opts === null || opts === void 0 ? void 0 : opts.checkedValue;\n  const uncheckedValue = opts === null || opts === void 0 ? void 0 : opts.uncheckedValue;\n\n  function patchCheckboxApi(field) {\n    const handleChange = field.handleChange;\n    const checked = computed(() => {\n      const currentValue = unref(field.value);\n      const checkedVal = unref(checkedValue);\n      return Array.isArray(currentValue) ? currentValue.findIndex(v => isEqual(v, checkedVal)) >= 0 : isEqual(checkedVal, currentValue);\n    });\n\n    function handleCheckboxChange(e, shouldValidate = true) {\n      var _a;\n\n      if (checked.value === ((_a = e === null || e === void 0 ? void 0 : e.target) === null || _a === void 0 ? void 0 : _a.checked)) {\n        if (shouldValidate) {\n          field.validate();\n        }\n\n        return;\n      }\n\n      let newValue = normalizeEventValue(e); // Single checkbox field without a form to toggle it's value\n\n      if (!form) {\n        newValue = resolveNextCheckboxValue(unref(field.value), unref(checkedValue), unref(uncheckedValue));\n      }\n\n      handleChange(newValue, shouldValidate);\n    }\n\n    return Object.assign(Object.assign({}, field), {\n      checked,\n      checkedValue,\n      uncheckedValue,\n      handleChange: handleCheckboxChange\n    });\n  }\n\n  return patchCheckboxApi(_useField(name, rules, opts));\n}\n\nfunction useVModel({\n  prop,\n  value,\n  handleChange\n}) {\n  const vm = getCurrentInstance();\n  /* istanbul ignore next */\n\n  if (!vm) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn('Failed to setup model events because `useField` was not called in setup.');\n    }\n\n    return;\n  }\n\n  const propName = prop || 'modelValue';\n  const emitName = `update:${propName}`; // Component doesn't have a model prop setup (must be defined on the props)\n\n  if (!(propName in vm.props)) {\n    return;\n  }\n\n  watch(value, newValue => {\n    if (isEqual(newValue, getCurrentModelValue(vm, propName))) {\n      return;\n    }\n\n    vm.emit(emitName, newValue);\n  });\n  watch(() => getCurrentModelValue(vm, propName), propValue => {\n    if (propValue === IS_ABSENT && value.value === undefined) {\n      return;\n    }\n\n    const newValue = propValue === IS_ABSENT ? undefined : propValue;\n\n    if (isEqual(newValue, applyModelModifiers(value.value, vm.props.modelModifiers))) {\n      return;\n    }\n\n    handleChange(newValue);\n  });\n}\n\nfunction getCurrentModelValue(vm, propName) {\n  return vm.props[propName];\n}\n\nconst FieldImpl = defineComponent({\n  name: 'Field',\n  inheritAttrs: false,\n  props: {\n    as: {\n      type: [String, Object],\n      default: undefined\n    },\n    name: {\n      type: String,\n      required: true\n    },\n    rules: {\n      type: [Object, String, Function],\n      default: undefined\n    },\n    validateOnMount: {\n      type: Boolean,\n      default: false\n    },\n    validateOnBlur: {\n      type: Boolean,\n      default: undefined\n    },\n    validateOnChange: {\n      type: Boolean,\n      default: undefined\n    },\n    validateOnInput: {\n      type: Boolean,\n      default: undefined\n    },\n    validateOnModelUpdate: {\n      type: Boolean,\n      default: undefined\n    },\n    bails: {\n      type: Boolean,\n      default: () => getConfig().bails\n    },\n    label: {\n      type: String,\n      default: undefined\n    },\n    uncheckedValue: {\n      type: null,\n      default: undefined\n    },\n    modelValue: {\n      type: null,\n      default: IS_ABSENT\n    },\n    modelModifiers: {\n      type: null,\n      default: () => ({})\n    },\n    'onUpdate:modelValue': {\n      type: null,\n      default: undefined\n    },\n    standalone: {\n      type: Boolean,\n      default: false\n    },\n    keepValue: {\n      type: Boolean,\n      default: undefined\n    }\n  },\n\n  setup(props, ctx) {\n    const rules = toRef(props, 'rules');\n    const name = toRef(props, 'name');\n    const label = toRef(props, 'label');\n    const uncheckedValue = toRef(props, 'uncheckedValue');\n    const keepValue = toRef(props, 'keepValue');\n    const {\n      errors,\n      value,\n      errorMessage,\n      validate: validateField,\n      handleChange,\n      handleBlur,\n      setTouched,\n      resetField,\n      handleReset,\n      meta,\n      checked,\n      setErrors\n    } = useField(name, rules, {\n      validateOnMount: props.validateOnMount,\n      bails: props.bails,\n      standalone: props.standalone,\n      type: ctx.attrs.type,\n      initialValue: resolveInitialValue(props, ctx),\n      // Only for checkboxes and radio buttons\n      checkedValue: ctx.attrs.value,\n      uncheckedValue,\n      label,\n      validateOnValueUpdate: false,\n      keepValueOnUnmount: keepValue\n    }); // If there is a v-model applied on the component we need to emit the `update:modelValue` whenever the value binding changes\n\n    const onChangeHandler = function handleChangeWithModel(e, shouldValidate = true) {\n      handleChange(e, shouldValidate);\n      ctx.emit('update:modelValue', value.value);\n    };\n\n    const handleInput = e => {\n      if (!hasCheckedAttr(ctx.attrs.type)) {\n        value.value = normalizeEventValue(e);\n      }\n    };\n\n    const onInputHandler = function handleInputWithModel(e) {\n      handleInput(e);\n      ctx.emit('update:modelValue', value.value);\n    };\n\n    const fieldProps = computed(() => {\n      const {\n        validateOnInput,\n        validateOnChange,\n        validateOnBlur,\n        validateOnModelUpdate\n      } = resolveValidationTriggers(props);\n      const baseOnBlur = [handleBlur, ctx.attrs.onBlur, validateOnBlur ? validateField : undefined].filter(Boolean);\n      const baseOnInput = [e => onChangeHandler(e, validateOnInput), ctx.attrs.onInput].filter(Boolean);\n      const baseOnChange = [e => onChangeHandler(e, validateOnChange), ctx.attrs.onChange].filter(Boolean);\n      const attrs = {\n        name: props.name,\n        onBlur: baseOnBlur,\n        onInput: baseOnInput,\n        onChange: baseOnChange\n      };\n\n      attrs['onUpdate:modelValue'] = e => onChangeHandler(e, validateOnModelUpdate);\n\n      if (hasCheckedAttr(ctx.attrs.type) && checked) {\n        attrs.checked = checked.value;\n      }\n\n      const tag = resolveTag(props, ctx);\n\n      if (shouldHaveValueBinding(tag, ctx.attrs)) {\n        attrs.value = value.value;\n      }\n\n      return attrs;\n    });\n\n    function slotProps() {\n      return {\n        field: fieldProps.value,\n        value: value.value,\n        meta,\n        errors: errors.value,\n        errorMessage: errorMessage.value,\n        validate: validateField,\n        resetField,\n        handleChange: onChangeHandler,\n        handleInput: onInputHandler,\n        handleReset,\n        handleBlur,\n        setTouched,\n        setErrors\n      };\n    }\n\n    ctx.expose({\n      setErrors,\n      setTouched,\n      reset: resetField,\n      validate: validateField,\n      handleChange\n    });\n    return () => {\n      const tag = resolveDynamicComponent(resolveTag(props, ctx));\n      const children = normalizeChildren(tag, ctx, slotProps);\n\n      if (tag) {\n        return h(tag, Object.assign(Object.assign({}, ctx.attrs), fieldProps.value), children);\n      }\n\n      return children;\n    };\n  }\n\n});\n\nfunction resolveTag(props, ctx) {\n  let tag = props.as || '';\n\n  if (!props.as && !ctx.slots.default) {\n    tag = 'input';\n  }\n\n  return tag;\n}\n\nfunction resolveValidationTriggers(props) {\n  var _a, _b, _c, _d;\n\n  const {\n    validateOnInput,\n    validateOnChange,\n    validateOnBlur,\n    validateOnModelUpdate\n  } = getConfig();\n  return {\n    validateOnInput: (_a = props.validateOnInput) !== null && _a !== void 0 ? _a : validateOnInput,\n    validateOnChange: (_b = props.validateOnChange) !== null && _b !== void 0 ? _b : validateOnChange,\n    validateOnBlur: (_c = props.validateOnBlur) !== null && _c !== void 0 ? _c : validateOnBlur,\n    validateOnModelUpdate: (_d = props.validateOnModelUpdate) !== null && _d !== void 0 ? _d : validateOnModelUpdate\n  };\n}\n\nfunction resolveInitialValue(props, ctx) {\n  // Gets the initial value either from `value` prop/attr or `v-model` binding (modelValue)\n  // For checkboxes and radio buttons it will always be the model value not the `value` attribute\n  if (!hasCheckedAttr(ctx.attrs.type)) {\n    return isPropPresent(props, 'modelValue') ? props.modelValue : ctx.attrs.value;\n  }\n\n  return isPropPresent(props, 'modelValue') ? props.modelValue : undefined;\n}\n\nconst Field = FieldImpl;\nlet FORM_COUNTER = 0;\n\nfunction useForm(opts) {\n  var _a;\n\n  const formId = FORM_COUNTER++; // Prevents fields from double resetting their values, which causes checkboxes to toggle their initial value\n  // TODO: This won't be needed if we centralize all the state inside the `form` for form inputs\n\n  let RESET_LOCK = false; // A lookup containing fields or field groups\n\n  const fieldsByPath = ref({}); // If the form is currently submitting\n\n  const isSubmitting = ref(false); // The number of times the user tried to submit the form\n\n  const submitCount = ref(0); // field arrays managed by this form\n\n  const fieldArrays = []; // a private ref for all form values\n\n  const formValues = reactive(klona(unref(opts === null || opts === void 0 ? void 0 : opts.initialValues) || {})); // the source of errors for the form fields\n\n  const {\n    errorBag,\n    setErrorBag,\n    setFieldErrorBag\n  } = useErrorBag(opts === null || opts === void 0 ? void 0 : opts.initialErrors); // Gets the first error of each field\n\n  const errors = computed(() => {\n    return keysOf(errorBag.value).reduce((acc, key) => {\n      const bag = errorBag.value[key];\n\n      if (bag && bag.length) {\n        acc[key] = bag[0];\n      }\n\n      return acc;\n    }, {});\n  });\n\n  function getFirstFieldAtPath(path) {\n    const fieldOrGroup = fieldsByPath.value[path];\n    return Array.isArray(fieldOrGroup) ? fieldOrGroup[0] : fieldOrGroup;\n  }\n\n  function fieldExists(path) {\n    return !!fieldsByPath.value[path];\n  }\n  /**\r\n   * Holds a computed reference to all fields names and labels\r\n   */\n\n\n  const fieldNames = computed(() => {\n    return keysOf(fieldsByPath.value).reduce((names, path) => {\n      const field = getFirstFieldAtPath(path);\n\n      if (field) {\n        names[path] = unref(field.label || field.name) || '';\n      }\n\n      return names;\n    }, {});\n  });\n  const fieldBailsMap = computed(() => {\n    return keysOf(fieldsByPath.value).reduce((map, path) => {\n      var _a;\n\n      const field = getFirstFieldAtPath(path);\n\n      if (field) {\n        map[path] = (_a = field.bails) !== null && _a !== void 0 ? _a : true;\n      }\n\n      return map;\n    }, {});\n  }); // mutable non-reactive reference to initial errors\n  // we need this to process initial errors then unset them\n\n  const initialErrors = Object.assign({}, (opts === null || opts === void 0 ? void 0 : opts.initialErrors) || {});\n  const keepValuesOnUnmount = (_a = opts === null || opts === void 0 ? void 0 : opts.keepValuesOnUnmount) !== null && _a !== void 0 ? _a : false; // initial form values\n\n  const {\n    initialValues,\n    originalInitialValues,\n    setInitialValues\n  } = useFormInitialValues(fieldsByPath, formValues, opts === null || opts === void 0 ? void 0 : opts.initialValues); // form meta aggregations\n\n  const meta = useFormMeta(fieldsByPath, formValues, originalInitialValues, errors);\n  const schema = opts === null || opts === void 0 ? void 0 : opts.validationSchema;\n  /**\r\n   * Batches validation runs in 5ms batches\r\n   * Must have two distinct batch queues to make sure they don't override each other settings #3783\r\n   */\n\n  const debouncedSilentValidation = debounceAsync(_validateSchema, 5);\n  const debouncedValidation = debounceAsync(_validateSchema, 5);\n  const validateSchema = withLatest(async mode => {\n    return (await mode) === 'silent' ? debouncedSilentValidation() : debouncedValidation();\n  }, (formResult, [mode]) => {\n    // fields by id lookup\n    const fieldsById = formCtx.fieldsByPath.value || {}; // errors fields names, we need it to also check if custom errors are updated\n\n    const currentErrorsPaths = keysOf(formCtx.errorBag.value); // collect all the keys from the schema and all fields\n    // this ensures we have a complete keymap of all the fields\n\n    const paths = [...new Set([...keysOf(formResult.results), ...keysOf(fieldsById), ...currentErrorsPaths])]; // aggregates the paths into a single result object while applying the results on the fields\n\n    return paths.reduce((validation, path) => {\n      const field = fieldsById[path];\n      const messages = (formResult.results[path] || {\n        errors: []\n      }).errors;\n      const fieldResult = {\n        errors: messages,\n        valid: !messages.length\n      };\n      validation.results[path] = fieldResult;\n\n      if (!fieldResult.valid) {\n        validation.errors[path] = fieldResult.errors[0];\n      } // field not rendered\n\n\n      if (!field) {\n        setFieldError(path, messages);\n        return validation;\n      } // always update the valid flag regardless of the mode\n\n\n      applyFieldMutation(field, f => f.meta.valid = fieldResult.valid);\n\n      if (mode === 'silent') {\n        return validation;\n      }\n\n      const wasValidated = Array.isArray(field) ? field.some(f => f.meta.validated) : field.meta.validated;\n\n      if (mode === 'validated-only' && !wasValidated) {\n        return validation;\n      }\n\n      applyFieldMutation(field, f => f.setState({\n        errors: fieldResult.errors\n      }));\n      return validation;\n    }, {\n      valid: formResult.valid,\n      results: {},\n      errors: {}\n    });\n  });\n  const formCtx = {\n    formId,\n    fieldsByPath,\n    values: formValues,\n    errorBag,\n    errors,\n    schema,\n    submitCount,\n    meta,\n    isSubmitting,\n    fieldArrays,\n    keepValuesOnUnmount,\n    validateSchema: unref(schema) ? validateSchema : undefined,\n    validate,\n    register: registerField,\n    unregister: unregisterField,\n    setFieldErrorBag,\n    validateField,\n    setFieldValue,\n    setValues,\n    setErrors,\n    setFieldError,\n    setFieldTouched,\n    setTouched,\n    resetForm,\n    handleSubmit,\n    stageInitialValue,\n    unsetInitialValue,\n    setFieldInitialValue,\n    useFieldModel\n  };\n\n  function isFieldGroup(fieldOrGroup) {\n    return Array.isArray(fieldOrGroup);\n  }\n\n  function applyFieldMutation(fieldOrGroup, mutation) {\n    if (Array.isArray(fieldOrGroup)) {\n      return fieldOrGroup.forEach(mutation);\n    }\n\n    return mutation(fieldOrGroup);\n  }\n\n  function mutateAllFields(mutation) {\n    Object.values(fieldsByPath.value).forEach(field => {\n      if (!field) {\n        return;\n      } // avoid resetting the field values, because they should've been reset already.\n\n\n      applyFieldMutation(field, mutation);\n    });\n  }\n  /**\r\n   * Manually sets an error message on a specific field\r\n   */\n\n\n  function setFieldError(field, message) {\n    setFieldErrorBag(field, message);\n  }\n  /**\r\n   * Sets errors for the fields specified in the object\r\n   */\n\n\n  function setErrors(fields) {\n    setErrorBag(fields);\n  }\n  /**\r\n   * Sets a single field value\r\n   */\n\n\n  function setFieldValue(field, value, {\n    force\n  } = {\n    force: false\n  }) {\n    var _a;\n\n    const fieldInstance = fieldsByPath.value[field];\n    const clonedValue = klona(value); // field wasn't found, create a virtual field as a placeholder\n\n    if (!fieldInstance) {\n      setInPath(formValues, field, clonedValue);\n      return;\n    }\n\n    if (isFieldGroup(fieldInstance) && ((_a = fieldInstance[0]) === null || _a === void 0 ? void 0 : _a.type) === 'checkbox' && !Array.isArray(value)) {\n      // Multiple checkboxes, and only one of them got updated\n      const newValue = klona(resolveNextCheckboxValue(getFromPath(formValues, field) || [], value, undefined));\n      setInPath(formValues, field, newValue);\n      return;\n    }\n\n    let newValue = value; // Single Checkbox: toggles the field value unless the field is being reset then force it\n\n    if (!isFieldGroup(fieldInstance) && fieldInstance.type === 'checkbox' && !force && !RESET_LOCK) {\n      newValue = klona(resolveNextCheckboxValue(getFromPath(formValues, field), value, unref(fieldInstance.uncheckedValue)));\n    }\n\n    setInPath(formValues, field, newValue);\n  }\n  /**\r\n   * Sets multiple fields values\r\n   */\n\n\n  function setValues(fields) {\n    // clean up old values\n    keysOf(formValues).forEach(key => {\n      delete formValues[key];\n    }); // set up new values\n\n    keysOf(fields).forEach(path => {\n      setFieldValue(path, fields[path]);\n    }); // regenerate the arrays when the form values change\n\n    fieldArrays.forEach(f => f && f.reset());\n  }\n\n  function createModel(path) {\n    const {\n      value\n    } = _useFieldValue(path);\n\n    watch(value, () => {\n      if (!fieldExists(unref(path))) {\n        validate({\n          mode: 'validated-only'\n        });\n      }\n    }, {\n      deep: true\n    });\n    return value;\n  }\n\n  function useFieldModel(path) {\n    if (!Array.isArray(path)) {\n      return createModel(path);\n    }\n\n    return path.map(createModel);\n  }\n  /**\r\n   * Sets the touched meta state on a field\r\n   */\n\n\n  function setFieldTouched(field, isTouched) {\n    const fieldInstance = fieldsByPath.value[field];\n\n    if (fieldInstance) {\n      applyFieldMutation(fieldInstance, f => f.setTouched(isTouched));\n    }\n  }\n  /**\r\n   * Sets the touched meta state on multiple fields\r\n   */\n\n\n  function setTouched(fields) {\n    keysOf(fields).forEach(field => {\n      setFieldTouched(field, !!fields[field]);\n    });\n  }\n  /**\r\n   * Resets all fields\r\n   */\n\n\n  function resetForm(state) {\n    RESET_LOCK = true; // Reset all field states first\n\n    mutateAllFields(f => f.resetField()); // set initial values if provided\n\n    if (state === null || state === void 0 ? void 0 : state.values) {\n      setInitialValues(state.values);\n      setValues(state === null || state === void 0 ? void 0 : state.values);\n    } else {\n      // clean up the initial values back to the original\n      setInitialValues(originalInitialValues.value); // otherwise clean the current values\n\n      setValues(originalInitialValues.value);\n    }\n\n    if (state === null || state === void 0 ? void 0 : state.touched) {\n      setTouched(state.touched);\n    }\n\n    setErrors((state === null || state === void 0 ? void 0 : state.errors) || {});\n    submitCount.value = (state === null || state === void 0 ? void 0 : state.submitCount) || 0;\n    nextTick(() => {\n      RESET_LOCK = false;\n    });\n  }\n\n  function insertFieldAtPath(field, path) {\n    const rawField = markRaw(field);\n    const fieldPath = path; // first field at that path\n\n    if (!fieldsByPath.value[fieldPath]) {\n      fieldsByPath.value[fieldPath] = rawField;\n      return;\n    }\n\n    const fieldAtPath = fieldsByPath.value[fieldPath];\n\n    if (fieldAtPath && !Array.isArray(fieldAtPath)) {\n      fieldsByPath.value[fieldPath] = [fieldAtPath];\n    } // add the new array to that path\n\n\n    fieldsByPath.value[fieldPath] = [...fieldsByPath.value[fieldPath], rawField];\n  }\n\n  function removeFieldFromPath(field, path) {\n    const fieldPath = path;\n    const fieldAtPath = fieldsByPath.value[fieldPath];\n\n    if (!fieldAtPath) {\n      return;\n    } // same field at path\n\n\n    if (!isFieldGroup(fieldAtPath) && field.id === fieldAtPath.id) {\n      delete fieldsByPath.value[fieldPath];\n      return;\n    }\n\n    if (isFieldGroup(fieldAtPath)) {\n      const idx = fieldAtPath.findIndex(f => f.id === field.id);\n\n      if (idx === -1) {\n        return;\n      }\n\n      fieldAtPath.splice(idx, 1);\n\n      if (!fieldAtPath.length) {\n        delete fieldsByPath.value[fieldPath];\n      }\n    }\n  }\n\n  function registerField(field) {\n    const fieldPath = unref(field.name);\n    insertFieldAtPath(field, fieldPath);\n\n    if (isRef(field.name)) {\n      // ensures when a field's name was already taken that it preserves its same value\n      // necessary for fields generated by loops\n      watch(field.name, async (newPath, oldPath) => {\n        // cache the value\n        await nextTick();\n        removeFieldFromPath(field, oldPath);\n        insertFieldAtPath(field, newPath); // re-validate if either path had errors before\n\n        if (errors.value[oldPath] || errors.value[newPath]) {\n          // clear up both paths errors\n          setFieldError(oldPath, undefined);\n          validateField(newPath);\n        } // clean up the old path if no other field is sharing that name\n        // #3325\n\n\n        await nextTick();\n\n        if (!fieldExists(oldPath)) {\n          unsetPath(formValues, oldPath);\n        }\n      });\n    } // if field already had errors (initial errors) that's not user-set, validate it again to ensure state is correct\n    // the difference being that `initialErrors` will contain the error message while other errors (pre-validated schema) won't have them as initial errors\n    // #3342\n\n\n    const initialErrorMessage = unref(field.errorMessage);\n\n    if (initialErrorMessage && (initialErrors === null || initialErrors === void 0 ? void 0 : initialErrors[fieldPath]) !== initialErrorMessage) {\n      validateField(fieldPath);\n    } // marks the initial error as \"consumed\" so it won't be matched later with same non-initial error\n\n\n    delete initialErrors[fieldPath];\n  }\n\n  function unregisterField(field) {\n    const fieldName = unref(field.name);\n    const fieldInstance = fieldsByPath.value[fieldName];\n    const isGroup = !!fieldInstance && isFieldGroup(fieldInstance);\n    removeFieldFromPath(field, fieldName); // clears a field error on unmounted\n    // we wait till next tick to make sure if the field is completely removed and doesn't have any siblings like checkboxes\n\n    nextTick(() => {\n      var _a;\n\n      const shouldKeepValue = (_a = unref(field.keepValueOnUnmount)) !== null && _a !== void 0 ? _a : unref(keepValuesOnUnmount);\n      const currentGroupValue = getFromPath(formValues, fieldName); // The boolean here is we check if the field still belongs to the same control group with that name\n      // if another group claimed the name, we should avoid handling it since it is no longer the same group\n      // this happens with `v-for` over some checkboxes and field arrays.\n      // also if the group no longer exist we can assume this group was the last one that controlled it\n\n      const isSameGroup = isGroup && (fieldInstance === fieldsByPath.value[fieldName] || !fieldsByPath.value[fieldName]); // group field that still has a dangling value, the field may exist or not after it was removed.\n      // This used to be handled in the useField composable but the form has better context on when it should/not happen.\n      // if it does belong to it that means the group still exists\n      // #3844\n\n      if (isSameGroup && Array.isArray(currentGroupValue) && !shouldKeepValue) {\n        const valueIdx = currentGroupValue.findIndex(i => isEqual(i, unref(field.checkedValue)));\n\n        if (valueIdx > -1) {\n          const newVal = [...currentGroupValue];\n          newVal.splice(valueIdx, 1);\n          setFieldValue(fieldName, newVal, {\n            force: true\n          });\n        }\n      } // Field was removed entirely, we should unset its path\n      // #3384\n\n\n      if (!fieldExists(fieldName)) {\n        setFieldError(fieldName, undefined); // Checks if the field was configured to be unset during unmount or not\n        // Checks both the form-level config and field-level one\n        // Field has the priority if it is set, otherwise it goes to the form settings\n\n        if (shouldKeepValue) {\n          return;\n        }\n\n        if (isGroup && !isEmptyContainer(getFromPath(formValues, fieldName))) {\n          return;\n        }\n\n        unsetPath(formValues, fieldName);\n      }\n    });\n  }\n\n  async function validate(opts) {\n    mutateAllFields(f => f.meta.validated = true);\n\n    if (formCtx.validateSchema) {\n      return formCtx.validateSchema((opts === null || opts === void 0 ? void 0 : opts.mode) || 'force');\n    } // No schema, each field is responsible to validate itself\n\n\n    const validations = await Promise.all(Object.values(fieldsByPath.value).map(field => {\n      const fieldInstance = Array.isArray(field) ? field[0] : field;\n\n      if (!fieldInstance) {\n        return Promise.resolve({\n          key: '',\n          valid: true,\n          errors: []\n        });\n      }\n\n      return fieldInstance.validate(opts).then(result => {\n        return {\n          key: unref(fieldInstance.name),\n          valid: result.valid,\n          errors: result.errors\n        };\n      });\n    }));\n    const results = {};\n    const errors = {};\n\n    for (const validation of validations) {\n      results[validation.key] = {\n        valid: validation.valid,\n        errors: validation.errors\n      };\n\n      if (validation.errors.length) {\n        errors[validation.key] = validation.errors[0];\n      }\n    }\n\n    return {\n      valid: validations.every(r => r.valid),\n      results,\n      errors\n    };\n  }\n\n  async function validateField(field) {\n    const fieldInstance = fieldsByPath.value[field];\n\n    if (!fieldInstance) {\n      warn$1(`field with name ${field} was not found`);\n      return Promise.resolve({\n        errors: [],\n        valid: true\n      });\n    }\n\n    if (Array.isArray(fieldInstance)) {\n      return fieldInstance.map(f => f.validate())[0];\n    }\n\n    return fieldInstance.validate();\n  }\n\n  function handleSubmit(fn, onValidationError) {\n    return function submissionHandler(e) {\n      if (e instanceof Event) {\n        e.preventDefault();\n        e.stopPropagation();\n      } // Touch all fields\n\n\n      setTouched(keysOf(fieldsByPath.value).reduce((acc, field) => {\n        acc[field] = true;\n        return acc;\n      }, {}));\n      isSubmitting.value = true;\n      submitCount.value++;\n      return validate().then(result => {\n        if (result.valid && typeof fn === 'function') {\n          return fn(klona(formValues), {\n            evt: e,\n            setErrors,\n            setFieldError,\n            setTouched,\n            setFieldTouched,\n            setValues,\n            setFieldValue,\n            resetForm\n          });\n        }\n\n        if (!result.valid && typeof onValidationError === 'function') {\n          onValidationError({\n            values: klona(formValues),\n            evt: e,\n            errors: result.errors,\n            results: result.results\n          });\n        }\n      }).then(returnVal => {\n        isSubmitting.value = false;\n        return returnVal;\n      }, err => {\n        isSubmitting.value = false; // re-throw the err so it doesn't go silent\n\n        throw err;\n      });\n    };\n  }\n\n  function setFieldInitialValue(path, value) {\n    setInPath(initialValues.value, path, klona(value));\n  }\n\n  function unsetInitialValue(path) {\n    unsetPath(initialValues.value, path);\n  }\n  /**\r\n   * Sneaky function to set initial field values\r\n   */\n\n\n  function stageInitialValue(path, value, updateOriginal = false) {\n    setInPath(formValues, path, value);\n    setFieldInitialValue(path, value);\n\n    if (updateOriginal && !(opts === null || opts === void 0 ? void 0 : opts.initialValues)) {\n      setInPath(originalInitialValues.value, path, klona(value));\n    }\n  }\n\n  async function _validateSchema() {\n    const schemaValue = unref(schema);\n\n    if (!schemaValue) {\n      return {\n        valid: true,\n        results: {},\n        errors: {}\n      };\n    }\n\n    const formResult = isYupValidator(schemaValue) ? await validateYupSchema(schemaValue, formValues) : await validateObjectSchema(schemaValue, formValues, {\n      names: fieldNames.value,\n      bailsMap: fieldBailsMap.value\n    });\n    return formResult;\n  }\n\n  const submitForm = handleSubmit((_, {\n    evt\n  }) => {\n    if (isFormSubmitEvent(evt)) {\n      evt.target.submit();\n    }\n  }); // Trigger initial validation\n\n  onMounted(() => {\n    if (opts === null || opts === void 0 ? void 0 : opts.initialErrors) {\n      setErrors(opts.initialErrors);\n    }\n\n    if (opts === null || opts === void 0 ? void 0 : opts.initialTouched) {\n      setTouched(opts.initialTouched);\n    } // if validate on mount was enabled\n\n\n    if (opts === null || opts === void 0 ? void 0 : opts.validateOnMount) {\n      validate();\n      return;\n    } // otherwise run initial silent validation through schema if available\n    // the useField should skip their own silent validation if a yup schema is present\n\n\n    if (formCtx.validateSchema) {\n      formCtx.validateSchema('silent');\n    }\n  });\n\n  if (isRef(schema)) {\n    watch(schema, () => {\n      var _a;\n\n      (_a = formCtx.validateSchema) === null || _a === void 0 ? void 0 : _a.call(formCtx, 'validated-only');\n    });\n  } // Provide injections\n\n\n  provide(FormContextKey, formCtx);\n\n  if (process.env.NODE_ENV !== 'production') {\n    registerFormWithDevTools(formCtx);\n    watch(() => Object.assign(Object.assign({\n      errors: errorBag.value\n    }, meta.value), {\n      values: formValues,\n      isSubmitting: isSubmitting.value,\n      submitCount: submitCount.value\n    }), refreshInspector, {\n      deep: true\n    });\n  }\n\n  return {\n    errors,\n    meta,\n    values: formValues,\n    isSubmitting,\n    submitCount,\n    validate,\n    validateField,\n    handleReset: () => resetForm(),\n    resetForm,\n    handleSubmit,\n    submitForm,\n    setFieldError,\n    setErrors,\n    setFieldValue,\n    setValues,\n    setFieldTouched,\n    setTouched,\n    useFieldModel\n  };\n}\n/**\r\n * Manages form meta aggregation\r\n */\n\n\nfunction useFormMeta(fieldsByPath, currentValues, initialValues, errors) {\n  const MERGE_STRATEGIES = {\n    touched: 'some',\n    pending: 'some',\n    valid: 'every'\n  };\n  const isDirty = computed(() => {\n    return !isEqual(currentValues, unref(initialValues));\n  });\n\n  function calculateFlags() {\n    const fields = Object.values(fieldsByPath.value).flat(1).filter(Boolean);\n    return keysOf(MERGE_STRATEGIES).reduce((acc, flag) => {\n      const mergeMethod = MERGE_STRATEGIES[flag];\n      acc[flag] = fields[mergeMethod](field => field.meta[flag]);\n      return acc;\n    }, {});\n  }\n\n  const flags = reactive(calculateFlags());\n  watchEffect(() => {\n    const value = calculateFlags();\n    flags.touched = value.touched;\n    flags.valid = value.valid;\n    flags.pending = value.pending;\n  });\n  return computed(() => {\n    return Object.assign(Object.assign({\n      initialValues: unref(initialValues)\n    }, flags), {\n      valid: flags.valid && !keysOf(errors.value).length,\n      dirty: isDirty.value\n    });\n  });\n}\n/**\r\n * Manages the initial values prop\r\n */\n\n\nfunction useFormInitialValues(fields, formValues, providedValues) {\n  // these are the mutable initial values as the fields are mounted/unmounted\n  const initialValues = ref(klona(unref(providedValues)) || {}); // these are the original initial value as provided by the user initially, they don't keep track of conditional fields\n  // this is important because some conditional fields will overwrite the initial values for other fields who had the same name\n  // like array fields, any push/insert operation will overwrite the initial values because they \"create new fields\"\n  // so these are the values that the reset function should use\n  // these only change when the user explicitly chanegs the initial values or when the user resets them with new values.\n\n  const originalInitialValues = ref(klona(unref(providedValues)) || {});\n\n  function setInitialValues(values, updateFields = false) {\n    initialValues.value = klona(values);\n    originalInitialValues.value = klona(values);\n\n    if (!updateFields) {\n      return;\n    } // update the pristine non-touched fields\n    // those are excluded because it's unlikely you want to change the form values using initial values\n    // we mostly watch them for API population or newly inserted fields\n    // if the user API is taking too much time before user interaction they should consider disabling or hiding their inputs until the values are ready\n\n\n    keysOf(fields.value).forEach(fieldPath => {\n      const field = fields.value[fieldPath];\n      const wasTouched = Array.isArray(field) ? field.some(f => f.meta.touched) : field === null || field === void 0 ? void 0 : field.meta.touched;\n\n      if (!field || wasTouched) {\n        return;\n      }\n\n      const newValue = getFromPath(initialValues.value, fieldPath);\n      setInPath(formValues, fieldPath, klona(newValue));\n    });\n  }\n\n  if (isRef(providedValues)) {\n    watch(providedValues, value => {\n      setInitialValues(value, true);\n    }, {\n      deep: true\n    });\n  }\n\n  return {\n    initialValues,\n    originalInitialValues,\n    setInitialValues\n  };\n}\n\nfunction useErrorBag(initialErrors) {\n  const errorBag = ref({});\n\n  function normalizeErrorItem(message) {\n    return Array.isArray(message) ? message : message ? [message] : [];\n  }\n  /**\r\n   * Manually sets an error message on a specific field\r\n   */\n\n\n  function setFieldErrorBag(field, message) {\n    if (!message) {\n      delete errorBag.value[field];\n      return;\n    }\n\n    errorBag.value[field] = normalizeErrorItem(message);\n  }\n  /**\r\n   * Sets errors for the fields specified in the object\r\n   */\n\n\n  function setErrorBag(fields) {\n    errorBag.value = keysOf(fields).reduce((acc, key) => {\n      const message = fields[key];\n\n      if (message) {\n        acc[key] = normalizeErrorItem(message);\n      }\n\n      return acc;\n    }, {});\n  }\n\n  if (initialErrors) {\n    setErrorBag(initialErrors);\n  }\n\n  return {\n    errorBag,\n    setErrorBag,\n    setFieldErrorBag\n  };\n}\n\nconst FormImpl = defineComponent({\n  name: 'Form',\n  inheritAttrs: false,\n  props: {\n    as: {\n      type: String,\n      default: 'form'\n    },\n    validationSchema: {\n      type: Object,\n      default: undefined\n    },\n    initialValues: {\n      type: Object,\n      default: undefined\n    },\n    initialErrors: {\n      type: Object,\n      default: undefined\n    },\n    initialTouched: {\n      type: Object,\n      default: undefined\n    },\n    validateOnMount: {\n      type: Boolean,\n      default: false\n    },\n    onSubmit: {\n      type: Function,\n      default: undefined\n    },\n    onInvalidSubmit: {\n      type: Function,\n      default: undefined\n    },\n    keepValues: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  setup(props, ctx) {\n    const initialValues = toRef(props, 'initialValues');\n    const validationSchema = toRef(props, 'validationSchema');\n    const keepValues = toRef(props, 'keepValues');\n    const {\n      errors,\n      values,\n      meta,\n      isSubmitting,\n      submitCount,\n      validate,\n      validateField,\n      handleReset,\n      resetForm,\n      handleSubmit,\n      setErrors,\n      setFieldError,\n      setFieldValue,\n      setValues,\n      setFieldTouched,\n      setTouched\n    } = useForm({\n      validationSchema: validationSchema.value ? validationSchema : undefined,\n      initialValues,\n      initialErrors: props.initialErrors,\n      initialTouched: props.initialTouched,\n      validateOnMount: props.validateOnMount,\n      keepValuesOnUnmount: keepValues\n    });\n    const submitForm = handleSubmit((_, {\n      evt\n    }) => {\n      if (isFormSubmitEvent(evt)) {\n        evt.target.submit();\n      }\n    }, props.onInvalidSubmit);\n    const onSubmit = props.onSubmit ? handleSubmit(props.onSubmit, props.onInvalidSubmit) : submitForm;\n\n    function handleFormReset(e) {\n      if (isEvent(e)) {\n        // Prevent default form reset behavior\n        e.preventDefault();\n      }\n\n      handleReset();\n\n      if (typeof ctx.attrs.onReset === 'function') {\n        ctx.attrs.onReset();\n      }\n    }\n\n    function handleScopedSlotSubmit(evt, onSubmit) {\n      const onSuccess = typeof evt === 'function' && !onSubmit ? evt : onSubmit;\n      return handleSubmit(onSuccess, props.onInvalidSubmit)(evt);\n    }\n\n    function slotProps() {\n      return {\n        meta: meta.value,\n        errors: errors.value,\n        values: values,\n        isSubmitting: isSubmitting.value,\n        submitCount: submitCount.value,\n        validate,\n        validateField,\n        handleSubmit: handleScopedSlotSubmit,\n        handleReset,\n        submitForm,\n        setErrors,\n        setFieldError,\n        setFieldValue,\n        setValues,\n        setFieldTouched,\n        setTouched,\n        resetForm\n      };\n    } // expose these functions and methods as part of public API\n\n\n    ctx.expose({\n      setFieldError,\n      setErrors,\n      setFieldValue,\n      setValues,\n      setFieldTouched,\n      setTouched,\n      resetForm,\n      validate,\n      validateField\n    });\n    return function renderForm() {\n      // avoid resolving the form component as itself\n      const tag = props.as === 'form' ? props.as : resolveDynamicComponent(props.as);\n      const children = normalizeChildren(tag, ctx, slotProps);\n\n      if (!props.as) {\n        return children;\n      } // Attributes to add on a native `form` tag\n\n\n      const formAttrs = props.as === 'form' ? {\n        // Disables native validation as vee-validate will handle it.\n        novalidate: true\n      } : {};\n      return h(tag, Object.assign(Object.assign(Object.assign({}, formAttrs), ctx.attrs), {\n        onSubmit,\n        onReset: handleFormReset\n      }), children);\n    };\n  }\n\n});\nconst Form = FormImpl;\n\nfunction useFieldArray(arrayPath) {\n  const form = injectWithSelf(FormContextKey, undefined);\n  const fields = ref([]); // eslint-disable-next-line @typescript-eslint/no-empty-function\n\n  const noOp = () => {};\n\n  const noOpApi = {\n    fields,\n    remove: noOp,\n    push: noOp,\n    swap: noOp,\n    insert: noOp,\n    update: noOp,\n    replace: noOp,\n    prepend: noOp,\n    move: noOp\n  };\n\n  if (!form) {\n    warn('FieldArray requires being a child of `<Form/>` or `useForm` being called before it. Array fields may not work correctly');\n    return noOpApi;\n  }\n\n  if (!unref(arrayPath)) {\n    warn('FieldArray requires a field path to be provided, did you forget to pass the `name` prop?');\n    return noOpApi;\n  }\n\n  const alreadyExists = form.fieldArrays.find(a => unref(a.path) === unref(arrayPath));\n\n  if (alreadyExists) {\n    return alreadyExists;\n  }\n\n  let entryCounter = 0;\n\n  function initFields() {\n    const currentValues = getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(arrayPath), []) || [];\n    fields.value = currentValues.map(createEntry);\n    updateEntryFlags();\n  }\n\n  initFields();\n\n  function updateEntryFlags() {\n    const fieldsLength = fields.value.length;\n\n    for (let i = 0; i < fieldsLength; i++) {\n      const entry = fields.value[i];\n      entry.isFirst = i === 0;\n      entry.isLast = i === fieldsLength - 1;\n    }\n  }\n\n  function createEntry(value) {\n    const key = entryCounter++;\n    const entry = {\n      key,\n      value: computed({\n        get() {\n          const currentValues = getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(arrayPath), []) || [];\n          const idx = fields.value.findIndex(e => e.key === key);\n          return idx === -1 ? value : currentValues[idx];\n        },\n\n        set(value) {\n          const idx = fields.value.findIndex(e => e.key === key);\n\n          if (idx === -1) {\n            warn(`Attempting to update a non-existent array item`);\n            return;\n          }\n\n          update(idx, value);\n        }\n\n      }),\n      isFirst: false,\n      isLast: false\n    };\n    return entry;\n  }\n\n  function remove(idx) {\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n\n    if (!pathValue || !Array.isArray(pathValue)) {\n      return;\n    }\n\n    const newValue = [...pathValue];\n    newValue.splice(idx, 1);\n    form === null || form === void 0 ? void 0 : form.unsetInitialValue(pathName + `[${idx}]`);\n    form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\n    fields.value.splice(idx, 1);\n    updateEntryFlags();\n  }\n\n  function push(value) {\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n    const normalizedPathValue = isNullOrUndefined(pathValue) ? [] : pathValue;\n\n    if (!Array.isArray(normalizedPathValue)) {\n      return;\n    }\n\n    const newValue = [...normalizedPathValue];\n    newValue.push(value);\n    form === null || form === void 0 ? void 0 : form.stageInitialValue(pathName + `[${newValue.length - 1}]`, value);\n    form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\n    fields.value.push(createEntry(value));\n    updateEntryFlags();\n  }\n\n  function swap(indexA, indexB) {\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n\n    if (!Array.isArray(pathValue) || !(indexA in pathValue) || !(indexB in pathValue)) {\n      return;\n    }\n\n    const newValue = [...pathValue];\n    const newFields = [...fields.value]; // the old switcheroo\n\n    const temp = newValue[indexA];\n    newValue[indexA] = newValue[indexB];\n    newValue[indexB] = temp;\n    const tempEntry = newFields[indexA];\n    newFields[indexA] = newFields[indexB];\n    newFields[indexB] = tempEntry;\n    form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\n    fields.value = newFields;\n    updateEntryFlags();\n  }\n\n  function insert(idx, value) {\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n\n    if (!Array.isArray(pathValue) || pathValue.length < idx) {\n      return;\n    }\n\n    const newValue = [...pathValue];\n    const newFields = [...fields.value];\n    newValue.splice(idx, 0, value);\n    newFields.splice(idx, 0, createEntry(value));\n    form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\n    fields.value = newFields;\n    updateEntryFlags();\n  }\n\n  function replace(arr) {\n    const pathName = unref(arrayPath);\n    form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, arr);\n    initFields();\n  }\n\n  function update(idx, value) {\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n\n    if (!Array.isArray(pathValue) || pathValue.length - 1 < idx) {\n      return;\n    }\n\n    form === null || form === void 0 ? void 0 : form.setFieldValue(`${pathName}[${idx}]`, value);\n  }\n\n  function prepend(value) {\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n    const normalizedPathValue = isNullOrUndefined(pathValue) ? [] : pathValue;\n\n    if (!Array.isArray(normalizedPathValue)) {\n      return;\n    }\n\n    const newValue = [value, ...normalizedPathValue];\n    form === null || form === void 0 ? void 0 : form.stageInitialValue(pathName + `[${newValue.length - 1}]`, value);\n    form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\n    fields.value.unshift(createEntry(value));\n    updateEntryFlags();\n  }\n\n  function move(oldIdx, newIdx) {\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n    const newValue = isNullOrUndefined(pathValue) ? [] : [...pathValue];\n\n    if (!Array.isArray(pathValue) || !(oldIdx in pathValue) || !(newIdx in pathValue)) {\n      return;\n    }\n\n    const newFields = [...fields.value];\n    const movedItem = newFields[oldIdx];\n    newFields.splice(oldIdx, 1);\n    newFields.splice(newIdx, 0, movedItem);\n    const movedValue = newValue[oldIdx];\n    newValue.splice(oldIdx, 1);\n    newValue.splice(newIdx, 0, movedValue);\n    form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\n    fields.value = newFields;\n    updateEntryFlags();\n  }\n\n  const fieldArrayCtx = {\n    fields,\n    remove,\n    push,\n    swap,\n    insert,\n    update,\n    replace,\n    prepend,\n    move\n  };\n  form.fieldArrays.push(Object.assign({\n    path: arrayPath,\n    reset: initFields\n  }, fieldArrayCtx));\n  onBeforeUnmount(() => {\n    const idx = form.fieldArrays.findIndex(i => unref(i.path) === unref(arrayPath));\n\n    if (idx >= 0) {\n      form.fieldArrays.splice(idx, 1);\n    }\n  });\n  return fieldArrayCtx;\n}\n\nconst FieldArrayImpl = defineComponent({\n  name: 'FieldArray',\n  inheritAttrs: false,\n  props: {\n    name: {\n      type: String,\n      required: true\n    }\n  },\n\n  setup(props, ctx) {\n    const {\n      push,\n      remove,\n      swap,\n      insert,\n      replace,\n      update,\n      prepend,\n      move,\n      fields\n    } = useFieldArray(toRef(props, 'name'));\n\n    function slotProps() {\n      return {\n        fields: fields.value,\n        push,\n        remove,\n        swap,\n        insert,\n        update,\n        replace,\n        prepend,\n        move\n      };\n    }\n\n    ctx.expose({\n      push,\n      remove,\n      swap,\n      insert,\n      update,\n      replace,\n      prepend,\n      move\n    });\n    return () => {\n      const children = normalizeChildren(undefined, ctx, slotProps);\n      return children;\n    };\n  }\n\n});\nconst FieldArray = FieldArrayImpl;\nconst ErrorMessageImpl = defineComponent({\n  name: 'ErrorMessage',\n  props: {\n    as: {\n      type: String,\n      default: undefined\n    },\n    name: {\n      type: String,\n      required: true\n    }\n  },\n\n  setup(props, ctx) {\n    const form = inject(FormContextKey, undefined);\n    const message = computed(() => {\n      return form === null || form === void 0 ? void 0 : form.errors.value[props.name];\n    });\n\n    function slotProps() {\n      return {\n        message: message.value\n      };\n    }\n\n    return () => {\n      // Renders nothing if there are no messages\n      if (!message.value) {\n        return undefined;\n      }\n\n      const tag = props.as ? resolveDynamicComponent(props.as) : props.as;\n      const children = normalizeChildren(tag, ctx, slotProps);\n      const attrs = Object.assign({\n        role: 'alert'\n      }, ctx.attrs); // If no tag was specified and there are children\n      // render the slot as is without wrapping it\n\n      if (!tag && (Array.isArray(children) || !children) && (children === null || children === void 0 ? void 0 : children.length)) {\n        return children;\n      } // If no children in slot\n      // render whatever specified and fallback to a <span> with the message in it's contents\n\n\n      if ((Array.isArray(children) || !children) && !(children === null || children === void 0 ? void 0 : children.length)) {\n        return h(tag || 'span', attrs, message.value);\n      }\n\n      return h(tag, attrs, children);\n    };\n  }\n\n});\nconst ErrorMessage = ErrorMessageImpl;\n\nfunction useResetForm() {\n  const form = injectWithSelf(FormContextKey);\n\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n\n  return function resetForm(state) {\n    if (!form) {\n      return;\n    }\n\n    return form.resetForm(state);\n  };\n}\n/**\r\n * If a field is dirty or not\r\n */\n\n\nfunction useIsFieldDirty(path) {\n  const form = injectWithSelf(FormContextKey);\n  let field = path ? undefined : inject(FieldContextKey);\n  return computed(() => {\n    if (path) {\n      field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\n    }\n\n    if (!field) {\n      warn(`field with name ${unref(path)} was not found`);\n      return false;\n    }\n\n    return field.meta.dirty;\n  });\n}\n/**\r\n * If a field is touched or not\r\n */\n\n\nfunction useIsFieldTouched(path) {\n  const form = injectWithSelf(FormContextKey);\n  let field = path ? undefined : inject(FieldContextKey);\n  return computed(() => {\n    if (path) {\n      field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\n    }\n\n    if (!field) {\n      warn(`field with name ${unref(path)} was not found`);\n      return false;\n    }\n\n    return field.meta.touched;\n  });\n}\n/**\r\n * If a field is validated and is valid\r\n */\n\n\nfunction useIsFieldValid(path) {\n  const form = injectWithSelf(FormContextKey);\n  let field = path ? undefined : inject(FieldContextKey);\n  return computed(() => {\n    if (path) {\n      field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\n    }\n\n    if (!field) {\n      warn(`field with name ${unref(path)} was not found`);\n      return false;\n    }\n\n    return field.meta.valid;\n  });\n}\n/**\r\n * If the form is submitting or not\r\n */\n\n\nfunction useIsSubmitting() {\n  const form = injectWithSelf(FormContextKey);\n\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n\n  return computed(() => {\n    var _a;\n\n    return (_a = form === null || form === void 0 ? void 0 : form.isSubmitting.value) !== null && _a !== void 0 ? _a : false;\n  });\n}\n/**\r\n * Validates a single field\r\n */\n\n\nfunction useValidateField(path) {\n  const form = injectWithSelf(FormContextKey);\n  let field = path ? undefined : inject(FieldContextKey);\n  return function validateField() {\n    if (path) {\n      field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\n    }\n\n    if (!field) {\n      warn(`field with name ${unref(path)} was not found`);\n      return Promise.resolve({\n        errors: [],\n        valid: true\n      });\n    }\n\n    return field.validate();\n  };\n}\n/**\r\n * If the form is dirty or not\r\n */\n\n\nfunction useIsFormDirty() {\n  const form = injectWithSelf(FormContextKey);\n\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n\n  return computed(() => {\n    var _a;\n\n    return (_a = form === null || form === void 0 ? void 0 : form.meta.value.dirty) !== null && _a !== void 0 ? _a : false;\n  });\n}\n/**\r\n * If the form is touched or not\r\n */\n\n\nfunction useIsFormTouched() {\n  const form = injectWithSelf(FormContextKey);\n\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n\n  return computed(() => {\n    var _a;\n\n    return (_a = form === null || form === void 0 ? void 0 : form.meta.value.touched) !== null && _a !== void 0 ? _a : false;\n  });\n}\n/**\r\n * If the form has been validated and is valid\r\n */\n\n\nfunction useIsFormValid() {\n  const form = injectWithSelf(FormContextKey);\n\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n\n  return computed(() => {\n    var _a;\n\n    return (_a = form === null || form === void 0 ? void 0 : form.meta.value.valid) !== null && _a !== void 0 ? _a : false;\n  });\n}\n/**\r\n * Validate multiple fields\r\n */\n\n\nfunction useValidateForm() {\n  const form = injectWithSelf(FormContextKey);\n\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n\n  return function validateField() {\n    if (!form) {\n      return Promise.resolve({\n        results: {},\n        errors: {},\n        valid: true\n      });\n    }\n\n    return form.validate();\n  };\n}\n/**\r\n * The number of form's submission count\r\n */\n\n\nfunction useSubmitCount() {\n  const form = injectWithSelf(FormContextKey);\n\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n\n  return computed(() => {\n    var _a;\n\n    return (_a = form === null || form === void 0 ? void 0 : form.submitCount.value) !== null && _a !== void 0 ? _a : 0;\n  });\n}\n/**\r\n * Gives access to a field's current value\r\n */\n\n\nfunction useFieldValue(path) {\n  const form = injectWithSelf(FormContextKey); // We don't want to use self injected context as it doesn't make sense\n\n  const field = path ? undefined : inject(FieldContextKey);\n  return computed(() => {\n    if (path) {\n      return getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(path));\n    }\n\n    return unref(field === null || field === void 0 ? void 0 : field.value);\n  });\n}\n/**\r\n * Gives access to a form's values\r\n */\n\n\nfunction useFormValues() {\n  const form = injectWithSelf(FormContextKey);\n\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n\n  return computed(() => {\n    return (form === null || form === void 0 ? void 0 : form.values) || {};\n  });\n}\n/**\r\n * Gives access to all form errors\r\n */\n\n\nfunction useFormErrors() {\n  const form = injectWithSelf(FormContextKey);\n\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n\n  return computed(() => {\n    return (form === null || form === void 0 ? void 0 : form.errors.value) || {};\n  });\n}\n/**\r\n * Gives access to a single field error\r\n */\n\n\nfunction useFieldError(path) {\n  const form = injectWithSelf(FormContextKey); // We don't want to use self injected context as it doesn't make sense\n\n  const field = path ? undefined : inject(FieldContextKey);\n  return computed(() => {\n    if (path) {\n      return form === null || form === void 0 ? void 0 : form.errors.value[unref(path)];\n    }\n\n    return field === null || field === void 0 ? void 0 : field.errorMessage.value;\n  });\n}\n\nfunction useSubmitForm(cb) {\n  const form = injectWithSelf(FormContextKey);\n\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n\n  const onSubmit = form ? form.handleSubmit(cb) : undefined;\n  return function submitForm(e) {\n    if (!onSubmit) {\n      return;\n    }\n\n    return onSubmit(e);\n  };\n}\n\nexport { ErrorMessage, Field, FieldArray, FieldContextKey, Form, FormContextKey, IS_ABSENT, configure, defineRule, useField, useFieldArray, useFieldError, useFieldValue, useForm, useFormErrors, useFormValues, useIsFieldDirty, useIsFieldTouched, useIsFieldValid, useIsFormDirty, useIsFormTouched, useIsFormValid, useIsSubmitting, useResetForm, useSubmitCount, useSubmitForm, useValidateField, useValidateForm, validate };","map":{"version":3,"names":["inject","getCurrentInstance","warn","warn$1","ref","unref","computed","reactive","watch","onUnmounted","nextTick","onMounted","provide","isRef","onBeforeUnmount","defineComponent","toRef","resolveDynamicComponent","h","watchEffect","markRaw","setupDevtoolsPlugin","isCallable","fn","isNullOrUndefined","value","undefined","isObject","obj","Array","isArray","isIndex","Number","toNumber","n","parseFloat","isNaN","RULES","defineRule","id","validator","guardExtend","resolveRule","Error","FormContextKey","Symbol","FieldContextKey","IS_ABSENT","isClient","window","isLocator","__locatorRef","isYupValidator","validate","hasCheckedAttr","type","isContainerValue","isEmptyContainer","length","Object","keys","isNotNestedPath","path","test","isNativeMultiSelect","el","isNativeSelect","multiple","tagName","isNativeMultiSelectNode","tag","attrs","hasTruthyBindingValue","includes","shouldHaveValueBinding","isFormSubmitEvent","evt","isEvent","target","Event","srcElement","isPropPresent","prop","isEqual","a","b","constructor","i","Map","size","entries","has","get","isFile","name","lastModified","Set","ArrayBuffer","isView","RegExp","source","flags","valueOf","prototype","toString","hasOwnProperty","call","key","File","fastDeepEqual","equal","cleanupNonNestedPath","replace","getFromPath","object","fallback","resolvedValue","split","filter","Boolean","reduce","acc","propKey","setInPath","unset","splice","unsetPath","pathValues","map","_","idx","slice","join","keysOf","record","injectWithSelf","symbol","def","vm","provides","message","normalizeField","field","resolveNextCheckboxValue","currentValue","checkedValue","uncheckedValue","newVal","findIndex","v","push","throttle","func","limit","inThrottle","lastResult","args","context","setTimeout","apply","debounceAsync","inner","ms","timer","resolves","clearTimeout","result","forEach","r","Promise","resolve","applyModelModifiers","modifiers","number","withLatest","onDone","latestRun","runLatest","pending","normalizeChildren","slotProps","slots","default","_a","_b","getBoundValue","hasValueBinding","_value","normalizeEventValue","input","files","from","options","opt","selected","disabled","selectedOption","find","normalizeRules","rules","defineProperty","writable","enumerable","configurable","_$$isNormalized","prev","curr","params","normalizeParams","buildParams","rule","parsedRule","parseRule","provided","mapValueToLocator","createLocator","locator","crossTable","val","extractLocators","DEFAULT_CONFIG","generateMessage","bails","validateOnBlur","validateOnChange","validateOnInput","validateOnModelUpdate","currentConfig","assign","getConfig","setConfig","newConf","configure","shouldBail","formData","values","_validate","errors","valid","validateFieldWithYup","ctx","form","pipeline","isValid","_generateFieldError","normalizedContext","rulesKeys","_test","error","opts","abortEarly","then","catch","err","fillTargetValues","fieldCtx","normalize","param","validateYupSchema","schema","errorObjects","results","messages","validateObjectSchema","paths","validations","_c","fieldResult","names","bailsMap","isAllValid","validationResults","all","set","klona","x","k","list","tmp","str","create","__proto__","add","Date","buffer","getOwnPropertySymbols","getOwnPropertyDescriptor","getOwnPropertyNames","ID_COUNTER","useFieldState","init","initialValue","setInitialValue","_useFieldValue","modelValue","standalone","errorMessage","setErrors","_useFieldErrors","meta","_useFieldMeta","MAX_SAFE_INTEGER","setState","state","touched","shouldInjectForm","modelRef","resolveInitialValue","initialValues","stageInitialValue","setFieldValue","validated","dirty","immediate","flush","normalizeErrors","errorBag","setFieldErrorBag","installDevtoolsPlugin","app","process","env","NODE_ENV","label","packageName","homepage","logo","setupApiHooks","DEVTOOLS_FORMS","DEVTOOLS_FIELDS","API","refreshInspector","sendInspectorState","INSPECTOR_ID","sendInspectorTree","registerFormWithDevTools","appContext","formId","_vm","registerSingleFieldWithDevtools","COLORS","success","unknown","white","black","blue","purple","orange","gray","SELECTED_NODE","api","addInspector","icon","noSelectionText","actions","tooltip","action","console","log","resetField","resetForm","on","getInspectorTree","payload","inspectorId","forms","fields","rootNodes","mapFormForDevtoolsInspector","mapFieldForDevtoolsInspector","getInspectorState","currentTab","decodeNodeId","nodeId","buildFormState","buildFieldState","textColor","bgColor","getTagTheme","formTreeNodes","fieldsByPath","fieldInstance","buildFormTree","tree","pop","children","c","String","encodeNodeId","tags","backgroundColor","isGroup","fieldItem","encodeIndex","fieldPath","fieldGroup","indexOf","idObject","f","ff","btoa","JSON","stringify","parse","atob","isSubmitting","submitCount","fieldOrForm","useField","useCheckboxField","_useField","validateOnMount","validateOnValueUpdate","keepValueOnUnmount","modelPropName","syncVModel","normalizeOptions","markedForRemoval","useVModel","handleChange","handleBlur","normalizedRules","rulesValue","extractRuleFromSchema","validateCurrentValue","mode","validateSchema","validateWithStateMutation","validateValidStateOnly","validate$1","e","shouldValidate","newValue","setTouched","isTouched","unwatchValue","lastWatchedValue","watchValue","oldVal","validateFn","deep","setValue","handleReset","oldValue","register","unregister","dependencies","rulesVal","deps","dep","depAcc","depName","depValue","oldDeps","defaults","valueProp","fieldName","patchCheckboxApi","checked","checkedVal","handleCheckboxChange","propName","emitName","props","getCurrentModelValue","emit","propValue","modelModifiers","FieldImpl","inheritAttrs","as","required","Function","keepValue","setup","validateField","onChangeHandler","handleChangeWithModel","handleInput","onInputHandler","handleInputWithModel","fieldProps","resolveValidationTriggers","baseOnBlur","onBlur","baseOnInput","onInput","baseOnChange","onChange","resolveTag","expose","reset","_d","Field","FORM_COUNTER","useForm","RESET_LOCK","fieldArrays","formValues","setErrorBag","useErrorBag","initialErrors","bag","getFirstFieldAtPath","fieldOrGroup","fieldExists","fieldNames","fieldBailsMap","keepValuesOnUnmount","originalInitialValues","setInitialValues","useFormInitialValues","useFormMeta","validationSchema","debouncedSilentValidation","_validateSchema","debouncedValidation","formResult","fieldsById","formCtx","currentErrorsPaths","validation","setFieldError","applyFieldMutation","wasValidated","some","registerField","unregisterField","setValues","setFieldTouched","handleSubmit","unsetInitialValue","setFieldInitialValue","useFieldModel","isFieldGroup","mutation","mutateAllFields","force","clonedValue","createModel","insertFieldAtPath","rawField","fieldAtPath","removeFieldFromPath","newPath","oldPath","initialErrorMessage","shouldKeepValue","currentGroupValue","isSameGroup","valueIdx","every","onValidationError","submissionHandler","preventDefault","stopPropagation","returnVal","updateOriginal","schemaValue","submitForm","submit","initialTouched","currentValues","MERGE_STRATEGIES","isDirty","calculateFlags","flat","flag","mergeMethod","providedValues","updateFields","wasTouched","normalizeErrorItem","FormImpl","onSubmit","onInvalidSubmit","keepValues","handleFormReset","onReset","handleScopedSlotSubmit","onSuccess","renderForm","formAttrs","novalidate","Form","useFieldArray","arrayPath","noOp","noOpApi","remove","swap","insert","update","prepend","move","alreadyExists","entryCounter","initFields","createEntry","updateEntryFlags","fieldsLength","entry","isFirst","isLast","pathName","pathValue","normalizedPathValue","indexA","indexB","newFields","temp","tempEntry","arr","unshift","oldIdx","newIdx","movedItem","movedValue","fieldArrayCtx","FieldArrayImpl","FieldArray","ErrorMessageImpl","role","ErrorMessage","useResetForm","useIsFieldDirty","useIsFieldTouched","useIsFieldValid","useIsSubmitting","useValidateField","useIsFormDirty","useIsFormTouched","useIsFormValid","useValidateForm","useSubmitCount","useFieldValue","useFormValues","useFormErrors","useFieldError","useSubmitForm","cb"],"sources":["C:/Users/notar/Desktop/Udemy/todo_front/node_modules/vee-validate/dist/vee-validate.esm.js"],"sourcesContent":["/**\n  * vee-validate v4.6.10\n  * (c) 2022 Abdelrahman Awad\n  * @license MIT\n  */\nimport { inject, getCurrentInstance, warn as warn$1, ref, unref, computed, reactive, watch, onUnmounted, nextTick, onMounted, provide, isRef, onBeforeUnmount, defineComponent, toRef, resolveDynamicComponent, h, watchEffect, markRaw } from 'vue';\nimport { setupDevtoolsPlugin } from '@vue/devtools-api';\n\nfunction isCallable(fn) {\r\n    return typeof fn === 'function';\r\n}\r\nfunction isNullOrUndefined(value) {\r\n    return value === null || value === undefined;\r\n}\r\nconst isObject = (obj) => obj !== null && !!obj && typeof obj === 'object' && !Array.isArray(obj);\r\nfunction isIndex(value) {\r\n    return Number(value) >= 0;\r\n}\r\nfunction toNumber(value) {\r\n    const n = parseFloat(value);\r\n    return isNaN(n) ? value : n;\r\n}\n\nconst RULES = {};\r\n/**\r\n * Adds a custom validator to the list of validation rules.\r\n */\r\nfunction defineRule(id, validator) {\r\n    // makes sure new rules are properly formatted.\r\n    guardExtend(id, validator);\r\n    RULES[id] = validator;\r\n}\r\n/**\r\n * Gets an already defined rule\r\n */\r\nfunction resolveRule(id) {\r\n    return RULES[id];\r\n}\r\n/**\r\n * Guards from extension violations.\r\n */\r\nfunction guardExtend(id, validator) {\r\n    if (isCallable(validator)) {\r\n        return;\r\n    }\r\n    throw new Error(`Extension Error: The validator '${id}' must be a function.`);\r\n}\n\nconst FormContextKey = Symbol('vee-validate-form');\r\nconst FieldContextKey = Symbol('vee-validate-field-instance');\r\nconst IS_ABSENT = Symbol('Default empty value');\n\nconst isClient = typeof window !== 'undefined';\r\nfunction isLocator(value) {\r\n    return isCallable(value) && !!value.__locatorRef;\r\n}\r\nfunction isYupValidator(value) {\r\n    return !!value && isCallable(value.validate);\r\n}\r\nfunction hasCheckedAttr(type) {\r\n    return type === 'checkbox' || type === 'radio';\r\n}\r\nfunction isContainerValue(value) {\r\n    return isObject(value) || Array.isArray(value);\r\n}\r\n/**\r\n * True if the value is an empty object or array\r\n */\r\nfunction isEmptyContainer(value) {\r\n    if (Array.isArray(value)) {\r\n        return value.length === 0;\r\n    }\r\n    return isObject(value) && Object.keys(value).length === 0;\r\n}\r\n/**\r\n * Checks if the path opted out of nested fields using `[fieldName]` syntax\r\n */\r\nfunction isNotNestedPath(path) {\r\n    return /^\\[.+\\]$/i.test(path);\r\n}\r\n/**\r\n * Checks if an element is a native HTML5 multi-select input element\r\n */\r\nfunction isNativeMultiSelect(el) {\r\n    return isNativeSelect(el) && el.multiple;\r\n}\r\n/**\r\n * Checks if an element is a native HTML5 select input element\r\n */\r\nfunction isNativeSelect(el) {\r\n    return el.tagName === 'SELECT';\r\n}\r\n/**\r\n * Checks if a tag name with attrs object will render a native multi-select element\r\n */\r\nfunction isNativeMultiSelectNode(tag, attrs) {\r\n    // The falsy value array is the values that Vue won't add the `multiple` prop if it has one of these values\r\n    const hasTruthyBindingValue = ![false, null, undefined, 0].includes(attrs.multiple) && !Number.isNaN(attrs.multiple);\r\n    return tag === 'select' && 'multiple' in attrs && hasTruthyBindingValue;\r\n}\r\n/**\r\n * Checks if a node should have a `:value` binding or not\r\n *\r\n * These nodes should not have a value binding\r\n * For files, because they are not reactive\r\n * For multi-selects because the value binding will reset the value\r\n */\r\nfunction shouldHaveValueBinding(tag, attrs) {\r\n    return !isNativeMultiSelectNode(tag, attrs) && attrs.type !== 'file' && !hasCheckedAttr(attrs.type);\r\n}\r\nfunction isFormSubmitEvent(evt) {\r\n    return isEvent(evt) && evt.target && 'submit' in evt.target;\r\n}\r\nfunction isEvent(evt) {\r\n    if (!evt) {\r\n        return false;\r\n    }\r\n    if (typeof Event !== 'undefined' && isCallable(Event) && evt instanceof Event) {\r\n        return true;\r\n    }\r\n    // this is for IE and Cypress #3161\r\n    /* istanbul ignore next */\r\n    if (evt && evt.srcElement) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nfunction isPropPresent(obj, prop) {\r\n    return prop in obj && obj[prop] !== IS_ABSENT;\r\n}\r\n/**\r\n * Compares if two values are the same borrowed from:\r\n * https://github.com/epoberezkin/fast-deep-equal\r\n * We added a case for file matching since `Object.keys` doesn't work with Files.\r\n * */\r\nfunction isEqual(a, b) {\r\n    if (a === b)\r\n        return true;\r\n    if (a && b && typeof a === 'object' && typeof b === 'object') {\r\n        if (a.constructor !== b.constructor)\r\n            return false;\r\n        // eslint-disable-next-line no-var\r\n        var length, i, keys;\r\n        if (Array.isArray(a)) {\r\n            length = a.length;\r\n            // eslint-disable-next-line eqeqeq\r\n            if (length != b.length)\r\n                return false;\r\n            for (i = length; i-- !== 0;)\r\n                if (!isEqual(a[i], b[i]))\r\n                    return false;\r\n            return true;\r\n        }\r\n        if (a instanceof Map && b instanceof Map) {\r\n            if (a.size !== b.size)\r\n                return false;\r\n            for (i of a.entries())\r\n                if (!b.has(i[0]))\r\n                    return false;\r\n            for (i of a.entries())\r\n                if (!isEqual(i[1], b.get(i[0])))\r\n                    return false;\r\n            return true;\r\n        }\r\n        // We added this part for file comparison, arguably a little naive but should work for most cases.\r\n        // #3911\r\n        if (isFile(a) && isFile(b)) {\r\n            if (a.size !== b.size)\r\n                return false;\r\n            if (a.name !== b.name)\r\n                return false;\r\n            if (a.lastModified !== b.lastModified)\r\n                return false;\r\n            if (a.type !== b.type)\r\n                return false;\r\n            return true;\r\n        }\r\n        if (a instanceof Set && b instanceof Set) {\r\n            if (a.size !== b.size)\r\n                return false;\r\n            for (i of a.entries())\r\n                if (!b.has(i[0]))\r\n                    return false;\r\n            return true;\r\n        }\r\n        if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {\r\n            length = a.length;\r\n            // eslint-disable-next-line eqeqeq\r\n            if (length != b.length)\r\n                return false;\r\n            for (i = length; i-- !== 0;)\r\n                if (a[i] !== b[i])\r\n                    return false;\r\n            return true;\r\n        }\r\n        if (a.constructor === RegExp)\r\n            return a.source === b.source && a.flags === b.flags;\r\n        if (a.valueOf !== Object.prototype.valueOf)\r\n            return a.valueOf() === b.valueOf();\r\n        if (a.toString !== Object.prototype.toString)\r\n            return a.toString() === b.toString();\r\n        keys = Object.keys(a);\r\n        length = keys.length;\r\n        if (length !== Object.keys(b).length)\r\n            return false;\r\n        for (i = length; i-- !== 0;)\r\n            if (!Object.prototype.hasOwnProperty.call(b, keys[i]))\r\n                return false;\r\n        for (i = length; i-- !== 0;) {\r\n            // eslint-disable-next-line no-var\r\n            var key = keys[i];\r\n            if (!isEqual(a[key], b[key]))\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n    // true if both NaN, false otherwise\r\n    // eslint-disable-next-line no-self-compare\r\n    return a !== a && b !== b;\r\n}\r\nfunction isFile(a) {\r\n    if (!isClient) {\r\n        return false;\r\n    }\r\n    return a instanceof File;\r\n}\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nvar fastDeepEqual = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n\nfunction cleanupNonNestedPath(path) {\r\n    if (isNotNestedPath(path)) {\r\n        return path.replace(/\\[|\\]/gi, '');\r\n    }\r\n    return path;\r\n}\r\nfunction getFromPath(object, path, fallback) {\r\n    if (!object) {\r\n        return fallback;\r\n    }\r\n    if (isNotNestedPath(path)) {\r\n        return object[cleanupNonNestedPath(path)];\r\n    }\r\n    const resolvedValue = (path || '')\r\n        .split(/\\.|\\[(\\d+)\\]/)\r\n        .filter(Boolean)\r\n        .reduce((acc, propKey) => {\r\n        if (isContainerValue(acc) && propKey in acc) {\r\n            return acc[propKey];\r\n        }\r\n        return fallback;\r\n    }, object);\r\n    return resolvedValue;\r\n}\r\n/**\r\n * Sets a nested property value in a path, creates the path properties if it doesn't exist\r\n */\r\nfunction setInPath(object, path, value) {\r\n    if (isNotNestedPath(path)) {\r\n        object[cleanupNonNestedPath(path)] = value;\r\n        return;\r\n    }\r\n    const keys = path.split(/\\.|\\[(\\d+)\\]/).filter(Boolean);\r\n    let acc = object;\r\n    for (let i = 0; i < keys.length; i++) {\r\n        // Last key, set it\r\n        if (i === keys.length - 1) {\r\n            acc[keys[i]] = value;\r\n            return;\r\n        }\r\n        // Key does not exist, create a container for it\r\n        if (!(keys[i] in acc) || isNullOrUndefined(acc[keys[i]])) {\r\n            // container can be either an object or an array depending on the next key if it exists\r\n            acc[keys[i]] = isIndex(keys[i + 1]) ? [] : {};\r\n        }\r\n        acc = acc[keys[i]];\r\n    }\r\n}\r\nfunction unset(object, key) {\r\n    if (Array.isArray(object) && isIndex(key)) {\r\n        object.splice(Number(key), 1);\r\n        return;\r\n    }\r\n    if (isObject(object)) {\r\n        delete object[key];\r\n    }\r\n}\r\n/**\r\n * Removes a nested property from object\r\n */\r\nfunction unsetPath(object, path) {\r\n    if (isNotNestedPath(path)) {\r\n        delete object[cleanupNonNestedPath(path)];\r\n        return;\r\n    }\r\n    const keys = path.split(/\\.|\\[(\\d+)\\]/).filter(Boolean);\r\n    let acc = object;\r\n    for (let i = 0; i < keys.length; i++) {\r\n        // Last key, unset it\r\n        if (i === keys.length - 1) {\r\n            unset(acc, keys[i]);\r\n            break;\r\n        }\r\n        // Key does not exist, exit\r\n        if (!(keys[i] in acc) || isNullOrUndefined(acc[keys[i]])) {\r\n            break;\r\n        }\r\n        acc = acc[keys[i]];\r\n    }\r\n    const pathValues = keys.map((_, idx) => {\r\n        return getFromPath(object, keys.slice(0, idx).join('.'));\r\n    });\r\n    for (let i = pathValues.length - 1; i >= 0; i--) {\r\n        if (!isEmptyContainer(pathValues[i])) {\r\n            continue;\r\n        }\r\n        if (i === 0) {\r\n            unset(object, keys[0]);\r\n            continue;\r\n        }\r\n        unset(pathValues[i - 1], keys[i - 1]);\r\n    }\r\n}\r\n/**\r\n * A typed version of Object.keys\r\n */\r\nfunction keysOf(record) {\r\n    return Object.keys(record);\r\n}\r\n// Uses same component provide as its own injections\r\n// Due to changes in https://github.com/vuejs/vue-next/pull/2424\r\nfunction injectWithSelf(symbol, def = undefined) {\r\n    const vm = getCurrentInstance();\r\n    return (vm === null || vm === void 0 ? void 0 : vm.provides[symbol]) || inject(symbol, def);\r\n}\r\nfunction warn(message) {\r\n    warn$1(`[vee-validate]: ${message}`);\r\n}\r\n/**\r\n * Ensures we deal with a singular field value\r\n */\r\nfunction normalizeField(field) {\r\n    if (Array.isArray(field)) {\r\n        return field[0];\r\n    }\r\n    return field;\r\n}\r\nfunction resolveNextCheckboxValue(currentValue, checkedValue, uncheckedValue) {\r\n    if (Array.isArray(currentValue)) {\r\n        const newVal = [...currentValue];\r\n        // Use isEqual since checked object values can possibly fail the equality check #3883\r\n        const idx = newVal.findIndex(v => fastDeepEqual(v, checkedValue));\r\n        idx >= 0 ? newVal.splice(idx, 1) : newVal.push(checkedValue);\r\n        return newVal;\r\n    }\r\n    return fastDeepEqual(currentValue, checkedValue) ? uncheckedValue : checkedValue;\r\n}\r\n/**\r\n * Creates a throttled function that only invokes the provided function (`func`) at most once per within a given number of milliseconds\r\n * (`limit`)\r\n */\r\nfunction throttle(func, limit) {\r\n    let inThrottle;\r\n    let lastResult;\r\n    return function (...args) {\r\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n        const context = this;\r\n        if (!inThrottle) {\r\n            inThrottle = true;\r\n            setTimeout(() => (inThrottle = false), limit);\r\n            lastResult = func.apply(context, args);\r\n        }\r\n        return lastResult;\r\n    };\r\n}\r\nfunction debounceAsync(inner, ms = 0) {\r\n    let timer = null;\r\n    let resolves = [];\r\n    return function (...args) {\r\n        // Run the function after a certain amount of time\r\n        if (timer) {\r\n            window.clearTimeout(timer);\r\n        }\r\n        timer = window.setTimeout(() => {\r\n            // Get the result of the inner function, then apply it to the resolve function of\r\n            // each promise that has been created since the last time the inner function was run\r\n            const result = inner(...args);\r\n            resolves.forEach(r => r(result));\r\n            resolves = [];\r\n        }, ms);\r\n        return new Promise(resolve => resolves.push(resolve));\r\n    };\r\n}\r\nfunction applyModelModifiers(value, modifiers) {\r\n    if (!isObject(modifiers)) {\r\n        return value;\r\n    }\r\n    if (modifiers.number) {\r\n        return toNumber(value);\r\n    }\r\n    return value;\r\n}\r\nfunction withLatest(fn, onDone) {\r\n    let latestRun;\r\n    return async function runLatest(...args) {\r\n        const pending = fn(...args);\r\n        latestRun = pending;\r\n        const result = await pending;\r\n        if (pending !== latestRun) {\r\n            return result;\r\n        }\r\n        latestRun = undefined;\r\n        onDone(result, args);\r\n        return result;\r\n    };\r\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst normalizeChildren = (tag, context, slotProps) => {\r\n    if (!context.slots.default) {\r\n        return context.slots.default;\r\n    }\r\n    if (typeof tag === 'string' || !tag) {\r\n        return context.slots.default(slotProps());\r\n    }\r\n    return {\r\n        default: () => { var _a, _b; return (_b = (_a = context.slots).default) === null || _b === void 0 ? void 0 : _b.call(_a, slotProps()); },\r\n    };\r\n};\r\n/**\r\n * Vue adds a `_value` prop at the moment on the input elements to store the REAL value on them, real values are different than the `value` attribute\r\n * as they do not get casted to strings unlike `el.value` which preserves user-code behavior\r\n */\r\nfunction getBoundValue(el) {\r\n    if (hasValueBinding(el)) {\r\n        return el._value;\r\n    }\r\n    return undefined;\r\n}\r\n/**\r\n * Vue adds a `_value` prop at the moment on the input elements to store the REAL value on them, real values are different than the `value` attribute\r\n * as they do not get casted to strings unlike `el.value` which preserves user-code behavior\r\n */\r\nfunction hasValueBinding(el) {\r\n    return '_value' in el;\r\n}\n\nfunction normalizeEventValue(value) {\r\n    if (!isEvent(value)) {\r\n        return value;\r\n    }\r\n    const input = value.target;\r\n    // Vue sets the current bound value on `_value` prop\r\n    // for checkboxes it it should fetch the value binding type as is (boolean instead of string)\r\n    if (hasCheckedAttr(input.type) && hasValueBinding(input)) {\r\n        return getBoundValue(input);\r\n    }\r\n    if (input.type === 'file' && input.files) {\r\n        const files = Array.from(input.files);\r\n        return input.multiple ? files : files[0];\r\n    }\r\n    if (isNativeMultiSelect(input)) {\r\n        return Array.from(input.options)\r\n            .filter(opt => opt.selected && !opt.disabled)\r\n            .map(getBoundValue);\r\n    }\r\n    // makes sure we get the actual `option` bound value\r\n    // #3440\r\n    if (isNativeSelect(input)) {\r\n        const selectedOption = Array.from(input.options).find(opt => opt.selected);\r\n        return selectedOption ? getBoundValue(selectedOption) : input.value;\r\n    }\r\n    return input.value;\r\n}\n\n/**\r\n * Normalizes the given rules expression.\r\n */\r\nfunction normalizeRules(rules) {\r\n    const acc = {};\r\n    Object.defineProperty(acc, '_$$isNormalized', {\r\n        value: true,\r\n        writable: false,\r\n        enumerable: false,\r\n        configurable: false,\r\n    });\r\n    if (!rules) {\r\n        return acc;\r\n    }\r\n    // Object is already normalized, skip.\r\n    if (isObject(rules) && rules._$$isNormalized) {\r\n        return rules;\r\n    }\r\n    if (isObject(rules)) {\r\n        return Object.keys(rules).reduce((prev, curr) => {\r\n            const params = normalizeParams(rules[curr]);\r\n            if (rules[curr] !== false) {\r\n                prev[curr] = buildParams(params);\r\n            }\r\n            return prev;\r\n        }, acc);\r\n    }\r\n    /* istanbul ignore if */\r\n    if (typeof rules !== 'string') {\r\n        return acc;\r\n    }\r\n    return rules.split('|').reduce((prev, rule) => {\r\n        const parsedRule = parseRule(rule);\r\n        if (!parsedRule.name) {\r\n            return prev;\r\n        }\r\n        prev[parsedRule.name] = buildParams(parsedRule.params);\r\n        return prev;\r\n    }, acc);\r\n}\r\n/**\r\n * Normalizes a rule param.\r\n */\r\nfunction normalizeParams(params) {\r\n    if (params === true) {\r\n        return [];\r\n    }\r\n    if (Array.isArray(params)) {\r\n        return params;\r\n    }\r\n    if (isObject(params)) {\r\n        return params;\r\n    }\r\n    return [params];\r\n}\r\nfunction buildParams(provided) {\r\n    const mapValueToLocator = (value) => {\r\n        // A target param using interpolation\r\n        if (typeof value === 'string' && value[0] === '@') {\r\n            return createLocator(value.slice(1));\r\n        }\r\n        return value;\r\n    };\r\n    if (Array.isArray(provided)) {\r\n        return provided.map(mapValueToLocator);\r\n    }\r\n    // #3073\r\n    if (provided instanceof RegExp) {\r\n        return [provided];\r\n    }\r\n    return Object.keys(provided).reduce((prev, key) => {\r\n        prev[key] = mapValueToLocator(provided[key]);\r\n        return prev;\r\n    }, {});\r\n}\r\n/**\r\n * Parses a rule string expression.\r\n */\r\nconst parseRule = (rule) => {\r\n    let params = [];\r\n    const name = rule.split(':')[0];\r\n    if (rule.includes(':')) {\r\n        params = rule.split(':').slice(1).join(':').split(',');\r\n    }\r\n    return { name, params };\r\n};\r\nfunction createLocator(value) {\r\n    const locator = (crossTable) => {\r\n        const val = getFromPath(crossTable, value) || crossTable[value];\r\n        return val;\r\n    };\r\n    locator.__locatorRef = value;\r\n    return locator;\r\n}\r\nfunction extractLocators(params) {\r\n    if (Array.isArray(params)) {\r\n        return params.filter(isLocator);\r\n    }\r\n    return keysOf(params)\r\n        .filter(key => isLocator(params[key]))\r\n        .map(key => params[key]);\r\n}\n\nconst DEFAULT_CONFIG = {\r\n    generateMessage: ({ field }) => `${field} is not valid.`,\r\n    bails: true,\r\n    validateOnBlur: true,\r\n    validateOnChange: true,\r\n    validateOnInput: false,\r\n    validateOnModelUpdate: true,\r\n};\r\nlet currentConfig = Object.assign({}, DEFAULT_CONFIG);\r\nconst getConfig = () => currentConfig;\r\nconst setConfig = (newConf) => {\r\n    currentConfig = Object.assign(Object.assign({}, currentConfig), newConf);\r\n};\r\nconst configure = setConfig;\n\n/**\r\n * Validates a value against the rules.\r\n */\r\nasync function validate(value, rules, options = {}) {\r\n    const shouldBail = options === null || options === void 0 ? void 0 : options.bails;\r\n    const field = {\r\n        name: (options === null || options === void 0 ? void 0 : options.name) || '{field}',\r\n        rules,\r\n        bails: shouldBail !== null && shouldBail !== void 0 ? shouldBail : true,\r\n        formData: (options === null || options === void 0 ? void 0 : options.values) || {},\r\n    };\r\n    const result = await _validate(field, value);\r\n    const errors = result.errors;\r\n    return {\r\n        errors,\r\n        valid: !errors.length,\r\n    };\r\n}\r\n/**\r\n * Starts the validation process.\r\n */\r\nasync function _validate(field, value) {\r\n    if (isYupValidator(field.rules)) {\r\n        return validateFieldWithYup(value, field.rules, { bails: field.bails });\r\n    }\r\n    // if a generic function or chain of generic functions\r\n    if (isCallable(field.rules) || Array.isArray(field.rules)) {\r\n        const ctx = {\r\n            field: field.name,\r\n            form: field.formData,\r\n            value: value,\r\n        };\r\n        // Normalize the pipeline\r\n        const pipeline = Array.isArray(field.rules) ? field.rules : [field.rules];\r\n        const length = pipeline.length;\r\n        const errors = [];\r\n        for (let i = 0; i < length; i++) {\r\n            const rule = pipeline[i];\r\n            const result = await rule(value, ctx);\r\n            const isValid = typeof result !== 'string' && result;\r\n            if (isValid) {\r\n                continue;\r\n            }\r\n            const message = typeof result === 'string' ? result : _generateFieldError(ctx);\r\n            errors.push(message);\r\n            if (field.bails) {\r\n                return {\r\n                    errors,\r\n                };\r\n            }\r\n        }\r\n        return {\r\n            errors,\r\n        };\r\n    }\r\n    const normalizedContext = Object.assign(Object.assign({}, field), { rules: normalizeRules(field.rules) });\r\n    const errors = [];\r\n    const rulesKeys = Object.keys(normalizedContext.rules);\r\n    const length = rulesKeys.length;\r\n    for (let i = 0; i < length; i++) {\r\n        const rule = rulesKeys[i];\r\n        const result = await _test(normalizedContext, value, {\r\n            name: rule,\r\n            params: normalizedContext.rules[rule],\r\n        });\r\n        if (result.error) {\r\n            errors.push(result.error);\r\n            if (field.bails) {\r\n                return {\r\n                    errors,\r\n                };\r\n            }\r\n        }\r\n    }\r\n    return {\r\n        errors,\r\n    };\r\n}\r\n/**\r\n * Handles yup validation\r\n */\r\nasync function validateFieldWithYup(value, validator, opts) {\r\n    var _a;\r\n    const errors = await validator\r\n        .validate(value, {\r\n        abortEarly: (_a = opts.bails) !== null && _a !== void 0 ? _a : true,\r\n    })\r\n        .then(() => [])\r\n        .catch((err) => {\r\n        // Yup errors have a name prop one them.\r\n        // https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\r\n        if (err.name === 'ValidationError') {\r\n            return err.errors;\r\n        }\r\n        // re-throw the error so we don't hide it\r\n        throw err;\r\n    });\r\n    return {\r\n        errors,\r\n    };\r\n}\r\n/**\r\n * Tests a single input value against a rule.\r\n */\r\nasync function _test(field, value, rule) {\r\n    const validator = resolveRule(rule.name);\r\n    if (!validator) {\r\n        throw new Error(`No such validator '${rule.name}' exists.`);\r\n    }\r\n    const params = fillTargetValues(rule.params, field.formData);\r\n    const ctx = {\r\n        field: field.name,\r\n        value,\r\n        form: field.formData,\r\n        rule: Object.assign(Object.assign({}, rule), { params }),\r\n    };\r\n    const result = await validator(value, params, ctx);\r\n    if (typeof result === 'string') {\r\n        return {\r\n            error: result,\r\n        };\r\n    }\r\n    return {\r\n        error: result ? undefined : _generateFieldError(ctx),\r\n    };\r\n}\r\n/**\r\n * Generates error messages.\r\n */\r\nfunction _generateFieldError(fieldCtx) {\r\n    const message = getConfig().generateMessage;\r\n    if (!message) {\r\n        return 'Field is invalid';\r\n    }\r\n    return message(fieldCtx);\r\n}\r\nfunction fillTargetValues(params, crossTable) {\r\n    const normalize = (value) => {\r\n        if (isLocator(value)) {\r\n            return value(crossTable);\r\n        }\r\n        return value;\r\n    };\r\n    if (Array.isArray(params)) {\r\n        return params.map(normalize);\r\n    }\r\n    return Object.keys(params).reduce((acc, param) => {\r\n        acc[param] = normalize(params[param]);\r\n        return acc;\r\n    }, {});\r\n}\r\nasync function validateYupSchema(schema, values) {\r\n    const errorObjects = await schema\r\n        .validate(values, { abortEarly: false })\r\n        .then(() => [])\r\n        .catch((err) => {\r\n        // Yup errors have a name prop one them.\r\n        // https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\r\n        if (err.name !== 'ValidationError') {\r\n            throw err;\r\n        }\r\n        // list of aggregated errors\r\n        return err.inner || [];\r\n    });\r\n    const results = {};\r\n    const errors = {};\r\n    for (const error of errorObjects) {\r\n        const messages = error.errors;\r\n        results[error.path] = { valid: !messages.length, errors: messages };\r\n        if (messages.length) {\r\n            errors[error.path] = messages[0];\r\n        }\r\n    }\r\n    return {\r\n        valid: !errorObjects.length,\r\n        results,\r\n        errors,\r\n    };\r\n}\r\nasync function validateObjectSchema(schema, values, opts) {\r\n    const paths = keysOf(schema);\r\n    const validations = paths.map(async (path) => {\r\n        var _a, _b, _c;\r\n        const fieldResult = await validate(getFromPath(values, path), schema[path], {\r\n            name: ((_a = opts === null || opts === void 0 ? void 0 : opts.names) === null || _a === void 0 ? void 0 : _a[path]) || path,\r\n            values: values,\r\n            bails: (_c = (_b = opts === null || opts === void 0 ? void 0 : opts.bailsMap) === null || _b === void 0 ? void 0 : _b[path]) !== null && _c !== void 0 ? _c : true,\r\n        });\r\n        return Object.assign(Object.assign({}, fieldResult), { path });\r\n    });\r\n    let isAllValid = true;\r\n    const validationResults = await Promise.all(validations);\r\n    const results = {};\r\n    const errors = {};\r\n    for (const result of validationResults) {\r\n        results[result.path] = {\r\n            valid: result.valid,\r\n            errors: result.errors,\r\n        };\r\n        if (!result.valid) {\r\n            isAllValid = false;\r\n            errors[result.path] = result.errors[0];\r\n        }\r\n    }\r\n    return {\r\n        valid: isAllValid,\r\n        results,\r\n        errors,\r\n    };\r\n}\n\nfunction set(obj, key, val) {\n\tif (typeof val.value === 'object') val.value = klona(val.value);\n\tif (!val.enumerable || val.get || val.set || !val.configurable || !val.writable || key === '__proto__') {\n\t\tObject.defineProperty(obj, key, val);\n\t} else obj[key] = val.value;\n}\n\nfunction klona(x) {\n\tif (typeof x !== 'object') return x;\n\n\tvar i=0, k, list, tmp, str=Object.prototype.toString.call(x);\n\n\tif (str === '[object Object]') {\n\t\ttmp = Object.create(x.__proto__ || null);\n\t} else if (str === '[object Array]') {\n\t\ttmp = Array(x.length);\n\t} else if (str === '[object Set]') {\n\t\ttmp = new Set;\n\t\tx.forEach(function (val) {\n\t\t\ttmp.add(klona(val));\n\t\t});\n\t} else if (str === '[object Map]') {\n\t\ttmp = new Map;\n\t\tx.forEach(function (val, key) {\n\t\t\ttmp.set(klona(key), klona(val));\n\t\t});\n\t} else if (str === '[object Date]') {\n\t\ttmp = new Date(+x);\n\t} else if (str === '[object RegExp]') {\n\t\ttmp = new RegExp(x.source, x.flags);\n\t} else if (str === '[object DataView]') {\n\t\ttmp = new x.constructor( klona(x.buffer) );\n\t} else if (str === '[object ArrayBuffer]') {\n\t\ttmp = x.slice(0);\n\t} else if (str.slice(-6) === 'Array]') {\n\t\t// ArrayBuffer.isView(x)\n\t\t// ~> `new` bcuz `Buffer.slice` => ref\n\t\ttmp = new x.constructor(x);\n\t}\n\n\tif (tmp) {\n\t\tfor (list=Object.getOwnPropertySymbols(x); i < list.length; i++) {\n\t\t\tset(tmp, list[i], Object.getOwnPropertyDescriptor(x, list[i]));\n\t\t}\n\n\t\tfor (i=0, list=Object.getOwnPropertyNames(x); i < list.length; i++) {\n\t\t\tif (Object.hasOwnProperty.call(tmp, k=list[i]) && tmp[k] === x[k]) continue;\n\t\t\tset(tmp, k, Object.getOwnPropertyDescriptor(x, k));\n\t\t}\n\t}\n\n\treturn tmp || x;\n}\n\nlet ID_COUNTER = 0;\r\nfunction useFieldState(path, init) {\r\n    const { value, initialValue, setInitialValue } = _useFieldValue(path, init.modelValue, !init.standalone);\r\n    const { errorMessage, errors, setErrors } = _useFieldErrors(path, !init.standalone);\r\n    const meta = _useFieldMeta(value, initialValue, errors);\r\n    const id = ID_COUNTER >= Number.MAX_SAFE_INTEGER ? 0 : ++ID_COUNTER;\r\n    function setState(state) {\r\n        var _a;\r\n        if ('value' in state) {\r\n            value.value = state.value;\r\n        }\r\n        if ('errors' in state) {\r\n            setErrors(state.errors);\r\n        }\r\n        if ('touched' in state) {\r\n            meta.touched = (_a = state.touched) !== null && _a !== void 0 ? _a : meta.touched;\r\n        }\r\n        if ('initialValue' in state) {\r\n            setInitialValue(state.initialValue);\r\n        }\r\n    }\r\n    return {\r\n        id,\r\n        path,\r\n        value,\r\n        initialValue,\r\n        meta,\r\n        errors,\r\n        errorMessage,\r\n        setState,\r\n    };\r\n}\r\n/**\r\n * Creates the field value and resolves the initial value\r\n */\r\nfunction _useFieldValue(path, modelValue, shouldInjectForm = true) {\r\n    const form = shouldInjectForm === true ? injectWithSelf(FormContextKey, undefined) : undefined;\r\n    const modelRef = ref(unref(modelValue));\r\n    function resolveInitialValue() {\r\n        if (!form) {\r\n            return unref(modelRef);\r\n        }\r\n        return getFromPath(form.meta.value.initialValues, unref(path), unref(modelRef));\r\n    }\r\n    function setInitialValue(value) {\r\n        if (!form) {\r\n            modelRef.value = value;\r\n            return;\r\n        }\r\n        form.stageInitialValue(unref(path), value, true);\r\n    }\r\n    const initialValue = computed(resolveInitialValue);\r\n    // if no form is associated, use a regular ref.\r\n    if (!form) {\r\n        const value = ref(resolveInitialValue());\r\n        return {\r\n            value,\r\n            initialValue,\r\n            setInitialValue,\r\n        };\r\n    }\r\n    // to set the initial value, first check if there is a current value, if there is then use it.\r\n    // otherwise use the configured initial value if it exists.\r\n    // prioritize model value over form values\r\n    // #3429\r\n    const currentValue = modelValue ? unref(modelValue) : getFromPath(form.values, unref(path), unref(initialValue));\r\n    form.stageInitialValue(unref(path), currentValue, true);\r\n    // otherwise use a computed setter that triggers the `setFieldValue`\r\n    const value = computed({\r\n        get() {\r\n            return getFromPath(form.values, unref(path));\r\n        },\r\n        set(newVal) {\r\n            form.setFieldValue(unref(path), newVal);\r\n        },\r\n    });\r\n    return {\r\n        value,\r\n        initialValue,\r\n        setInitialValue,\r\n    };\r\n}\r\n/**\r\n * Creates meta flags state and some associated effects with them\r\n */\r\nfunction _useFieldMeta(currentValue, initialValue, errors) {\r\n    const meta = reactive({\r\n        touched: false,\r\n        pending: false,\r\n        valid: true,\r\n        validated: !!unref(errors).length,\r\n        initialValue: computed(() => unref(initialValue)),\r\n        dirty: computed(() => {\r\n            return !isEqual(unref(currentValue), unref(initialValue));\r\n        }),\r\n    });\r\n    watch(errors, value => {\r\n        meta.valid = !value.length;\r\n    }, {\r\n        immediate: true,\r\n        flush: 'sync',\r\n    });\r\n    return meta;\r\n}\r\n/**\r\n * Creates the error message state for the field state\r\n */\r\nfunction _useFieldErrors(path, shouldInjectForm) {\r\n    const form = shouldInjectForm ? injectWithSelf(FormContextKey, undefined) : undefined;\r\n    function normalizeErrors(messages) {\r\n        if (!messages) {\r\n            return [];\r\n        }\r\n        return Array.isArray(messages) ? messages : [messages];\r\n    }\r\n    if (!form) {\r\n        const errors = ref([]);\r\n        return {\r\n            errors,\r\n            errorMessage: computed(() => errors.value[0]),\r\n            setErrors: (messages) => {\r\n                errors.value = normalizeErrors(messages);\r\n            },\r\n        };\r\n    }\r\n    const errors = computed(() => form.errorBag.value[unref(path)] || []);\r\n    return {\r\n        errors,\r\n        errorMessage: computed(() => errors.value[0]),\r\n        setErrors: (messages) => {\r\n            form.setFieldErrorBag(unref(path), normalizeErrors(messages));\r\n        },\r\n    };\r\n}\n\nfunction installDevtoolsPlugin(app) {\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        setupDevtoolsPlugin({\r\n            id: 'vee-validate-devtools-plugin',\r\n            label: 'VeeValidate Plugin',\r\n            packageName: 'vee-validate',\r\n            homepage: 'https://vee-validate.logaretm.com/v4',\r\n            app,\r\n            logo: 'https://vee-validate.logaretm.com/v4/logo.png',\r\n        }, setupApiHooks);\r\n    }\r\n}\r\nconst DEVTOOLS_FORMS = {};\r\nconst DEVTOOLS_FIELDS = {};\r\nlet API;\r\nconst refreshInspector = throttle(() => {\r\n    setTimeout(async () => {\r\n        await nextTick();\r\n        API === null || API === void 0 ? void 0 : API.sendInspectorState(INSPECTOR_ID);\r\n        API === null || API === void 0 ? void 0 : API.sendInspectorTree(INSPECTOR_ID);\r\n    }, 100);\r\n}, 100);\r\nfunction registerFormWithDevTools(form) {\r\n    const vm = getCurrentInstance();\r\n    if (!API) {\r\n        const app = vm === null || vm === void 0 ? void 0 : vm.appContext.app;\r\n        if (!app) {\r\n            return;\r\n        }\r\n        installDevtoolsPlugin(app);\r\n    }\r\n    DEVTOOLS_FORMS[form.formId] = Object.assign({}, form);\r\n    DEVTOOLS_FORMS[form.formId]._vm = vm;\r\n    onUnmounted(() => {\r\n        delete DEVTOOLS_FORMS[form.formId];\r\n        refreshInspector();\r\n    });\r\n    refreshInspector();\r\n}\r\nfunction registerSingleFieldWithDevtools(field) {\r\n    const vm = getCurrentInstance();\r\n    if (!API) {\r\n        const app = vm === null || vm === void 0 ? void 0 : vm.appContext.app;\r\n        if (!app) {\r\n            return;\r\n        }\r\n        installDevtoolsPlugin(app);\r\n    }\r\n    DEVTOOLS_FIELDS[field.id] = Object.assign({}, field);\r\n    DEVTOOLS_FIELDS[field.id]._vm = vm;\r\n    onUnmounted(() => {\r\n        delete DEVTOOLS_FIELDS[field.id];\r\n        refreshInspector();\r\n    });\r\n    refreshInspector();\r\n}\r\nconst INSPECTOR_ID = 'vee-validate-inspector';\r\nconst COLORS = {\r\n    error: 0xbd4b4b,\r\n    success: 0x06d77b,\r\n    unknown: 0x54436b,\r\n    white: 0xffffff,\r\n    black: 0x000000,\r\n    blue: 0x035397,\r\n    purple: 0xb980f0,\r\n    orange: 0xf5a962,\r\n    gray: 0xbbbfca,\r\n};\r\nlet SELECTED_NODE = null;\r\nfunction setupApiHooks(api) {\r\n    API = api;\r\n    api.addInspector({\r\n        id: INSPECTOR_ID,\r\n        icon: 'rule',\r\n        label: 'vee-validate',\r\n        noSelectionText: 'Select a vee-validate node to inspect',\r\n        actions: [\r\n            {\r\n                icon: 'done_outline',\r\n                tooltip: 'Validate selected item',\r\n                action: async () => {\r\n                    if (!SELECTED_NODE) {\r\n                        console.error('There is not a valid selected vee-validate node or component');\r\n                        return;\r\n                    }\r\n                    const result = await SELECTED_NODE.validate();\r\n                    console.log(result);\r\n                },\r\n            },\r\n            {\r\n                icon: 'delete_sweep',\r\n                tooltip: 'Clear validation state of the selected item',\r\n                action: () => {\r\n                    if (!SELECTED_NODE) {\r\n                        console.error('There is not a valid selected vee-validate node or component');\r\n                        return;\r\n                    }\r\n                    if ('id' in SELECTED_NODE) {\r\n                        SELECTED_NODE.resetField();\r\n                        return;\r\n                    }\r\n                    SELECTED_NODE.resetForm();\r\n                },\r\n            },\r\n        ],\r\n    });\r\n    api.on.getInspectorTree(payload => {\r\n        if (payload.inspectorId !== INSPECTOR_ID) {\r\n            return;\r\n        }\r\n        const forms = Object.values(DEVTOOLS_FORMS);\r\n        const fields = Object.values(DEVTOOLS_FIELDS);\r\n        payload.rootNodes = [\r\n            ...forms.map(mapFormForDevtoolsInspector),\r\n            ...fields.map(field => mapFieldForDevtoolsInspector(field)),\r\n        ];\r\n    });\r\n    api.on.getInspectorState((payload, ctx) => {\r\n        if (payload.inspectorId !== INSPECTOR_ID || ctx.currentTab !== `custom-inspector:${INSPECTOR_ID}`) {\r\n            return;\r\n        }\r\n        const { form, field, type } = decodeNodeId(payload.nodeId);\r\n        if (form && type === 'form') {\r\n            payload.state = buildFormState(form);\r\n            SELECTED_NODE = form;\r\n            return;\r\n        }\r\n        if (field && type === 'field') {\r\n            payload.state = buildFieldState(field);\r\n            SELECTED_NODE = field;\r\n            return;\r\n        }\r\n        SELECTED_NODE = null;\r\n    });\r\n}\r\nfunction mapFormForDevtoolsInspector(form) {\r\n    const { textColor, bgColor } = getTagTheme(form);\r\n    const formTreeNodes = {};\r\n    Object.values(form.fieldsByPath.value).forEach(field => {\r\n        const fieldInstance = Array.isArray(field) ? field[0] : field;\r\n        if (!fieldInstance) {\r\n            return;\r\n        }\r\n        setInPath(formTreeNodes, unref(fieldInstance.name), mapFieldForDevtoolsInspector(fieldInstance, form));\r\n    });\r\n    function buildFormTree(tree, path = []) {\r\n        const key = [...path].pop();\r\n        if ('id' in tree) {\r\n            return Object.assign(Object.assign({}, tree), { label: key || tree.label });\r\n        }\r\n        if (isObject(tree)) {\r\n            return {\r\n                id: `${path.join('.')}`,\r\n                label: key || '',\r\n                children: Object.keys(tree).map(key => buildFormTree(tree[key], [...path, key])),\r\n            };\r\n        }\r\n        if (Array.isArray(tree)) {\r\n            return {\r\n                id: `${path.join('.')}`,\r\n                label: `${key}[]`,\r\n                children: tree.map((c, idx) => buildFormTree(c, [...path, String(idx)])),\r\n            };\r\n        }\r\n        return { id: '', label: '', children: [] };\r\n    }\r\n    const { children } = buildFormTree(formTreeNodes);\r\n    return {\r\n        id: encodeNodeId(form),\r\n        label: 'Form',\r\n        children,\r\n        tags: [\r\n            {\r\n                label: 'Form',\r\n                textColor,\r\n                backgroundColor: bgColor,\r\n            },\r\n            {\r\n                label: `${Object.keys(form.fieldsByPath.value).length} fields`,\r\n                textColor: COLORS.white,\r\n                backgroundColor: COLORS.unknown,\r\n            },\r\n        ],\r\n    };\r\n}\r\nfunction mapFieldForDevtoolsInspector(field, form) {\r\n    const fieldInstance = normalizeField(field);\r\n    const { textColor, bgColor } = getTagTheme(fieldInstance);\r\n    const isGroup = Array.isArray(field) && field.length > 1;\r\n    return {\r\n        id: encodeNodeId(form, fieldInstance, !isGroup),\r\n        label: unref(fieldInstance.name),\r\n        children: Array.isArray(field) ? field.map(fieldItem => mapFieldForDevtoolsInspector(fieldItem, form)) : undefined,\r\n        tags: [\r\n            isGroup\r\n                ? undefined\r\n                : {\r\n                    label: 'Field',\r\n                    textColor,\r\n                    backgroundColor: bgColor,\r\n                },\r\n            !form\r\n                ? {\r\n                    label: 'Standalone',\r\n                    textColor: COLORS.black,\r\n                    backgroundColor: COLORS.gray,\r\n                }\r\n                : undefined,\r\n            !isGroup && fieldInstance.type === 'checkbox'\r\n                ? {\r\n                    label: 'Checkbox',\r\n                    textColor: COLORS.white,\r\n                    backgroundColor: COLORS.blue,\r\n                }\r\n                : undefined,\r\n            !isGroup && fieldInstance.type === 'radio'\r\n                ? {\r\n                    label: 'Radio',\r\n                    textColor: COLORS.white,\r\n                    backgroundColor: COLORS.purple,\r\n                }\r\n                : undefined,\r\n            isGroup\r\n                ? {\r\n                    label: 'Group',\r\n                    textColor: COLORS.black,\r\n                    backgroundColor: COLORS.orange,\r\n                }\r\n                : undefined,\r\n        ].filter(Boolean),\r\n    };\r\n}\r\nfunction encodeNodeId(form, field, encodeIndex = true) {\r\n    const fieldPath = form ? unref(field === null || field === void 0 ? void 0 : field.name) : field === null || field === void 0 ? void 0 : field.id;\r\n    const fieldGroup = fieldPath ? form === null || form === void 0 ? void 0 : form.fieldsByPath.value[fieldPath] : undefined;\r\n    let idx;\r\n    if (encodeIndex && field && Array.isArray(fieldGroup)) {\r\n        idx = fieldGroup.indexOf(field);\r\n    }\r\n    const idObject = { f: form === null || form === void 0 ? void 0 : form.formId, ff: fieldPath, idx, type: field ? 'field' : 'form' };\r\n    return btoa(JSON.stringify(idObject));\r\n}\r\nfunction decodeNodeId(nodeId) {\r\n    try {\r\n        const idObject = JSON.parse(atob(nodeId));\r\n        const form = DEVTOOLS_FORMS[idObject.f];\r\n        if (!form && idObject.ff) {\r\n            const field = DEVTOOLS_FIELDS[idObject.ff];\r\n            if (!field) {\r\n                return {};\r\n            }\r\n            return {\r\n                type: idObject.type,\r\n                field,\r\n            };\r\n        }\r\n        if (!form) {\r\n            return {};\r\n        }\r\n        const fieldGroup = form.fieldsByPath.value[idObject.ff];\r\n        return {\r\n            type: idObject.type,\r\n            form,\r\n            field: Array.isArray(fieldGroup) ? fieldGroup[idObject.idx || 0] : fieldGroup,\r\n        };\r\n    }\r\n    catch (err) {\r\n        // console.error(`Devtools: [vee-validate] Failed to parse node id ${nodeId}`);\r\n    }\r\n    return {};\r\n}\r\nfunction buildFieldState(field) {\r\n    const { errors, meta, value } = field;\r\n    return {\r\n        'Field state': [\r\n            { key: 'errors', value: errors.value },\r\n            {\r\n                key: 'initialValue',\r\n                value: meta.initialValue,\r\n            },\r\n            {\r\n                key: 'currentValue',\r\n                value: value.value,\r\n            },\r\n            {\r\n                key: 'touched',\r\n                value: meta.touched,\r\n            },\r\n            {\r\n                key: 'dirty',\r\n                value: meta.dirty,\r\n            },\r\n            {\r\n                key: 'valid',\r\n                value: meta.valid,\r\n            },\r\n        ],\r\n    };\r\n}\r\nfunction buildFormState(form) {\r\n    const { errorBag, meta, values, isSubmitting, submitCount } = form;\r\n    return {\r\n        'Form state': [\r\n            {\r\n                key: 'submitCount',\r\n                value: submitCount.value,\r\n            },\r\n            {\r\n                key: 'isSubmitting',\r\n                value: isSubmitting.value,\r\n            },\r\n            {\r\n                key: 'touched',\r\n                value: meta.value.touched,\r\n            },\r\n            {\r\n                key: 'dirty',\r\n                value: meta.value.dirty,\r\n            },\r\n            {\r\n                key: 'valid',\r\n                value: meta.value.valid,\r\n            },\r\n            {\r\n                key: 'initialValues',\r\n                value: meta.value.initialValues,\r\n            },\r\n            {\r\n                key: 'currentValues',\r\n                value: values,\r\n            },\r\n            {\r\n                key: 'errors',\r\n                value: keysOf(errorBag.value).reduce((acc, key) => {\r\n                    var _a;\r\n                    const message = (_a = errorBag.value[key]) === null || _a === void 0 ? void 0 : _a[0];\r\n                    if (message) {\r\n                        acc[key] = message;\r\n                    }\r\n                    return acc;\r\n                }, {}),\r\n            },\r\n        ],\r\n    };\r\n}\r\n/**\r\n * Resolves the tag color based on the form state\r\n */\r\nfunction getTagTheme(fieldOrForm) {\r\n    // const fallbackColors = {\r\n    //   bgColor: COLORS.unknown,\r\n    //   textColor: COLORS.white,\r\n    // };\r\n    const isValid = 'id' in fieldOrForm ? fieldOrForm.meta.valid : fieldOrForm.meta.value.valid;\r\n    return {\r\n        bgColor: isValid ? COLORS.success : COLORS.error,\r\n        textColor: isValid ? COLORS.black : COLORS.white,\r\n    };\r\n}\n\n/**\r\n * Creates a field composite.\r\n */\r\nfunction useField(name, rules, opts) {\r\n    if (hasCheckedAttr(opts === null || opts === void 0 ? void 0 : opts.type)) {\r\n        return useCheckboxField(name, rules, opts);\r\n    }\r\n    return _useField(name, rules, opts);\r\n}\r\nfunction _useField(name, rules, opts) {\r\n    const { initialValue: modelValue, validateOnMount, bails, type, checkedValue, label, validateOnValueUpdate, uncheckedValue, standalone, keepValueOnUnmount, modelPropName, syncVModel, } = normalizeOptions(unref(name), opts);\r\n    const form = !standalone ? injectWithSelf(FormContextKey) : undefined;\r\n    // a flag indicating if the field is about to be removed/unmounted.\r\n    let markedForRemoval = false;\r\n    const { id, value, initialValue, meta, setState, errors, errorMessage } = useFieldState(name, {\r\n        modelValue,\r\n        standalone,\r\n    });\r\n    if (syncVModel) {\r\n        useVModel({ value, prop: modelPropName, handleChange });\r\n    }\r\n    /**\r\n     * Handles common onBlur meta update\r\n     */\r\n    const handleBlur = () => {\r\n        meta.touched = true;\r\n    };\r\n    const normalizedRules = computed(() => {\r\n        let rulesValue = unref(rules);\r\n        const schema = unref(form === null || form === void 0 ? void 0 : form.schema);\r\n        if (schema && !isYupValidator(schema)) {\r\n            rulesValue = extractRuleFromSchema(schema, unref(name)) || rulesValue;\r\n        }\r\n        if (isYupValidator(rulesValue) || isCallable(rulesValue) || Array.isArray(rulesValue)) {\r\n            return rulesValue;\r\n        }\r\n        return normalizeRules(rulesValue);\r\n    });\r\n    async function validateCurrentValue(mode) {\r\n        var _a, _b;\r\n        if (form === null || form === void 0 ? void 0 : form.validateSchema) {\r\n            return (_a = (await form.validateSchema(mode)).results[unref(name)]) !== null && _a !== void 0 ? _a : { valid: true, errors: [] };\r\n        }\r\n        return validate(value.value, normalizedRules.value, {\r\n            name: unref(label) || unref(name),\r\n            values: (_b = form === null || form === void 0 ? void 0 : form.values) !== null && _b !== void 0 ? _b : {},\r\n            bails,\r\n        });\r\n    }\r\n    const validateWithStateMutation = withLatest(async () => {\r\n        meta.pending = true;\r\n        meta.validated = true;\r\n        return validateCurrentValue('validated-only');\r\n    }, result => {\r\n        if (markedForRemoval) {\r\n            result.valid = true;\r\n            result.errors = [];\r\n        }\r\n        setState({ errors: result.errors });\r\n        meta.pending = false;\r\n        return result;\r\n    });\r\n    const validateValidStateOnly = withLatest(async () => {\r\n        return validateCurrentValue('silent');\r\n    }, result => {\r\n        if (markedForRemoval) {\r\n            result.valid = true;\r\n        }\r\n        meta.valid = result.valid;\r\n        return result;\r\n    });\r\n    function validate$1(opts) {\r\n        if ((opts === null || opts === void 0 ? void 0 : opts.mode) === 'silent') {\r\n            return validateValidStateOnly();\r\n        }\r\n        return validateWithStateMutation();\r\n    }\r\n    // Common input/change event handler\r\n    function handleChange(e, shouldValidate = true) {\r\n        const newValue = normalizeEventValue(e);\r\n        value.value = newValue;\r\n        if (!validateOnValueUpdate && shouldValidate) {\r\n            validateWithStateMutation();\r\n        }\r\n    }\r\n    // Runs the initial validation\r\n    onMounted(() => {\r\n        if (validateOnMount) {\r\n            return validateWithStateMutation();\r\n        }\r\n        // validate self initially if no form was handling this\r\n        // forms should have their own initial silent validation run to make things more efficient\r\n        if (!form || !form.validateSchema) {\r\n            validateValidStateOnly();\r\n        }\r\n    });\r\n    function setTouched(isTouched) {\r\n        meta.touched = isTouched;\r\n    }\r\n    let unwatchValue;\r\n    let lastWatchedValue = klona(value.value);\r\n    function watchValue() {\r\n        unwatchValue = watch(value, (val, oldVal) => {\r\n            if (isEqual(val, oldVal) && isEqual(val, lastWatchedValue)) {\r\n                return;\r\n            }\r\n            const validateFn = validateOnValueUpdate ? validateWithStateMutation : validateValidStateOnly;\r\n            validateFn();\r\n            lastWatchedValue = klona(val);\r\n        }, {\r\n            deep: true,\r\n        });\r\n    }\r\n    watchValue();\r\n    function resetField(state) {\r\n        var _a;\r\n        unwatchValue === null || unwatchValue === void 0 ? void 0 : unwatchValue();\r\n        const newValue = state && 'value' in state ? state.value : initialValue.value;\r\n        setState({\r\n            value: klona(newValue),\r\n            initialValue: klona(newValue),\r\n            touched: (_a = state === null || state === void 0 ? void 0 : state.touched) !== null && _a !== void 0 ? _a : false,\r\n            errors: (state === null || state === void 0 ? void 0 : state.errors) || [],\r\n        });\r\n        meta.pending = false;\r\n        meta.validated = false;\r\n        validateValidStateOnly();\r\n        // need to watch at next tick to avoid triggering the value watcher\r\n        nextTick(() => {\r\n            watchValue();\r\n        });\r\n    }\r\n    function setValue(newValue) {\r\n        value.value = newValue;\r\n    }\r\n    function setErrors(errors) {\r\n        setState({ errors: Array.isArray(errors) ? errors : [errors] });\r\n    }\r\n    const field = {\r\n        id,\r\n        name,\r\n        label,\r\n        value,\r\n        meta,\r\n        errors,\r\n        errorMessage,\r\n        type,\r\n        checkedValue,\r\n        uncheckedValue,\r\n        bails,\r\n        keepValueOnUnmount,\r\n        resetField,\r\n        handleReset: () => resetField(),\r\n        validate: validate$1,\r\n        handleChange,\r\n        handleBlur,\r\n        setState,\r\n        setTouched,\r\n        setErrors,\r\n        setValue,\r\n    };\r\n    provide(FieldContextKey, field);\r\n    if (isRef(rules) && typeof unref(rules) !== 'function') {\r\n        watch(rules, (value, oldValue) => {\r\n            if (isEqual(value, oldValue)) {\r\n                return;\r\n            }\r\n            meta.validated ? validateWithStateMutation() : validateValidStateOnly();\r\n        }, {\r\n            deep: true,\r\n        });\r\n    }\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        field._vm = getCurrentInstance();\r\n        watch(() => (Object.assign(Object.assign({ errors: errors.value }, meta), { value: value.value })), refreshInspector, {\r\n            deep: true,\r\n        });\r\n        if (!form) {\r\n            registerSingleFieldWithDevtools(field);\r\n        }\r\n    }\r\n    // if no associated form return the field API immediately\r\n    if (!form) {\r\n        return field;\r\n    }\r\n    // associate the field with the given form\r\n    form.register(field);\r\n    onBeforeUnmount(() => {\r\n        markedForRemoval = true;\r\n        form.unregister(field);\r\n    });\r\n    // extract cross-field dependencies in a computed prop\r\n    const dependencies = computed(() => {\r\n        const rulesVal = normalizedRules.value;\r\n        // is falsy, a function schema or a yup schema\r\n        if (!rulesVal || isCallable(rulesVal) || isYupValidator(rulesVal) || Array.isArray(rulesVal)) {\r\n            return {};\r\n        }\r\n        return Object.keys(rulesVal).reduce((acc, rule) => {\r\n            const deps = extractLocators(rulesVal[rule])\r\n                .map((dep) => dep.__locatorRef)\r\n                .reduce((depAcc, depName) => {\r\n                const depValue = getFromPath(form.values, depName) || form.values[depName];\r\n                if (depValue !== undefined) {\r\n                    depAcc[depName] = depValue;\r\n                }\r\n                return depAcc;\r\n            }, {});\r\n            Object.assign(acc, deps);\r\n            return acc;\r\n        }, {});\r\n    });\r\n    // Adds a watcher that runs the validation whenever field dependencies change\r\n    watch(dependencies, (deps, oldDeps) => {\r\n        // Skip if no dependencies or if the field wasn't manipulated\r\n        if (!Object.keys(deps).length) {\r\n            return;\r\n        }\r\n        const shouldValidate = !isEqual(deps, oldDeps);\r\n        if (shouldValidate) {\r\n            meta.validated ? validateWithStateMutation() : validateValidStateOnly();\r\n        }\r\n    });\r\n    return field;\r\n}\r\n/**\r\n * Normalizes partial field options to include the full options\r\n */\r\nfunction normalizeOptions(name, opts) {\r\n    const defaults = () => ({\r\n        initialValue: undefined,\r\n        validateOnMount: false,\r\n        bails: true,\r\n        rules: '',\r\n        label: name,\r\n        validateOnValueUpdate: true,\r\n        standalone: false,\r\n        keepValueOnUnmount: undefined,\r\n        modelPropName: 'modelValue',\r\n        syncVModel: true,\r\n    });\r\n    if (!opts) {\r\n        return defaults();\r\n    }\r\n    // TODO: Deprecate this in next major release\r\n    const checkedValue = 'valueProp' in opts ? opts.valueProp : opts.checkedValue;\r\n    return Object.assign(Object.assign(Object.assign({}, defaults()), (opts || {})), { checkedValue });\r\n}\r\n/**\r\n * Extracts the validation rules from a schema\r\n */\r\nfunction extractRuleFromSchema(schema, fieldName) {\r\n    // no schema at all\r\n    if (!schema) {\r\n        return undefined;\r\n    }\r\n    // there is a key on the schema object for this field\r\n    return schema[fieldName];\r\n}\r\nfunction useCheckboxField(name, rules, opts) {\r\n    const form = !(opts === null || opts === void 0 ? void 0 : opts.standalone) ? injectWithSelf(FormContextKey) : undefined;\r\n    const checkedValue = opts === null || opts === void 0 ? void 0 : opts.checkedValue;\r\n    const uncheckedValue = opts === null || opts === void 0 ? void 0 : opts.uncheckedValue;\r\n    function patchCheckboxApi(field) {\r\n        const handleChange = field.handleChange;\r\n        const checked = computed(() => {\r\n            const currentValue = unref(field.value);\r\n            const checkedVal = unref(checkedValue);\r\n            return Array.isArray(currentValue)\r\n                ? currentValue.findIndex(v => isEqual(v, checkedVal)) >= 0\r\n                : isEqual(checkedVal, currentValue);\r\n        });\r\n        function handleCheckboxChange(e, shouldValidate = true) {\r\n            var _a;\r\n            if (checked.value === ((_a = e === null || e === void 0 ? void 0 : e.target) === null || _a === void 0 ? void 0 : _a.checked)) {\r\n                if (shouldValidate) {\r\n                    field.validate();\r\n                }\r\n                return;\r\n            }\r\n            let newValue = normalizeEventValue(e);\r\n            // Single checkbox field without a form to toggle it's value\r\n            if (!form) {\r\n                newValue = resolveNextCheckboxValue(unref(field.value), unref(checkedValue), unref(uncheckedValue));\r\n            }\r\n            handleChange(newValue, shouldValidate);\r\n        }\r\n        return Object.assign(Object.assign({}, field), { checked,\r\n            checkedValue,\r\n            uncheckedValue, handleChange: handleCheckboxChange });\r\n    }\r\n    return patchCheckboxApi(_useField(name, rules, opts));\r\n}\r\nfunction useVModel({ prop, value, handleChange }) {\r\n    const vm = getCurrentInstance();\r\n    /* istanbul ignore next */\r\n    if (!vm) {\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            console.warn('Failed to setup model events because `useField` was not called in setup.');\r\n        }\r\n        return;\r\n    }\r\n    const propName = prop || 'modelValue';\r\n    const emitName = `update:${propName}`;\r\n    // Component doesn't have a model prop setup (must be defined on the props)\r\n    if (!(propName in vm.props)) {\r\n        return;\r\n    }\r\n    watch(value, newValue => {\r\n        if (isEqual(newValue, getCurrentModelValue(vm, propName))) {\r\n            return;\r\n        }\r\n        vm.emit(emitName, newValue);\r\n    });\r\n    watch(() => getCurrentModelValue(vm, propName), propValue => {\r\n        if (propValue === IS_ABSENT && value.value === undefined) {\r\n            return;\r\n        }\r\n        const newValue = propValue === IS_ABSENT ? undefined : propValue;\r\n        if (isEqual(newValue, applyModelModifiers(value.value, vm.props.modelModifiers))) {\r\n            return;\r\n        }\r\n        handleChange(newValue);\r\n    });\r\n}\r\nfunction getCurrentModelValue(vm, propName) {\r\n    return vm.props[propName];\r\n}\n\nconst FieldImpl = defineComponent({\r\n    name: 'Field',\r\n    inheritAttrs: false,\r\n    props: {\r\n        as: {\r\n            type: [String, Object],\r\n            default: undefined,\r\n        },\r\n        name: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n        rules: {\r\n            type: [Object, String, Function],\r\n            default: undefined,\r\n        },\r\n        validateOnMount: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n        validateOnBlur: {\r\n            type: Boolean,\r\n            default: undefined,\r\n        },\r\n        validateOnChange: {\r\n            type: Boolean,\r\n            default: undefined,\r\n        },\r\n        validateOnInput: {\r\n            type: Boolean,\r\n            default: undefined,\r\n        },\r\n        validateOnModelUpdate: {\r\n            type: Boolean,\r\n            default: undefined,\r\n        },\r\n        bails: {\r\n            type: Boolean,\r\n            default: () => getConfig().bails,\r\n        },\r\n        label: {\r\n            type: String,\r\n            default: undefined,\r\n        },\r\n        uncheckedValue: {\r\n            type: null,\r\n            default: undefined,\r\n        },\r\n        modelValue: {\r\n            type: null,\r\n            default: IS_ABSENT,\r\n        },\r\n        modelModifiers: {\r\n            type: null,\r\n            default: () => ({}),\r\n        },\r\n        'onUpdate:modelValue': {\r\n            type: null,\r\n            default: undefined,\r\n        },\r\n        standalone: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n        keepValue: {\r\n            type: Boolean,\r\n            default: undefined,\r\n        },\r\n    },\r\n    setup(props, ctx) {\r\n        const rules = toRef(props, 'rules');\r\n        const name = toRef(props, 'name');\r\n        const label = toRef(props, 'label');\r\n        const uncheckedValue = toRef(props, 'uncheckedValue');\r\n        const keepValue = toRef(props, 'keepValue');\r\n        const { errors, value, errorMessage, validate: validateField, handleChange, handleBlur, setTouched, resetField, handleReset, meta, checked, setErrors, } = useField(name, rules, {\r\n            validateOnMount: props.validateOnMount,\r\n            bails: props.bails,\r\n            standalone: props.standalone,\r\n            type: ctx.attrs.type,\r\n            initialValue: resolveInitialValue(props, ctx),\r\n            // Only for checkboxes and radio buttons\r\n            checkedValue: ctx.attrs.value,\r\n            uncheckedValue,\r\n            label,\r\n            validateOnValueUpdate: false,\r\n            keepValueOnUnmount: keepValue,\r\n        });\r\n        // If there is a v-model applied on the component we need to emit the `update:modelValue` whenever the value binding changes\r\n        const onChangeHandler = function handleChangeWithModel(e, shouldValidate = true) {\r\n            handleChange(e, shouldValidate);\r\n            ctx.emit('update:modelValue', value.value);\r\n        };\r\n        const handleInput = (e) => {\r\n            if (!hasCheckedAttr(ctx.attrs.type)) {\r\n                value.value = normalizeEventValue(e);\r\n            }\r\n        };\r\n        const onInputHandler = function handleInputWithModel(e) {\r\n            handleInput(e);\r\n            ctx.emit('update:modelValue', value.value);\r\n        };\r\n        const fieldProps = computed(() => {\r\n            const { validateOnInput, validateOnChange, validateOnBlur, validateOnModelUpdate } = resolveValidationTriggers(props);\r\n            const baseOnBlur = [handleBlur, ctx.attrs.onBlur, validateOnBlur ? validateField : undefined].filter(Boolean);\r\n            const baseOnInput = [(e) => onChangeHandler(e, validateOnInput), ctx.attrs.onInput].filter(Boolean);\r\n            const baseOnChange = [(e) => onChangeHandler(e, validateOnChange), ctx.attrs.onChange].filter(Boolean);\r\n            const attrs = {\r\n                name: props.name,\r\n                onBlur: baseOnBlur,\r\n                onInput: baseOnInput,\r\n                onChange: baseOnChange,\r\n            };\r\n            attrs['onUpdate:modelValue'] = e => onChangeHandler(e, validateOnModelUpdate);\r\n            if (hasCheckedAttr(ctx.attrs.type) && checked) {\r\n                attrs.checked = checked.value;\r\n            }\r\n            const tag = resolveTag(props, ctx);\r\n            if (shouldHaveValueBinding(tag, ctx.attrs)) {\r\n                attrs.value = value.value;\r\n            }\r\n            return attrs;\r\n        });\r\n        function slotProps() {\r\n            return {\r\n                field: fieldProps.value,\r\n                value: value.value,\r\n                meta,\r\n                errors: errors.value,\r\n                errorMessage: errorMessage.value,\r\n                validate: validateField,\r\n                resetField,\r\n                handleChange: onChangeHandler,\r\n                handleInput: onInputHandler,\r\n                handleReset,\r\n                handleBlur,\r\n                setTouched,\r\n                setErrors,\r\n            };\r\n        }\r\n        ctx.expose({\r\n            setErrors,\r\n            setTouched,\r\n            reset: resetField,\r\n            validate: validateField,\r\n            handleChange,\r\n        });\r\n        return () => {\r\n            const tag = resolveDynamicComponent(resolveTag(props, ctx));\r\n            const children = normalizeChildren(tag, ctx, slotProps);\r\n            if (tag) {\r\n                return h(tag, Object.assign(Object.assign({}, ctx.attrs), fieldProps.value), children);\r\n            }\r\n            return children;\r\n        };\r\n    },\r\n});\r\nfunction resolveTag(props, ctx) {\r\n    let tag = props.as || '';\r\n    if (!props.as && !ctx.slots.default) {\r\n        tag = 'input';\r\n    }\r\n    return tag;\r\n}\r\nfunction resolveValidationTriggers(props) {\r\n    var _a, _b, _c, _d;\r\n    const { validateOnInput, validateOnChange, validateOnBlur, validateOnModelUpdate } = getConfig();\r\n    return {\r\n        validateOnInput: (_a = props.validateOnInput) !== null && _a !== void 0 ? _a : validateOnInput,\r\n        validateOnChange: (_b = props.validateOnChange) !== null && _b !== void 0 ? _b : validateOnChange,\r\n        validateOnBlur: (_c = props.validateOnBlur) !== null && _c !== void 0 ? _c : validateOnBlur,\r\n        validateOnModelUpdate: (_d = props.validateOnModelUpdate) !== null && _d !== void 0 ? _d : validateOnModelUpdate,\r\n    };\r\n}\r\nfunction resolveInitialValue(props, ctx) {\r\n    // Gets the initial value either from `value` prop/attr or `v-model` binding (modelValue)\r\n    // For checkboxes and radio buttons it will always be the model value not the `value` attribute\r\n    if (!hasCheckedAttr(ctx.attrs.type)) {\r\n        return isPropPresent(props, 'modelValue') ? props.modelValue : ctx.attrs.value;\r\n    }\r\n    return isPropPresent(props, 'modelValue') ? props.modelValue : undefined;\r\n}\r\nconst Field = FieldImpl;\n\nlet FORM_COUNTER = 0;\r\nfunction useForm(opts) {\r\n    var _a;\r\n    const formId = FORM_COUNTER++;\r\n    // Prevents fields from double resetting their values, which causes checkboxes to toggle their initial value\r\n    // TODO: This won't be needed if we centralize all the state inside the `form` for form inputs\r\n    let RESET_LOCK = false;\r\n    // A lookup containing fields or field groups\r\n    const fieldsByPath = ref({});\r\n    // If the form is currently submitting\r\n    const isSubmitting = ref(false);\r\n    // The number of times the user tried to submit the form\r\n    const submitCount = ref(0);\r\n    // field arrays managed by this form\r\n    const fieldArrays = [];\r\n    // a private ref for all form values\r\n    const formValues = reactive(klona(unref(opts === null || opts === void 0 ? void 0 : opts.initialValues) || {}));\r\n    // the source of errors for the form fields\r\n    const { errorBag, setErrorBag, setFieldErrorBag } = useErrorBag(opts === null || opts === void 0 ? void 0 : opts.initialErrors);\r\n    // Gets the first error of each field\r\n    const errors = computed(() => {\r\n        return keysOf(errorBag.value).reduce((acc, key) => {\r\n            const bag = errorBag.value[key];\r\n            if (bag && bag.length) {\r\n                acc[key] = bag[0];\r\n            }\r\n            return acc;\r\n        }, {});\r\n    });\r\n    function getFirstFieldAtPath(path) {\r\n        const fieldOrGroup = fieldsByPath.value[path];\r\n        return Array.isArray(fieldOrGroup) ? fieldOrGroup[0] : fieldOrGroup;\r\n    }\r\n    function fieldExists(path) {\r\n        return !!fieldsByPath.value[path];\r\n    }\r\n    /**\r\n     * Holds a computed reference to all fields names and labels\r\n     */\r\n    const fieldNames = computed(() => {\r\n        return keysOf(fieldsByPath.value).reduce((names, path) => {\r\n            const field = getFirstFieldAtPath(path);\r\n            if (field) {\r\n                names[path] = unref(field.label || field.name) || '';\r\n            }\r\n            return names;\r\n        }, {});\r\n    });\r\n    const fieldBailsMap = computed(() => {\r\n        return keysOf(fieldsByPath.value).reduce((map, path) => {\r\n            var _a;\r\n            const field = getFirstFieldAtPath(path);\r\n            if (field) {\r\n                map[path] = (_a = field.bails) !== null && _a !== void 0 ? _a : true;\r\n            }\r\n            return map;\r\n        }, {});\r\n    });\r\n    // mutable non-reactive reference to initial errors\r\n    // we need this to process initial errors then unset them\r\n    const initialErrors = Object.assign({}, ((opts === null || opts === void 0 ? void 0 : opts.initialErrors) || {}));\r\n    const keepValuesOnUnmount = (_a = opts === null || opts === void 0 ? void 0 : opts.keepValuesOnUnmount) !== null && _a !== void 0 ? _a : false;\r\n    // initial form values\r\n    const { initialValues, originalInitialValues, setInitialValues } = useFormInitialValues(fieldsByPath, formValues, opts === null || opts === void 0 ? void 0 : opts.initialValues);\r\n    // form meta aggregations\r\n    const meta = useFormMeta(fieldsByPath, formValues, originalInitialValues, errors);\r\n    const schema = opts === null || opts === void 0 ? void 0 : opts.validationSchema;\r\n    /**\r\n     * Batches validation runs in 5ms batches\r\n     * Must have two distinct batch queues to make sure they don't override each other settings #3783\r\n     */\r\n    const debouncedSilentValidation = debounceAsync(_validateSchema, 5);\r\n    const debouncedValidation = debounceAsync(_validateSchema, 5);\r\n    const validateSchema = withLatest(async (mode) => {\r\n        return (await mode) === 'silent' ? debouncedSilentValidation() : debouncedValidation();\r\n    }, (formResult, [mode]) => {\r\n        // fields by id lookup\r\n        const fieldsById = formCtx.fieldsByPath.value || {};\r\n        // errors fields names, we need it to also check if custom errors are updated\r\n        const currentErrorsPaths = keysOf(formCtx.errorBag.value);\r\n        // collect all the keys from the schema and all fields\r\n        // this ensures we have a complete keymap of all the fields\r\n        const paths = [\r\n            ...new Set([...keysOf(formResult.results), ...keysOf(fieldsById), ...currentErrorsPaths]),\r\n        ];\r\n        // aggregates the paths into a single result object while applying the results on the fields\r\n        return paths.reduce((validation, path) => {\r\n            const field = fieldsById[path];\r\n            const messages = (formResult.results[path] || { errors: [] }).errors;\r\n            const fieldResult = {\r\n                errors: messages,\r\n                valid: !messages.length,\r\n            };\r\n            validation.results[path] = fieldResult;\r\n            if (!fieldResult.valid) {\r\n                validation.errors[path] = fieldResult.errors[0];\r\n            }\r\n            // field not rendered\r\n            if (!field) {\r\n                setFieldError(path, messages);\r\n                return validation;\r\n            }\r\n            // always update the valid flag regardless of the mode\r\n            applyFieldMutation(field, f => (f.meta.valid = fieldResult.valid));\r\n            if (mode === 'silent') {\r\n                return validation;\r\n            }\r\n            const wasValidated = Array.isArray(field) ? field.some(f => f.meta.validated) : field.meta.validated;\r\n            if (mode === 'validated-only' && !wasValidated) {\r\n                return validation;\r\n            }\r\n            applyFieldMutation(field, f => f.setState({ errors: fieldResult.errors }));\r\n            return validation;\r\n        }, { valid: formResult.valid, results: {}, errors: {} });\r\n    });\r\n    const formCtx = {\r\n        formId,\r\n        fieldsByPath,\r\n        values: formValues,\r\n        errorBag,\r\n        errors,\r\n        schema,\r\n        submitCount,\r\n        meta,\r\n        isSubmitting,\r\n        fieldArrays,\r\n        keepValuesOnUnmount,\r\n        validateSchema: unref(schema) ? validateSchema : undefined,\r\n        validate,\r\n        register: registerField,\r\n        unregister: unregisterField,\r\n        setFieldErrorBag,\r\n        validateField,\r\n        setFieldValue,\r\n        setValues,\r\n        setErrors,\r\n        setFieldError,\r\n        setFieldTouched,\r\n        setTouched,\r\n        resetForm,\r\n        handleSubmit,\r\n        stageInitialValue,\r\n        unsetInitialValue,\r\n        setFieldInitialValue,\r\n        useFieldModel,\r\n    };\r\n    function isFieldGroup(fieldOrGroup) {\r\n        return Array.isArray(fieldOrGroup);\r\n    }\r\n    function applyFieldMutation(fieldOrGroup, mutation) {\r\n        if (Array.isArray(fieldOrGroup)) {\r\n            return fieldOrGroup.forEach(mutation);\r\n        }\r\n        return mutation(fieldOrGroup);\r\n    }\r\n    function mutateAllFields(mutation) {\r\n        Object.values(fieldsByPath.value).forEach(field => {\r\n            if (!field) {\r\n                return;\r\n            }\r\n            // avoid resetting the field values, because they should've been reset already.\r\n            applyFieldMutation(field, mutation);\r\n        });\r\n    }\r\n    /**\r\n     * Manually sets an error message on a specific field\r\n     */\r\n    function setFieldError(field, message) {\r\n        setFieldErrorBag(field, message);\r\n    }\r\n    /**\r\n     * Sets errors for the fields specified in the object\r\n     */\r\n    function setErrors(fields) {\r\n        setErrorBag(fields);\r\n    }\r\n    /**\r\n     * Sets a single field value\r\n     */\r\n    function setFieldValue(field, value, { force } = { force: false }) {\r\n        var _a;\r\n        const fieldInstance = fieldsByPath.value[field];\r\n        const clonedValue = klona(value);\r\n        // field wasn't found, create a virtual field as a placeholder\r\n        if (!fieldInstance) {\r\n            setInPath(formValues, field, clonedValue);\r\n            return;\r\n        }\r\n        if (isFieldGroup(fieldInstance) && ((_a = fieldInstance[0]) === null || _a === void 0 ? void 0 : _a.type) === 'checkbox' && !Array.isArray(value)) {\r\n            // Multiple checkboxes, and only one of them got updated\r\n            const newValue = klona(resolveNextCheckboxValue(getFromPath(formValues, field) || [], value, undefined));\r\n            setInPath(formValues, field, newValue);\r\n            return;\r\n        }\r\n        let newValue = value;\r\n        // Single Checkbox: toggles the field value unless the field is being reset then force it\r\n        if (!isFieldGroup(fieldInstance) && fieldInstance.type === 'checkbox' && !force && !RESET_LOCK) {\r\n            newValue = klona(resolveNextCheckboxValue(getFromPath(formValues, field), value, unref(fieldInstance.uncheckedValue)));\r\n        }\r\n        setInPath(formValues, field, newValue);\r\n    }\r\n    /**\r\n     * Sets multiple fields values\r\n     */\r\n    function setValues(fields) {\r\n        // clean up old values\r\n        keysOf(formValues).forEach(key => {\r\n            delete formValues[key];\r\n        });\r\n        // set up new values\r\n        keysOf(fields).forEach(path => {\r\n            setFieldValue(path, fields[path]);\r\n        });\r\n        // regenerate the arrays when the form values change\r\n        fieldArrays.forEach(f => f && f.reset());\r\n    }\r\n    function createModel(path) {\r\n        const { value } = _useFieldValue(path);\r\n        watch(value, () => {\r\n            if (!fieldExists(unref(path))) {\r\n                validate({ mode: 'validated-only' });\r\n            }\r\n        }, {\r\n            deep: true,\r\n        });\r\n        return value;\r\n    }\r\n    function useFieldModel(path) {\r\n        if (!Array.isArray(path)) {\r\n            return createModel(path);\r\n        }\r\n        return path.map(createModel);\r\n    }\r\n    /**\r\n     * Sets the touched meta state on a field\r\n     */\r\n    function setFieldTouched(field, isTouched) {\r\n        const fieldInstance = fieldsByPath.value[field];\r\n        if (fieldInstance) {\r\n            applyFieldMutation(fieldInstance, f => f.setTouched(isTouched));\r\n        }\r\n    }\r\n    /**\r\n     * Sets the touched meta state on multiple fields\r\n     */\r\n    function setTouched(fields) {\r\n        keysOf(fields).forEach(field => {\r\n            setFieldTouched(field, !!fields[field]);\r\n        });\r\n    }\r\n    /**\r\n     * Resets all fields\r\n     */\r\n    function resetForm(state) {\r\n        RESET_LOCK = true;\r\n        // Reset all field states first\r\n        mutateAllFields(f => f.resetField());\r\n        // set initial values if provided\r\n        if (state === null || state === void 0 ? void 0 : state.values) {\r\n            setInitialValues(state.values);\r\n            setValues(state === null || state === void 0 ? void 0 : state.values);\r\n        }\r\n        else {\r\n            // clean up the initial values back to the original\r\n            setInitialValues(originalInitialValues.value);\r\n            // otherwise clean the current values\r\n            setValues(originalInitialValues.value);\r\n        }\r\n        if (state === null || state === void 0 ? void 0 : state.touched) {\r\n            setTouched(state.touched);\r\n        }\r\n        setErrors((state === null || state === void 0 ? void 0 : state.errors) || {});\r\n        submitCount.value = (state === null || state === void 0 ? void 0 : state.submitCount) || 0;\r\n        nextTick(() => {\r\n            RESET_LOCK = false;\r\n        });\r\n    }\r\n    function insertFieldAtPath(field, path) {\r\n        const rawField = markRaw(field);\r\n        const fieldPath = path;\r\n        // first field at that path\r\n        if (!fieldsByPath.value[fieldPath]) {\r\n            fieldsByPath.value[fieldPath] = rawField;\r\n            return;\r\n        }\r\n        const fieldAtPath = fieldsByPath.value[fieldPath];\r\n        if (fieldAtPath && !Array.isArray(fieldAtPath)) {\r\n            fieldsByPath.value[fieldPath] = [fieldAtPath];\r\n        }\r\n        // add the new array to that path\r\n        fieldsByPath.value[fieldPath] = [...fieldsByPath.value[fieldPath], rawField];\r\n    }\r\n    function removeFieldFromPath(field, path) {\r\n        const fieldPath = path;\r\n        const fieldAtPath = fieldsByPath.value[fieldPath];\r\n        if (!fieldAtPath) {\r\n            return;\r\n        }\r\n        // same field at path\r\n        if (!isFieldGroup(fieldAtPath) && field.id === fieldAtPath.id) {\r\n            delete fieldsByPath.value[fieldPath];\r\n            return;\r\n        }\r\n        if (isFieldGroup(fieldAtPath)) {\r\n            const idx = fieldAtPath.findIndex(f => f.id === field.id);\r\n            if (idx === -1) {\r\n                return;\r\n            }\r\n            fieldAtPath.splice(idx, 1);\r\n            if (!fieldAtPath.length) {\r\n                delete fieldsByPath.value[fieldPath];\r\n            }\r\n        }\r\n    }\r\n    function registerField(field) {\r\n        const fieldPath = unref(field.name);\r\n        insertFieldAtPath(field, fieldPath);\r\n        if (isRef(field.name)) {\r\n            // ensures when a field's name was already taken that it preserves its same value\r\n            // necessary for fields generated by loops\r\n            watch(field.name, async (newPath, oldPath) => {\r\n                // cache the value\r\n                await nextTick();\r\n                removeFieldFromPath(field, oldPath);\r\n                insertFieldAtPath(field, newPath);\r\n                // re-validate if either path had errors before\r\n                if (errors.value[oldPath] || errors.value[newPath]) {\r\n                    // clear up both paths errors\r\n                    setFieldError(oldPath, undefined);\r\n                    validateField(newPath);\r\n                }\r\n                // clean up the old path if no other field is sharing that name\r\n                // #3325\r\n                await nextTick();\r\n                if (!fieldExists(oldPath)) {\r\n                    unsetPath(formValues, oldPath);\r\n                }\r\n            });\r\n        }\r\n        // if field already had errors (initial errors) that's not user-set, validate it again to ensure state is correct\r\n        // the difference being that `initialErrors` will contain the error message while other errors (pre-validated schema) won't have them as initial errors\r\n        // #3342\r\n        const initialErrorMessage = unref(field.errorMessage);\r\n        if (initialErrorMessage && (initialErrors === null || initialErrors === void 0 ? void 0 : initialErrors[fieldPath]) !== initialErrorMessage) {\r\n            validateField(fieldPath);\r\n        }\r\n        // marks the initial error as \"consumed\" so it won't be matched later with same non-initial error\r\n        delete initialErrors[fieldPath];\r\n    }\r\n    function unregisterField(field) {\r\n        const fieldName = unref(field.name);\r\n        const fieldInstance = fieldsByPath.value[fieldName];\r\n        const isGroup = !!fieldInstance && isFieldGroup(fieldInstance);\r\n        removeFieldFromPath(field, fieldName);\r\n        // clears a field error on unmounted\r\n        // we wait till next tick to make sure if the field is completely removed and doesn't have any siblings like checkboxes\r\n        nextTick(() => {\r\n            var _a;\r\n            const shouldKeepValue = (_a = unref(field.keepValueOnUnmount)) !== null && _a !== void 0 ? _a : unref(keepValuesOnUnmount);\r\n            const currentGroupValue = getFromPath(formValues, fieldName);\r\n            // The boolean here is we check if the field still belongs to the same control group with that name\r\n            // if another group claimed the name, we should avoid handling it since it is no longer the same group\r\n            // this happens with `v-for` over some checkboxes and field arrays.\r\n            // also if the group no longer exist we can assume this group was the last one that controlled it\r\n            const isSameGroup = isGroup && (fieldInstance === fieldsByPath.value[fieldName] || !fieldsByPath.value[fieldName]);\r\n            // group field that still has a dangling value, the field may exist or not after it was removed.\r\n            // This used to be handled in the useField composable but the form has better context on when it should/not happen.\r\n            // if it does belong to it that means the group still exists\r\n            // #3844\r\n            if (isSameGroup && Array.isArray(currentGroupValue) && !shouldKeepValue) {\r\n                const valueIdx = currentGroupValue.findIndex(i => isEqual(i, unref(field.checkedValue)));\r\n                if (valueIdx > -1) {\r\n                    const newVal = [...currentGroupValue];\r\n                    newVal.splice(valueIdx, 1);\r\n                    setFieldValue(fieldName, newVal, { force: true });\r\n                }\r\n            }\r\n            // Field was removed entirely, we should unset its path\r\n            // #3384\r\n            if (!fieldExists(fieldName)) {\r\n                setFieldError(fieldName, undefined);\r\n                // Checks if the field was configured to be unset during unmount or not\r\n                // Checks both the form-level config and field-level one\r\n                // Field has the priority if it is set, otherwise it goes to the form settings\r\n                if (shouldKeepValue) {\r\n                    return;\r\n                }\r\n                if (isGroup && !isEmptyContainer(getFromPath(formValues, fieldName))) {\r\n                    return;\r\n                }\r\n                unsetPath(formValues, fieldName);\r\n            }\r\n        });\r\n    }\r\n    async function validate(opts) {\r\n        mutateAllFields(f => (f.meta.validated = true));\r\n        if (formCtx.validateSchema) {\r\n            return formCtx.validateSchema((opts === null || opts === void 0 ? void 0 : opts.mode) || 'force');\r\n        }\r\n        // No schema, each field is responsible to validate itself\r\n        const validations = await Promise.all(Object.values(fieldsByPath.value).map(field => {\r\n            const fieldInstance = Array.isArray(field) ? field[0] : field;\r\n            if (!fieldInstance) {\r\n                return Promise.resolve({ key: '', valid: true, errors: [] });\r\n            }\r\n            return fieldInstance.validate(opts).then((result) => {\r\n                return {\r\n                    key: unref(fieldInstance.name),\r\n                    valid: result.valid,\r\n                    errors: result.errors,\r\n                };\r\n            });\r\n        }));\r\n        const results = {};\r\n        const errors = {};\r\n        for (const validation of validations) {\r\n            results[validation.key] = {\r\n                valid: validation.valid,\r\n                errors: validation.errors,\r\n            };\r\n            if (validation.errors.length) {\r\n                errors[validation.key] = validation.errors[0];\r\n            }\r\n        }\r\n        return {\r\n            valid: validations.every(r => r.valid),\r\n            results,\r\n            errors,\r\n        };\r\n    }\r\n    async function validateField(field) {\r\n        const fieldInstance = fieldsByPath.value[field];\r\n        if (!fieldInstance) {\r\n            warn$1(`field with name ${field} was not found`);\r\n            return Promise.resolve({ errors: [], valid: true });\r\n        }\r\n        if (Array.isArray(fieldInstance)) {\r\n            return fieldInstance.map(f => f.validate())[0];\r\n        }\r\n        return fieldInstance.validate();\r\n    }\r\n    function handleSubmit(fn, onValidationError) {\r\n        return function submissionHandler(e) {\r\n            if (e instanceof Event) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n            }\r\n            // Touch all fields\r\n            setTouched(keysOf(fieldsByPath.value).reduce((acc, field) => {\r\n                acc[field] = true;\r\n                return acc;\r\n            }, {}));\r\n            isSubmitting.value = true;\r\n            submitCount.value++;\r\n            return validate()\r\n                .then(result => {\r\n                if (result.valid && typeof fn === 'function') {\r\n                    return fn(klona(formValues), {\r\n                        evt: e,\r\n                        setErrors,\r\n                        setFieldError,\r\n                        setTouched,\r\n                        setFieldTouched,\r\n                        setValues,\r\n                        setFieldValue,\r\n                        resetForm,\r\n                    });\r\n                }\r\n                if (!result.valid && typeof onValidationError === 'function') {\r\n                    onValidationError({\r\n                        values: klona(formValues),\r\n                        evt: e,\r\n                        errors: result.errors,\r\n                        results: result.results,\r\n                    });\r\n                }\r\n            })\r\n                .then(returnVal => {\r\n                isSubmitting.value = false;\r\n                return returnVal;\r\n            }, err => {\r\n                isSubmitting.value = false;\r\n                // re-throw the err so it doesn't go silent\r\n                throw err;\r\n            });\r\n        };\r\n    }\r\n    function setFieldInitialValue(path, value) {\r\n        setInPath(initialValues.value, path, klona(value));\r\n    }\r\n    function unsetInitialValue(path) {\r\n        unsetPath(initialValues.value, path);\r\n    }\r\n    /**\r\n     * Sneaky function to set initial field values\r\n     */\r\n    function stageInitialValue(path, value, updateOriginal = false) {\r\n        setInPath(formValues, path, value);\r\n        setFieldInitialValue(path, value);\r\n        if (updateOriginal && !(opts === null || opts === void 0 ? void 0 : opts.initialValues)) {\r\n            setInPath(originalInitialValues.value, path, klona(value));\r\n        }\r\n    }\r\n    async function _validateSchema() {\r\n        const schemaValue = unref(schema);\r\n        if (!schemaValue) {\r\n            return { valid: true, results: {}, errors: {} };\r\n        }\r\n        const formResult = isYupValidator(schemaValue)\r\n            ? await validateYupSchema(schemaValue, formValues)\r\n            : await validateObjectSchema(schemaValue, formValues, {\r\n                names: fieldNames.value,\r\n                bailsMap: fieldBailsMap.value,\r\n            });\r\n        return formResult;\r\n    }\r\n    const submitForm = handleSubmit((_, { evt }) => {\r\n        if (isFormSubmitEvent(evt)) {\r\n            evt.target.submit();\r\n        }\r\n    });\r\n    // Trigger initial validation\r\n    onMounted(() => {\r\n        if (opts === null || opts === void 0 ? void 0 : opts.initialErrors) {\r\n            setErrors(opts.initialErrors);\r\n        }\r\n        if (opts === null || opts === void 0 ? void 0 : opts.initialTouched) {\r\n            setTouched(opts.initialTouched);\r\n        }\r\n        // if validate on mount was enabled\r\n        if (opts === null || opts === void 0 ? void 0 : opts.validateOnMount) {\r\n            validate();\r\n            return;\r\n        }\r\n        // otherwise run initial silent validation through schema if available\r\n        // the useField should skip their own silent validation if a yup schema is present\r\n        if (formCtx.validateSchema) {\r\n            formCtx.validateSchema('silent');\r\n        }\r\n    });\r\n    if (isRef(schema)) {\r\n        watch(schema, () => {\r\n            var _a;\r\n            (_a = formCtx.validateSchema) === null || _a === void 0 ? void 0 : _a.call(formCtx, 'validated-only');\r\n        });\r\n    }\r\n    // Provide injections\r\n    provide(FormContextKey, formCtx);\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        registerFormWithDevTools(formCtx);\r\n        watch(() => (Object.assign(Object.assign({ errors: errorBag.value }, meta.value), { values: formValues, isSubmitting: isSubmitting.value, submitCount: submitCount.value })), refreshInspector, {\r\n            deep: true,\r\n        });\r\n    }\r\n    return {\r\n        errors,\r\n        meta,\r\n        values: formValues,\r\n        isSubmitting,\r\n        submitCount,\r\n        validate,\r\n        validateField,\r\n        handleReset: () => resetForm(),\r\n        resetForm,\r\n        handleSubmit,\r\n        submitForm,\r\n        setFieldError,\r\n        setErrors,\r\n        setFieldValue,\r\n        setValues,\r\n        setFieldTouched,\r\n        setTouched,\r\n        useFieldModel,\r\n    };\r\n}\r\n/**\r\n * Manages form meta aggregation\r\n */\r\nfunction useFormMeta(fieldsByPath, currentValues, initialValues, errors) {\r\n    const MERGE_STRATEGIES = {\r\n        touched: 'some',\r\n        pending: 'some',\r\n        valid: 'every',\r\n    };\r\n    const isDirty = computed(() => {\r\n        return !isEqual(currentValues, unref(initialValues));\r\n    });\r\n    function calculateFlags() {\r\n        const fields = Object.values(fieldsByPath.value).flat(1).filter(Boolean);\r\n        return keysOf(MERGE_STRATEGIES).reduce((acc, flag) => {\r\n            const mergeMethod = MERGE_STRATEGIES[flag];\r\n            acc[flag] = fields[mergeMethod](field => field.meta[flag]);\r\n            return acc;\r\n        }, {});\r\n    }\r\n    const flags = reactive(calculateFlags());\r\n    watchEffect(() => {\r\n        const value = calculateFlags();\r\n        flags.touched = value.touched;\r\n        flags.valid = value.valid;\r\n        flags.pending = value.pending;\r\n    });\r\n    return computed(() => {\r\n        return Object.assign(Object.assign({ initialValues: unref(initialValues) }, flags), { valid: flags.valid && !keysOf(errors.value).length, dirty: isDirty.value });\r\n    });\r\n}\r\n/**\r\n * Manages the initial values prop\r\n */\r\nfunction useFormInitialValues(fields, formValues, providedValues) {\r\n    // these are the mutable initial values as the fields are mounted/unmounted\r\n    const initialValues = ref(klona(unref(providedValues)) || {});\r\n    // these are the original initial value as provided by the user initially, they don't keep track of conditional fields\r\n    // this is important because some conditional fields will overwrite the initial values for other fields who had the same name\r\n    // like array fields, any push/insert operation will overwrite the initial values because they \"create new fields\"\r\n    // so these are the values that the reset function should use\r\n    // these only change when the user explicitly chanegs the initial values or when the user resets them with new values.\r\n    const originalInitialValues = ref(klona(unref(providedValues)) || {});\r\n    function setInitialValues(values, updateFields = false) {\r\n        initialValues.value = klona(values);\r\n        originalInitialValues.value = klona(values);\r\n        if (!updateFields) {\r\n            return;\r\n        }\r\n        // update the pristine non-touched fields\r\n        // those are excluded because it's unlikely you want to change the form values using initial values\r\n        // we mostly watch them for API population or newly inserted fields\r\n        // if the user API is taking too much time before user interaction they should consider disabling or hiding their inputs until the values are ready\r\n        keysOf(fields.value).forEach(fieldPath => {\r\n            const field = fields.value[fieldPath];\r\n            const wasTouched = Array.isArray(field) ? field.some(f => f.meta.touched) : field === null || field === void 0 ? void 0 : field.meta.touched;\r\n            if (!field || wasTouched) {\r\n                return;\r\n            }\r\n            const newValue = getFromPath(initialValues.value, fieldPath);\r\n            setInPath(formValues, fieldPath, klona(newValue));\r\n        });\r\n    }\r\n    if (isRef(providedValues)) {\r\n        watch(providedValues, value => {\r\n            setInitialValues(value, true);\r\n        }, {\r\n            deep: true,\r\n        });\r\n    }\r\n    return {\r\n        initialValues,\r\n        originalInitialValues,\r\n        setInitialValues,\r\n    };\r\n}\r\nfunction useErrorBag(initialErrors) {\r\n    const errorBag = ref({});\r\n    function normalizeErrorItem(message) {\r\n        return Array.isArray(message) ? message : message ? [message] : [];\r\n    }\r\n    /**\r\n     * Manually sets an error message on a specific field\r\n     */\r\n    function setFieldErrorBag(field, message) {\r\n        if (!message) {\r\n            delete errorBag.value[field];\r\n            return;\r\n        }\r\n        errorBag.value[field] = normalizeErrorItem(message);\r\n    }\r\n    /**\r\n     * Sets errors for the fields specified in the object\r\n     */\r\n    function setErrorBag(fields) {\r\n        errorBag.value = keysOf(fields).reduce((acc, key) => {\r\n            const message = fields[key];\r\n            if (message) {\r\n                acc[key] = normalizeErrorItem(message);\r\n            }\r\n            return acc;\r\n        }, {});\r\n    }\r\n    if (initialErrors) {\r\n        setErrorBag(initialErrors);\r\n    }\r\n    return {\r\n        errorBag,\r\n        setErrorBag,\r\n        setFieldErrorBag,\r\n    };\r\n}\n\nconst FormImpl = defineComponent({\r\n    name: 'Form',\r\n    inheritAttrs: false,\r\n    props: {\r\n        as: {\r\n            type: String,\r\n            default: 'form',\r\n        },\r\n        validationSchema: {\r\n            type: Object,\r\n            default: undefined,\r\n        },\r\n        initialValues: {\r\n            type: Object,\r\n            default: undefined,\r\n        },\r\n        initialErrors: {\r\n            type: Object,\r\n            default: undefined,\r\n        },\r\n        initialTouched: {\r\n            type: Object,\r\n            default: undefined,\r\n        },\r\n        validateOnMount: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n        onSubmit: {\r\n            type: Function,\r\n            default: undefined,\r\n        },\r\n        onInvalidSubmit: {\r\n            type: Function,\r\n            default: undefined,\r\n        },\r\n        keepValues: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n    },\r\n    setup(props, ctx) {\r\n        const initialValues = toRef(props, 'initialValues');\r\n        const validationSchema = toRef(props, 'validationSchema');\r\n        const keepValues = toRef(props, 'keepValues');\r\n        const { errors, values, meta, isSubmitting, submitCount, validate, validateField, handleReset, resetForm, handleSubmit, setErrors, setFieldError, setFieldValue, setValues, setFieldTouched, setTouched, } = useForm({\r\n            validationSchema: validationSchema.value ? validationSchema : undefined,\r\n            initialValues,\r\n            initialErrors: props.initialErrors,\r\n            initialTouched: props.initialTouched,\r\n            validateOnMount: props.validateOnMount,\r\n            keepValuesOnUnmount: keepValues,\r\n        });\r\n        const submitForm = handleSubmit((_, { evt }) => {\r\n            if (isFormSubmitEvent(evt)) {\r\n                evt.target.submit();\r\n            }\r\n        }, props.onInvalidSubmit);\r\n        const onSubmit = props.onSubmit ? handleSubmit(props.onSubmit, props.onInvalidSubmit) : submitForm;\r\n        function handleFormReset(e) {\r\n            if (isEvent(e)) {\r\n                // Prevent default form reset behavior\r\n                e.preventDefault();\r\n            }\r\n            handleReset();\r\n            if (typeof ctx.attrs.onReset === 'function') {\r\n                ctx.attrs.onReset();\r\n            }\r\n        }\r\n        function handleScopedSlotSubmit(evt, onSubmit) {\r\n            const onSuccess = typeof evt === 'function' && !onSubmit ? evt : onSubmit;\r\n            return handleSubmit(onSuccess, props.onInvalidSubmit)(evt);\r\n        }\r\n        function slotProps() {\r\n            return {\r\n                meta: meta.value,\r\n                errors: errors.value,\r\n                values: values,\r\n                isSubmitting: isSubmitting.value,\r\n                submitCount: submitCount.value,\r\n                validate,\r\n                validateField,\r\n                handleSubmit: handleScopedSlotSubmit,\r\n                handleReset,\r\n                submitForm,\r\n                setErrors,\r\n                setFieldError,\r\n                setFieldValue,\r\n                setValues,\r\n                setFieldTouched,\r\n                setTouched,\r\n                resetForm,\r\n            };\r\n        }\r\n        // expose these functions and methods as part of public API\r\n        ctx.expose({\r\n            setFieldError,\r\n            setErrors,\r\n            setFieldValue,\r\n            setValues,\r\n            setFieldTouched,\r\n            setTouched,\r\n            resetForm,\r\n            validate,\r\n            validateField,\r\n        });\r\n        return function renderForm() {\r\n            // avoid resolving the form component as itself\r\n            const tag = props.as === 'form' ? props.as : resolveDynamicComponent(props.as);\r\n            const children = normalizeChildren(tag, ctx, slotProps);\r\n            if (!props.as) {\r\n                return children;\r\n            }\r\n            // Attributes to add on a native `form` tag\r\n            const formAttrs = props.as === 'form'\r\n                ? {\r\n                    // Disables native validation as vee-validate will handle it.\r\n                    novalidate: true,\r\n                }\r\n                : {};\r\n            return h(tag, Object.assign(Object.assign(Object.assign({}, formAttrs), ctx.attrs), { onSubmit, onReset: handleFormReset }), children);\r\n        };\r\n    },\r\n});\r\nconst Form = FormImpl;\n\nfunction useFieldArray(arrayPath) {\r\n    const form = injectWithSelf(FormContextKey, undefined);\r\n    const fields = ref([]);\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    const noOp = () => { };\r\n    const noOpApi = {\r\n        fields,\r\n        remove: noOp,\r\n        push: noOp,\r\n        swap: noOp,\r\n        insert: noOp,\r\n        update: noOp,\r\n        replace: noOp,\r\n        prepend: noOp,\r\n        move: noOp,\r\n    };\r\n    if (!form) {\r\n        warn('FieldArray requires being a child of `<Form/>` or `useForm` being called before it. Array fields may not work correctly');\r\n        return noOpApi;\r\n    }\r\n    if (!unref(arrayPath)) {\r\n        warn('FieldArray requires a field path to be provided, did you forget to pass the `name` prop?');\r\n        return noOpApi;\r\n    }\r\n    const alreadyExists = form.fieldArrays.find(a => unref(a.path) === unref(arrayPath));\r\n    if (alreadyExists) {\r\n        return alreadyExists;\r\n    }\r\n    let entryCounter = 0;\r\n    function initFields() {\r\n        const currentValues = getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(arrayPath), []) || [];\r\n        fields.value = currentValues.map(createEntry);\r\n        updateEntryFlags();\r\n    }\r\n    initFields();\r\n    function updateEntryFlags() {\r\n        const fieldsLength = fields.value.length;\r\n        for (let i = 0; i < fieldsLength; i++) {\r\n            const entry = fields.value[i];\r\n            entry.isFirst = i === 0;\r\n            entry.isLast = i === fieldsLength - 1;\r\n        }\r\n    }\r\n    function createEntry(value) {\r\n        const key = entryCounter++;\r\n        const entry = {\r\n            key,\r\n            value: computed({\r\n                get() {\r\n                    const currentValues = getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(arrayPath), []) || [];\r\n                    const idx = fields.value.findIndex(e => e.key === key);\r\n                    return idx === -1 ? value : currentValues[idx];\r\n                },\r\n                set(value) {\r\n                    const idx = fields.value.findIndex(e => e.key === key);\r\n                    if (idx === -1) {\r\n                        warn(`Attempting to update a non-existent array item`);\r\n                        return;\r\n                    }\r\n                    update(idx, value);\r\n                },\r\n            }),\r\n            isFirst: false,\r\n            isLast: false,\r\n        };\r\n        return entry;\r\n    }\r\n    function remove(idx) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        if (!pathValue || !Array.isArray(pathValue)) {\r\n            return;\r\n        }\r\n        const newValue = [...pathValue];\r\n        newValue.splice(idx, 1);\r\n        form === null || form === void 0 ? void 0 : form.unsetInitialValue(pathName + `[${idx}]`);\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\r\n        fields.value.splice(idx, 1);\r\n        updateEntryFlags();\r\n    }\r\n    function push(value) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        const normalizedPathValue = isNullOrUndefined(pathValue) ? [] : pathValue;\r\n        if (!Array.isArray(normalizedPathValue)) {\r\n            return;\r\n        }\r\n        const newValue = [...normalizedPathValue];\r\n        newValue.push(value);\r\n        form === null || form === void 0 ? void 0 : form.stageInitialValue(pathName + `[${newValue.length - 1}]`, value);\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\r\n        fields.value.push(createEntry(value));\r\n        updateEntryFlags();\r\n    }\r\n    function swap(indexA, indexB) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        if (!Array.isArray(pathValue) || !(indexA in pathValue) || !(indexB in pathValue)) {\r\n            return;\r\n        }\r\n        const newValue = [...pathValue];\r\n        const newFields = [...fields.value];\r\n        // the old switcheroo\r\n        const temp = newValue[indexA];\r\n        newValue[indexA] = newValue[indexB];\r\n        newValue[indexB] = temp;\r\n        const tempEntry = newFields[indexA];\r\n        newFields[indexA] = newFields[indexB];\r\n        newFields[indexB] = tempEntry;\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\r\n        fields.value = newFields;\r\n        updateEntryFlags();\r\n    }\r\n    function insert(idx, value) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        if (!Array.isArray(pathValue) || pathValue.length < idx) {\r\n            return;\r\n        }\r\n        const newValue = [...pathValue];\r\n        const newFields = [...fields.value];\r\n        newValue.splice(idx, 0, value);\r\n        newFields.splice(idx, 0, createEntry(value));\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\r\n        fields.value = newFields;\r\n        updateEntryFlags();\r\n    }\r\n    function replace(arr) {\r\n        const pathName = unref(arrayPath);\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, arr);\r\n        initFields();\r\n    }\r\n    function update(idx, value) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        if (!Array.isArray(pathValue) || pathValue.length - 1 < idx) {\r\n            return;\r\n        }\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(`${pathName}[${idx}]`, value);\r\n    }\r\n    function prepend(value) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        const normalizedPathValue = isNullOrUndefined(pathValue) ? [] : pathValue;\r\n        if (!Array.isArray(normalizedPathValue)) {\r\n            return;\r\n        }\r\n        const newValue = [value, ...normalizedPathValue];\r\n        form === null || form === void 0 ? void 0 : form.stageInitialValue(pathName + `[${newValue.length - 1}]`, value);\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\r\n        fields.value.unshift(createEntry(value));\r\n        updateEntryFlags();\r\n    }\r\n    function move(oldIdx, newIdx) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        const newValue = isNullOrUndefined(pathValue) ? [] : [...pathValue];\r\n        if (!Array.isArray(pathValue) || !(oldIdx in pathValue) || !(newIdx in pathValue)) {\r\n            return;\r\n        }\r\n        const newFields = [...fields.value];\r\n        const movedItem = newFields[oldIdx];\r\n        newFields.splice(oldIdx, 1);\r\n        newFields.splice(newIdx, 0, movedItem);\r\n        const movedValue = newValue[oldIdx];\r\n        newValue.splice(oldIdx, 1);\r\n        newValue.splice(newIdx, 0, movedValue);\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\r\n        fields.value = newFields;\r\n        updateEntryFlags();\r\n    }\r\n    const fieldArrayCtx = {\r\n        fields,\r\n        remove,\r\n        push,\r\n        swap,\r\n        insert,\r\n        update,\r\n        replace,\r\n        prepend,\r\n        move,\r\n    };\r\n    form.fieldArrays.push(Object.assign({ path: arrayPath, reset: initFields }, fieldArrayCtx));\r\n    onBeforeUnmount(() => {\r\n        const idx = form.fieldArrays.findIndex(i => unref(i.path) === unref(arrayPath));\r\n        if (idx >= 0) {\r\n            form.fieldArrays.splice(idx, 1);\r\n        }\r\n    });\r\n    return fieldArrayCtx;\r\n}\n\nconst FieldArrayImpl = defineComponent({\r\n    name: 'FieldArray',\r\n    inheritAttrs: false,\r\n    props: {\r\n        name: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n    },\r\n    setup(props, ctx) {\r\n        const { push, remove, swap, insert, replace, update, prepend, move, fields } = useFieldArray(toRef(props, 'name'));\r\n        function slotProps() {\r\n            return {\r\n                fields: fields.value,\r\n                push,\r\n                remove,\r\n                swap,\r\n                insert,\r\n                update,\r\n                replace,\r\n                prepend,\r\n                move,\r\n            };\r\n        }\r\n        ctx.expose({\r\n            push,\r\n            remove,\r\n            swap,\r\n            insert,\r\n            update,\r\n            replace,\r\n            prepend,\r\n            move,\r\n        });\r\n        return () => {\r\n            const children = normalizeChildren(undefined, ctx, slotProps);\r\n            return children;\r\n        };\r\n    },\r\n});\r\nconst FieldArray = FieldArrayImpl;\n\nconst ErrorMessageImpl = defineComponent({\r\n    name: 'ErrorMessage',\r\n    props: {\r\n        as: {\r\n            type: String,\r\n            default: undefined,\r\n        },\r\n        name: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n    },\r\n    setup(props, ctx) {\r\n        const form = inject(FormContextKey, undefined);\r\n        const message = computed(() => {\r\n            return form === null || form === void 0 ? void 0 : form.errors.value[props.name];\r\n        });\r\n        function slotProps() {\r\n            return {\r\n                message: message.value,\r\n            };\r\n        }\r\n        return () => {\r\n            // Renders nothing if there are no messages\r\n            if (!message.value) {\r\n                return undefined;\r\n            }\r\n            const tag = (props.as ? resolveDynamicComponent(props.as) : props.as);\r\n            const children = normalizeChildren(tag, ctx, slotProps);\r\n            const attrs = Object.assign({ role: 'alert' }, ctx.attrs);\r\n            // If no tag was specified and there are children\r\n            // render the slot as is without wrapping it\r\n            if (!tag && (Array.isArray(children) || !children) && (children === null || children === void 0 ? void 0 : children.length)) {\r\n                return children;\r\n            }\r\n            // If no children in slot\r\n            // render whatever specified and fallback to a <span> with the message in it's contents\r\n            if ((Array.isArray(children) || !children) && !(children === null || children === void 0 ? void 0 : children.length)) {\r\n                return h(tag || 'span', attrs, message.value);\r\n            }\r\n            return h(tag, attrs, children);\r\n        };\r\n    },\r\n});\r\nconst ErrorMessage = ErrorMessageImpl;\n\nfunction useResetForm() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return function resetForm(state) {\r\n        if (!form) {\r\n            return;\r\n        }\r\n        return form.resetForm(state);\r\n    };\r\n}\n\n/**\r\n * If a field is dirty or not\r\n */\r\nfunction useIsFieldDirty(path) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    let field = path ? undefined : inject(FieldContextKey);\r\n    return computed(() => {\r\n        if (path) {\r\n            field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\r\n        }\r\n        if (!field) {\r\n            warn(`field with name ${unref(path)} was not found`);\r\n            return false;\r\n        }\r\n        return field.meta.dirty;\r\n    });\r\n}\n\n/**\r\n * If a field is touched or not\r\n */\r\nfunction useIsFieldTouched(path) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    let field = path ? undefined : inject(FieldContextKey);\r\n    return computed(() => {\r\n        if (path) {\r\n            field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\r\n        }\r\n        if (!field) {\r\n            warn(`field with name ${unref(path)} was not found`);\r\n            return false;\r\n        }\r\n        return field.meta.touched;\r\n    });\r\n}\n\n/**\r\n * If a field is validated and is valid\r\n */\r\nfunction useIsFieldValid(path) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    let field = path ? undefined : inject(FieldContextKey);\r\n    return computed(() => {\r\n        if (path) {\r\n            field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\r\n        }\r\n        if (!field) {\r\n            warn(`field with name ${unref(path)} was not found`);\r\n            return false;\r\n        }\r\n        return field.meta.valid;\r\n    });\r\n}\n\n/**\r\n * If the form is submitting or not\r\n */\r\nfunction useIsSubmitting() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        var _a;\r\n        return (_a = form === null || form === void 0 ? void 0 : form.isSubmitting.value) !== null && _a !== void 0 ? _a : false;\r\n    });\r\n}\n\n/**\r\n * Validates a single field\r\n */\r\nfunction useValidateField(path) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    let field = path ? undefined : inject(FieldContextKey);\r\n    return function validateField() {\r\n        if (path) {\r\n            field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\r\n        }\r\n        if (!field) {\r\n            warn(`field with name ${unref(path)} was not found`);\r\n            return Promise.resolve({\r\n                errors: [],\r\n                valid: true,\r\n            });\r\n        }\r\n        return field.validate();\r\n    };\r\n}\n\n/**\r\n * If the form is dirty or not\r\n */\r\nfunction useIsFormDirty() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        var _a;\r\n        return (_a = form === null || form === void 0 ? void 0 : form.meta.value.dirty) !== null && _a !== void 0 ? _a : false;\r\n    });\r\n}\n\n/**\r\n * If the form is touched or not\r\n */\r\nfunction useIsFormTouched() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        var _a;\r\n        return (_a = form === null || form === void 0 ? void 0 : form.meta.value.touched) !== null && _a !== void 0 ? _a : false;\r\n    });\r\n}\n\n/**\r\n * If the form has been validated and is valid\r\n */\r\nfunction useIsFormValid() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        var _a;\r\n        return (_a = form === null || form === void 0 ? void 0 : form.meta.value.valid) !== null && _a !== void 0 ? _a : false;\r\n    });\r\n}\n\n/**\r\n * Validate multiple fields\r\n */\r\nfunction useValidateForm() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return function validateField() {\r\n        if (!form) {\r\n            return Promise.resolve({ results: {}, errors: {}, valid: true });\r\n        }\r\n        return form.validate();\r\n    };\r\n}\n\n/**\r\n * The number of form's submission count\r\n */\r\nfunction useSubmitCount() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        var _a;\r\n        return (_a = form === null || form === void 0 ? void 0 : form.submitCount.value) !== null && _a !== void 0 ? _a : 0;\r\n    });\r\n}\n\n/**\r\n * Gives access to a field's current value\r\n */\r\nfunction useFieldValue(path) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    // We don't want to use self injected context as it doesn't make sense\r\n    const field = path ? undefined : inject(FieldContextKey);\r\n    return computed(() => {\r\n        if (path) {\r\n            return getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(path));\r\n        }\r\n        return unref(field === null || field === void 0 ? void 0 : field.value);\r\n    });\r\n}\n\n/**\r\n * Gives access to a form's values\r\n */\r\nfunction useFormValues() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        return (form === null || form === void 0 ? void 0 : form.values) || {};\r\n    });\r\n}\n\n/**\r\n * Gives access to all form errors\r\n */\r\nfunction useFormErrors() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        return ((form === null || form === void 0 ? void 0 : form.errors.value) || {});\r\n    });\r\n}\n\n/**\r\n * Gives access to a single field error\r\n */\r\nfunction useFieldError(path) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    // We don't want to use self injected context as it doesn't make sense\r\n    const field = path ? undefined : inject(FieldContextKey);\r\n    return computed(() => {\r\n        if (path) {\r\n            return form === null || form === void 0 ? void 0 : form.errors.value[unref(path)];\r\n        }\r\n        return field === null || field === void 0 ? void 0 : field.errorMessage.value;\r\n    });\r\n}\n\nfunction useSubmitForm(cb) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    const onSubmit = form ? form.handleSubmit(cb) : undefined;\r\n    return function submitForm(e) {\r\n        if (!onSubmit) {\r\n            return;\r\n        }\r\n        return onSubmit(e);\r\n    };\r\n}\n\nexport { ErrorMessage, Field, FieldArray, FieldContextKey, Form, FormContextKey, IS_ABSENT, configure, defineRule, useField, useFieldArray, useFieldError, useFieldValue, useForm, useFormErrors, useFormValues, useIsFieldDirty, useIsFieldTouched, useIsFieldValid, useIsFormDirty, useIsFormTouched, useIsFormValid, useIsSubmitting, useResetForm, useSubmitCount, useSubmitForm, useValidateField, useValidateForm, validate };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}