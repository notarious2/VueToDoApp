{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, vModelCheckbox as _vModelCheckbox, withDirectives as _withDirectives, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, withCtx as _withCtx, createVNode as _createVNode, vModelText as _vModelText, withModifiers as _withModifiers, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-07345ca4\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = {\n  class: \"container\"\n};\nconst _hoisted_2 = {\n  class: \"list-item\"\n};\nconst _hoisted_3 = {\n  class: \"checkbox\"\n};\nconst _hoisted_4 = {\n  class: \"text\"\n};\nconst _hoisted_5 = [\"id\", \"onUpdate:modelValue\", \"onClick\"];\nconst _hoisted_6 = [\"for\"];\n\nconst _hoisted_7 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"svg\", {\n  viewBox: \"0 0 100 100\",\n  height: \"50\",\n  width: \"50\"\n}, [/*#__PURE__*/_createElementVNode(\"rect\", {\n  x: \"30\",\n  y: \"20\",\n  width: \"50\",\n  height: \"50\",\n  stroke: \"black\",\n  fill: \"none\"\n}), /*#__PURE__*/_createElementVNode(\"g\", {\n  transform: \"translate(0,-952.36216)\",\n  id: \"layer1\"\n}, [/*#__PURE__*/_createElementVNode(\"path\", {\n  id: \"path4146\",\n  d: \"m 55,978 c -73,19 46,71 15,2 C 60,959 13,966 30,1007 c 12,30 61,13 46,-23\",\n  fill: \"none\",\n  stroke: \"black\",\n  \"stroke-width\": \"4\",\n  class: \"path1\"\n})])], -1\n/* HOISTED */\n));\n\nconst _hoisted_8 = [\"onClick\"];\n\nconst _hoisted_9 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"a\", {\n  class: \"close\"\n}, null, -1\n/* HOISTED */\n));\n\nconst _hoisted_10 = [\"onSubmit\"];\n\nconst _hoisted_11 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", null, \"text \", -1\n/* HOISTED */\n));\n\nconst _hoisted_12 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"button\", null, \"add task\", -1\n/* HOISTED */\n));\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"h1\", null, _toDisplayString($setup.date)), _createVNode($setup[\"draggable\"], {\n    list: $setup.myArray,\n    \"item-key\": \"id\",\n    onChange: $setup.updateList\n  }, {\n    item: _withCtx(({\n      element\n    }) => [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"p\", _hoisted_4, _toDisplayString(element.id) + \" \" + _toDisplayString(element.name), 1\n    /* TEXT */\n    ), _withDirectives(_createElementVNode(\"input\", {\n      type: \"checkbox\",\n      class: \"check\",\n      id: element.id,\n      \"onUpdate:modelValue\": $event => element.completed = $event,\n      onClick: $event => $setup.checkUncheck(element)\n    }, null, 8\n    /* PROPS */\n    , _hoisted_5), [[_vModelCheckbox, element.completed]]), _createElementVNode(\"label\", {\n      for: element.id,\n      class: \"label\"\n    }, [_createCommentVNode(\" TO-DO TEXT \"), _hoisted_7, _createCommentVNode(\" DELETE BUTTON IF TASK IS COMPLETED \"), element.completed === true ? (_openBlock(), _createElementBlock(\"button\", {\n      key: 0,\n      onClick: $event => $setup.deleteTask(element)\n    }, \" x \", 8\n    /* PROPS */\n    , _hoisted_8)) : _createCommentVNode(\"v-if\", true)], 8\n    /* PROPS */\n    , _hoisted_6), _hoisted_9])])]),\n    _: 1\n    /* STABLE */\n\n  }, 8\n  /* PROPS */\n  , [\"list\"]), _createElementVNode(\"form\", {\n    onSubmit: _withModifiers($setup.addTask, [\"prevent\"])\n  }, [_hoisted_11, _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.task = $event),\n    type: \"text\"\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, $setup.task]]), _hoisted_12], 40\n  /* PROPS, HYDRATE_EVENTS */\n  , _hoisted_10)]);\n}","map":{"version":3,"mappings":";;;;;EACOA,KAAK,EAAC;;;EAIAA,KAAK,EAAC;;;EACJA,KAAK,EAAC;;;EACNA,KAAK,EAAC;;;;;gEAUPC,oBAmBM,KAnBN,EAmBM;EAnBDC,OAAO,EAAC,aAmBP;EAnBqBC,MAAM,EAAC,IAmB5B;EAnBiCC,KAAK,EAAC;AAmBvC,CAnBN,gBACEH,oBAOE,MAPF,EAOE;EANAI,CAAC,EAAC,IAMF;EALAC,CAAC,EAAC,IAKF;EAJAF,KAAK,EAAC,IAIN;EAHAD,MAAM,EAAC,IAGP;EAFAI,MAAM,EAAC,OAEP;EADAC,IAAI,EAAC;AACL,CAPF,gBAQAP,oBASI,GATJ,EASI;EATDQ,SAAS,EAAC,yBAST;EATmCC,EAAE,EAAC;AAStC,CATJ,gBACET,oBAOE,MAPF,EAOE;EANAS,EAAE,EAAC,UAMH;EALAC,CAAC,EAAC,2EAKF;EAJAH,IAAI,EAAC,MAIL;EAHAD,MAAM,EAAC,OAGP;EAFA,gBAAa,GAEb;EADAP,KAAK,EAAC;AACN,CAPF,EADF,EATF;;AAAA;;;;gEA4BFC,oBAAqB,GAArB,EAAqB;EAAlBD,KAAK,EAAC;AAAY,CAArB,EAAgB,IAAhB,EAAgB;AAAA;AAAhB;;;;iEAMNC,oBAAoB,OAApB,EAAoB,IAApB,EAAO,OAAP,EAAY;AAAA;AAAZ;;iEAEAA,oBAAyB,QAAzB,EAAyB,IAAzB,EAAQ,UAAR,EAAgB;AAAA;AAAhB;;;uBApDJW,oBAsDM,KAtDN,cAsDM,CArDJX,oBAAmB,IAAnB,EAAmB,IAAnB,EAAmBY,iBAAZC,WAAY,CAAnB,CAqDI,EApDJC,aA8CYD,mBA9CZ,EA8CY;IA9CAE,IAAI,EAAEF,cA8CN;IA9Ce,YAAS,IA8CxB;IA9C8BG,QAAM,EAAEH;EA8CtC,CA9CZ;IACaI,IAAI,WACb,CA0CM;MA3CWC;IA2CX,CA1CN,KADwB,CACxBlB,oBA0CM,KA1CN,cA0CM,CAzCJA,oBAwCM,KAxCN,cAwCM,CAvCJA,oBAAuD,GAAvD,cAAuDY,iBAApCM,OAAO,CAACT,EAA4B,IAAvB,GAAuB,GAAtBG,iBAAGM,OAAO,CAACC,IAAX,CAAjC,EAAgD;IAAA;IAAhD,CAuCI,kBAtCJnB,oBAME,OANF,EAME;MALAoB,IAAI,EAAC,UAKL;MAJArB,KAAK,EAAC,OAIN;MAHCU,EAAE,EAAES,OAAO,CAACT,EAGb;uCAFSS,OAAO,CAACG,YAASC,MAE1B;MADCC,OAAK,YAAEV,oBAAaK,OAAb;IACR,CANF;;IAAA,kCAIWA,OAAO,CAACG,YAkCf,EA/BJrB,oBA6BQ,OA7BR,EA6BQ;MA7BAwB,GAAG,EAAEN,OAAO,CAACT,EA6Bb;MA7BiBV,KAAK,EAAC;IA6BvB,CA7BR,GACE0B,qCACAC,YAoBAD,6DAGQP,OAAO,CAACG,SAAR,KAAiB,sBAFzBV,oBAKS,QALT,EAKS;YAAA;MAJNY,OAAK,YAAEV,kBAAWK,OAAX;IAID,CALT,EAGC,KAHD,EAKA;IAAA;IALA,EAKAS,UALA,uCAvBF;;IAAA,aA+BI,EADJC,UACI,CAxCN,CAyCI,CA1CN,CADwB,CAAX;;;;GADjB;;EAAA,WAoDI,EALJ5B,oBAIO,MAJP,EAIO;IAJA6B,QAAM,iBAAUhB,cAAV,EAAiB,WAAjB;EAIN,CAJP,GACEiB,6BACA9B,oBAAoC,OAApC,EAAoC;+DAApBa,cAAIS,OAAgB;IAAdF,IAAI,EAAC;EAAS,CAApC;;EAAA,kBAAgBP,gBAChBkB,YAHF;;EAAA,cAKI,CAtDN","names":["class","_createElementVNode","viewBox","height","width","x","y","stroke","fill","transform","id","d","_createElementBlock","_toDisplayString","$setup","_createVNode","list","onChange","item","element","name","type","completed","$event","onClick","for","_createCommentVNode","_hoisted_7","_hoisted_8","_hoisted_9","onSubmit","_hoisted_11","_hoisted_12"],"sourceRoot":"","sources":["C:\\Users\\notar\\Desktop\\Udemy\\todo_front\\src\\pages\\TasksTemplate2.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <h1>{{ date }}</h1>\r\n    <draggable :list=\"myArray\" item-key=\"id\" @change=\"updateList\">\r\n      <template #item=\"{ element }\">\r\n        <div class=\"list-item\">\r\n          <div class=\"checkbox\">\r\n            <p class=\"text\">{{ element.id }} {{ element.name }}</p>\r\n            <input\r\n              type=\"checkbox\"\r\n              class=\"check\"\r\n              :id=\"element.id\"\r\n              v-model=\"element.completed\"\r\n              @click=\"checkUncheck(element)\"\r\n            />\r\n            <label :for=\"element.id\" class=\"label\">\r\n              <!-- TO-DO TEXT -->\r\n              <svg viewBox=\"0 0 100 100\" height=\"50\" width=\"50\">\r\n                <rect\r\n                  x=\"30\"\r\n                  y=\"20\"\r\n                  width=\"50\"\r\n                  height=\"50\"\r\n                  stroke=\"black\"\r\n                  fill=\"none\"\r\n                />\r\n                <g transform=\"translate(0,-952.36216)\" id=\"layer1\">\r\n                  <path\r\n                    id=\"path4146\"\r\n                    d=\"m 55,978 c -73,19 46,71 15,2 C 60,959 13,966 30,1007 c 12,30 61,13 46,-23\"\r\n                    fill=\"none\"\r\n                    stroke=\"black\"\r\n                    stroke-width=\"4\"\r\n                    class=\"path1\"\r\n                  />\r\n                </g>\r\n              </svg>\r\n              <!-- DELETE BUTTON IF TASK IS COMPLETED -->\r\n              <button\r\n                @click=\"deleteTask(element)\"\r\n                v-if=\"element.completed === true\"\r\n              >\r\n                x\r\n              </button>\r\n            </label>\r\n            <a class=\"close\"></a>\r\n          </div>\r\n        </div>\r\n      </template>\r\n    </draggable>\r\n    <form @submit.prevent=\"addTask\">\r\n      <label>text </label>\r\n      <input v-model=\"task\" type=\"text\" />\r\n      <button>add task</button>\r\n    </form>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { reactive, ref } from \"vue\";\r\nimport draggable from \"vuedraggable\";\r\n\r\nconst task = ref();\r\n\r\nconst date = \"1/1/2022\";\r\n\r\nconst myArray = reactive([\r\n  { name: \"AAA\", id: 1, completed: true },\r\n  { name: \"BBB\", id: 2, completed: false },\r\n  { name: \"CCC\", id: 3, completed: false },\r\n  { name: \"DDD\", id: 4, completed: true },\r\n]);\r\n\r\nfunction addTask() {\r\n  myArray.push({\r\n    name: task.value,\r\n    id: myArray.length + 1,\r\n    checked: false,\r\n  });\r\n  task.value = \"\";\r\n}\r\n// update tasks index/id on change - on drag\r\nfunction updateList() {\r\n  myArray.forEach((element, index) => {\r\n    myArray[index].id = index + 1;\r\n  });\r\n}\r\n\r\n// Checking or unchecking specific object in an array\r\nfunction checkUncheck(element) {\r\n  let index = myArray.indexOf(element);\r\n  myArray[index].completed = !myArray[index].completed;\r\n  console.log(myArray);\r\n}\r\n\r\nfunction deleteTask(element) {\r\n  let index = myArray.indexOf(element);\r\n  myArray.splice(index, 1);\r\n  console.log(myArray);\r\n  updateList();\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nh1 {\r\n  text-align: left;\r\n}\r\nbutton {\r\n  position: fixed;\r\n  margin-top: 10px;\r\n}\r\n.checkbox {\r\n  display: flex;\r\n}\r\n\r\n/* .label {\r\n  display: flex;\r\n} */\r\n\r\n.container {\r\n  background-color: beige;\r\n  width: 50%;\r\n}\r\n\r\n.list-item {\r\n  background-color: blanchedalmond;\r\n  padding: 2px 2px;\r\n  margin: 2px 2px;\r\n  width: 80%;\r\n  position: relative;\r\n}\r\n/* CHECKBOX RELATED STYLING */\r\n.checkbox:not(:last-child) {\r\n  border-bottom: 2px solid white;\r\n}\r\n.check {\r\n  /* width: 50px;\r\n  height: 50px; */\r\n  position: relative;\r\n  opacity: 0;\r\n}\r\n\r\n.path1 {\r\n  stroke-dasharray: 400;\r\n  stroke-dashoffset: 400;\r\n  transition: 0.5s all;\r\n}\r\n\r\n.check:checked + label svg g path {\r\n  stroke-dashoffset: 0;\r\n}\r\n\r\n/* CLOSE BUTTON */\r\n.close {\r\n  position: absolute;\r\n  right: 32px;\r\n  top: 32px;\r\n  width: 32px;\r\n  height: 32px;\r\n  opacity: 0.3;\r\n}\r\n.close:hover {\r\n  opacity: 1;\r\n}\r\n.close:before,\r\n.close:after {\r\n  /* position: absolute; */\r\n  /* left: 15px; */\r\n  content: \" \";\r\n  height: 33px;\r\n  width: 2px;\r\n  background-color: #333;\r\n}\r\n.close:before {\r\n  transform: rotate(45deg);\r\n}\r\n.close:after {\r\n  transform: rotate(-45deg);\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}