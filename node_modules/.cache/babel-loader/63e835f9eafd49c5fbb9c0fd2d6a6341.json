{"ast":null,"code":"import { defineComponent, h } from 'vue';\nimport { Calendar } from '@fullcalendar/core';\nimport { OPTION_IS_COMPLEX } from './options';\nimport { shallowCopy, mapHash } from './utils';\nimport { wrapVDomGenerator, createVueContentTypePlugin } from './custom-content-type';\nconst FullCalendar = defineComponent({\n  props: {\n    options: Object\n  },\n  data: initData,\n\n  render() {\n    return h('div', {\n      // when renderId is changed, Vue will trigger a real-DOM async rerender, calling beforeUpdate/updated\n      attrs: {\n        'data-fc-render-id': this.renderId\n      }\n    });\n  },\n\n  mounted() {\n    // store internal data (slotOptions, calendar)\n    // https://github.com/vuejs/vue/issues/1988#issuecomment-163013818\n    this.slotOptions = mapHash(this.$slots, wrapVDomGenerator); // needed for buildOptions\n\n    let calendarOptions = this.buildOptions(this.options, this.$.appContext);\n    let calendar = new Calendar(this.$el, calendarOptions);\n    this.calendar = calendar;\n    calendar.render();\n  },\n\n  methods: {\n    getApi,\n    buildOptions\n  },\n\n  beforeUpdate() {\n    this.getApi().resumeRendering(); // the watcher handlers paused it\n  },\n\n  beforeUnmount() {\n    this.getApi().destroy();\n  },\n\n  watch: buildWatchers()\n});\nexport default FullCalendar;\n\nfunction initData() {\n  return {\n    renderId: 0\n  };\n}\n\nfunction buildOptions(suppliedOptions, appContext) {\n  suppliedOptions = suppliedOptions || {};\n  return { ...this.slotOptions,\n    ...suppliedOptions,\n    plugins: (suppliedOptions.plugins || []).concat([createVueContentTypePlugin(appContext)])\n  };\n}\n\nfunction getApi() {\n  return this.calendar;\n}\n\nfunction buildWatchers() {\n  let watchers = {\n    // watches changes of ALL options and their nested objects,\n    // but this is only a means to be notified of top-level non-complex options changes.\n    options: {\n      deep: true,\n\n      handler(options) {\n        let calendar = this.getApi();\n        calendar.pauseRendering();\n        let calendarOptions = this.buildOptions(options, this.$.appContext);\n        calendar.resetOptions(calendarOptions);\n        this.renderId++; // will queue a rerender\n      }\n\n    }\n  };\n\n  for (let complexOptionName in OPTION_IS_COMPLEX) {\n    // handlers called when nested objects change\n    watchers[`options.${complexOptionName}`] = {\n      deep: true,\n\n      handler(val) {\n        // unfortunately the handler is called with undefined if new props were set, but the complex one wasn't ever set\n        if (val !== undefined) {\n          let calendar = this.getApi();\n          calendar.pauseRendering();\n          calendar.resetOptions({\n            // the only reason we shallow-copy is to trick FC into knowing there's a nested change.\n            // TODO: future versions of FC will more gracefully handle event option-changes that are same-reference.\n            [complexOptionName]: shallowCopy(val)\n          }, true);\n          this.renderId++; // will queue a rerender\n        }\n      }\n\n    };\n  }\n\n  return watchers;\n}","map":{"version":3,"mappings":"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","names":["defineComponent","h","Calendar","OPTION_IS_COMPLEX","shallowCopy","mapHash","wrapVDomGenerator","createVueContentTypePlugin","FullCalendar","props","options","Object","data","initData","render","attrs","renderId","mounted","slotOptions","$slots","calendarOptions","buildOptions","$","appContext","calendar","$el","methods","getApi","beforeUpdate","resumeRendering","beforeUnmount","destroy","watch","buildWatchers","suppliedOptions","plugins","concat","watchers","deep","handler","pauseRendering","resetOptions","complexOptionName","val","undefined"],"sourceRoot":"","sources":["../src/FullCalendar.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}