{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { reactive, ref, onMounted, onUpdated, computed } from \"vue\";\nimport draggable from \"vuedraggable\";\nimport ConfettiExplosion from \"vue-confetti-explosion\";\nimport { useAuthStore } from \"../components/store/userAuth.js\";\nimport authHeader from \"@/components/services/auth-header\";\nimport axios from \"axios\";\nimport Datepicker from \"@vuepic/vue-datepicker\";\nimport \"@vuepic/vue-datepicker/dist/main.css\";\nexport default {\n  __name: 'TasksTemplate',\n\n  setup(__props, {\n    expose\n  }) {\n    expose(); // eslint-disable-next-line\n\n    const date = ref(new Date().toISOString().slice(0, 10));\n    const invalidInput = ref(false);\n    const enteredText = ref(\"\"); // const dateCal = ref(new Date());\n\n    const editedText = ref(\"\"); // const tasksList = reactive([\n    //   {\n    //     date: \"2022-10-12\",\n    //     tasks: [\n    //       {\n    //         text: \"BBB\",\n    //         priority: 1,\n    //         completed: false,\n    //         editable: false,\n    //         task_id: \"X12\",\n    //       },\n    //       {\n    //         text: \"CCC\",\n    //         priority: 2,\n    //         completed: true,\n    //         editable: false,\n    //         task_id: \"X123\",\n    //       },\n    //       {\n    //         text: \"CCC\",\n    //         priority: 3,\n    //         completed: false,\n    //         editable: false,\n    //         task_id: \"X1124\",\n    //       },\n    //       {\n    //         text: \"DDD\",\n    //         priority: 4,\n    //         completed: true,\n    //         editable: false,\n    //         task_id: \"X1sd\",\n    //       },\n    //       {\n    //         text: \"AAA\",\n    //         priority: 6,\n    //         completed: false,\n    //         editable: false,\n    //         task_id: \"X1sda\",\n    //       },\n    //     ],\n    //   },\n    //   {\n    //     date: \"2022-10-13\",\n    //     tasks: [\n    //       {\n    //         text: \"Uno\",\n    //         priority: 1,\n    //         completed: false,\n    //         editable: false,\n    //         task_id: \"X12\",\n    //       },\n    //       {\n    //         text: \"Dos\",\n    //         priority: 2,\n    //         completed: true,\n    //         editable: false,\n    //         task_id: \"X123\",\n    //       },\n    //       {\n    //         text: \"Tres\",\n    //         priority: 3,\n    //         completed: false,\n    //         editable: false,\n    //         task_id: \"X1124\",\n    //       },\n    //       {\n    //         text: \"Quatro\",\n    //         priority: 4,\n    //         completed: true,\n    //         editable: false,\n    //         task_id: \"X1sd\",\n    //       },\n    //       {\n    //         text: \"Cinco\",\n    //         priority: 6,\n    //         completed: true,\n    //         editable: false,\n    //         task_id: \"X1sda\",\n    //       },\n    //     ],\n    //   },\n    // ]);\n    // Getting array for specific date\n\n    const tasksList = reactive([]);\n    const tasksSlice = ref([]);\n    const display = ref(false);\n\n    async function loadTasks() {\n      try {\n        const response = await axios.get(\"http://localhost:8000/task\", {\n          headers: authHeader()\n        }); // working with response\n        // console.log(response);\n\n        const result = response.data;\n        const newArray = reactive([]);\n        result.forEach(element => {\n          if (!newArray.filter(arr => arr[\"date\"] === element.date).length > 0) {\n            newArray.push({\n              date: element.date,\n              tasks: [{ ...element,\n                editable: false\n              }]\n            });\n          } else {\n            const idx = newArray.findIndex(arr => arr.date === element.date);\n            newArray[idx].tasks.push({ ...element,\n              editable: false\n            });\n          }\n        }); // tasksList.value = newArray;\n        // console.log(\"NEW ARRAY\", newArray);\n\n        return newArray;\n      } catch (err) {\n        console.log(err);\n      }\n    }\n\n    function loadOneTask(task_date) {\n      if (tasksList.value.filter(arr => arr[\"date\"] === task_date).length === 0) {\n        // eslint-disable-next-line\n        display.value = false;\n        tasksSlice.value = [];\n      } else {\n        // console.log(tasksList.value.filter((arr) => arr[\"date\"] === task_date)[0]);\n        tasksSlice.value = tasksList.value.filter(arr => arr[\"date\"] === task_date)[0];\n        display.value = true;\n      }\n    } // SEE IF LOGGED IN\n\n\n    const authStore = useAuthStore(); // const loggedIn = computed(() => authStore.isAuthenticated);\n    // console.log(\"LOGGED?\", loggedIn.value);\n    // Count the number of tasks\n\n    const notCompletedTasks = ref(null);\n    const completedTasks = ref(null);\n    const totalTasks = ref(null);\n\n    function countTasks() {\n      if (\"date\" in tasksSlice.value) {\n        totalTasks.value = tasksSlice.value.tasks.length;\n        notCompletedTasks.value = tasksSlice.value.tasks.filter(ob => !ob.completed).length;\n        completedTasks.value = totalTasks.value - notCompletedTasks.value;\n      } else {\n        totalTasks.value = null;\n        completedTasks.value = null;\n        notCompletedTasks.value = null;\n      }\n    }\n\n    if (tasksSlice.value.length > 0) {\n      notCompletedTasks.value = tasksSlice.value.tasks.filter(ob => !ob.completed).length;\n    }\n\n    onMounted(async () => {\n      tasksList.value = await loadTasks();\n      countTasks();\n      loadOneTask(date.value); // updateList();\n    });\n    onUpdated(() => {\n      countTasks();\n    }); // custom function to return date in DD month-long YYYY format\n\n    function formatDate(dateInput) {\n      return dateInput.toLocaleDateString(\"en-US\", {\n        month: \"long\",\n        year: \"numeric\",\n        day: \"numeric\"\n      });\n    } // clear invalid input - to be used at blur\n\n\n    function clearInvalidInput() {\n      invalidInput.value = false;\n    } // WORKING WITH CALENDAR\n\n\n    const handleDate = modelData => {\n      date.value = modelData.toISOString().slice(0, 10); // getting new slice based on picked date\n\n      tasksSlice.value = tasksList.filter(arr => arr[\"date\"] === date.value)[0];\n      display.value = true; // creating empty array if there no tasks on picked date\n\n      if (!tasksSlice.value) {\n        tasksSlice.value = ref([]);\n        display.value = false;\n      }\n\n      console.log(\"TASKLIST\", tasksList);\n      loadOneTask(date.value);\n    }; // listen to input inside edited paragraph text\n\n\n    function editText(event) {\n      editedText.value = event.target.innerText;\n    } // Apply above changes at blur\n\n\n    async function applyEditChanges(element) {\n      // No need to send HTTP request if Text is unchanged\n      if (editedText.value && editedText.value !== element.text) {\n        try {\n          await axios.patch(\"http://localhost:8000/task/update/\" + element.task_id, {\n            text: editedText.value\n          }, {\n            headers: authHeader()\n          }); // rerender ALL to-do tasks\n\n          tasksList.value = await loadTasks(); // get selected date's slice\n\n          loadOneTask(date.value);\n        } catch (err) {\n          console.log(err);\n        }\n      }\n    } // make SELECTED paragraph tag editable\n    // No link with backend here - elements become uneditable after refresh\n\n\n    function makeEditable(element) {\n      tasksSlice.value.tasks.forEach((el, idx) => {\n        if (element.task_id == el.task_id) {\n          tasksSlice.value.tasks[idx].editable = !tasksSlice.value.tasks[idx].editable;\n        }\n      });\n    } // adding the task - Post Request\n\n\n    async function addNewTask() {\n      // priority is 1 if there are not tasks on that day, else it is autoincremented\n      const priority = \"date\" in tasksSlice.value ? tasksSlice.value.tasks.length + 1 : 1;\n\n      if (enteredText.value !== \"\") {\n        try {\n          await axios.post(\"http://localhost:8000/task\", {\n            priority: priority,\n            date: date.value,\n            text: enteredText.value,\n            completed: false\n          }, {\n            headers: authHeader()\n          }); // rerender ALL to-do tasks\n\n          tasksList.value = await loadTasks(); // get selected date's slice\n\n          loadOneTask(date.value); //clear input field\n\n          enteredText.value = \"\";\n        } catch (err) {\n          console.log(err);\n        }\n      } else {\n        invalidInput.value = true;\n      }\n    } // update tasks index/id on change - on drag\n\n\n    function updateList() {\n      tasksSlice.value.tasks.forEach((element, index) => {\n        tasksSlice.value.tasks[index].priority = index + 1;\n      });\n    } // Checking or unchecking specific object in an array\n\n\n    async function checkUncheck(element) {\n      try {\n        await axios.patch(\"http://localhost:8000/task/update/\" + element.task_id, {\n          completed: element.completed ? false : true\n        }, {\n          headers: authHeader()\n        }); // rerender ALL to-do tasks\n\n        tasksList.value = await loadTasks(); // get selected date's slice\n\n        loadOneTask(date.value); //clear input field\n      } catch (err) {\n        console.log(err);\n      }\n\n      countTasks();\n    } // function checkUncheck(element) {\n    //   let index = tasksSlice.value.tasks.indexOf(element);\n    //   tasksSlice.value.tasks[index].completed =\n    //     !tasksSlice.value.tasks[index].completed;\n    //   countTasks();\n    // }\n    // Deleting specific task\n\n\n    async function deleteTask(element) {\n      try {\n        await axios.get(\"http://localhost:8000/task/delete/\" + element.task_id, {\n          headers: authHeader()\n        }); // rerender ALL to-do tasks\n\n        tasksList.value = await loadTasks(); // get selected date's slice\n\n        loadOneTask(date.value);\n      } catch (err) {\n        console.log(err);\n      }\n    } // function deleteTask(element) {\n    //   let index = tasksSlice.value.tasks.indexOf(element);\n    //   tasksSlice.value.tasks.splice(index, 1);\n    //   if (tasksSlice.value.tasks.length === 0) {\n    //     display.value = false;\n    //   }\n    //   updateList();\n    //   countTasks();\n    // }\n\n\n    const __returned__ = {\n      date,\n      invalidInput,\n      enteredText,\n      editedText,\n      tasksList,\n      tasksSlice,\n      display,\n      loadTasks,\n      loadOneTask,\n      authStore,\n      notCompletedTasks,\n      completedTasks,\n      totalTasks,\n      countTasks,\n      formatDate,\n      clearInvalidInput,\n      handleDate,\n      editText,\n      applyEditChanges,\n      makeEditable,\n      addNewTask,\n      updateList,\n      checkUncheck,\n      deleteTask,\n      reactive,\n      ref,\n      onMounted,\n      onUpdated,\n      computed,\n      draggable,\n      ConfettiExplosion,\n      useAuthStore,\n      authHeader,\n      axios,\n      Datepicker\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n\n};","map":{"version":3,"mappings":";AAuHA,SAASA,QAAT,EAAmBC,GAAnB,EAAwBC,SAAxB,EAAmCC,SAAnC,EAA8CC,QAA9C,QAA8D,KAA9D;AACA,OAAOC,SAAP,MAAsB,cAAtB;AAEA,OAAOC,iBAAP,MAA8B,wBAA9B;AAEA,SAASC,YAAT,QAA6B,iCAA7B;AAEA,OAAOC,UAAP,MAAuB,mCAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAO,sCAAP;;;;;;;cAZA;;IAcA,MAAMC,IAAI,GAAGV,GAAG,CAAC,IAAIW,IAAJ,GAAWC,WAAX,GAAyBC,KAAzB,CAA+B,CAA/B,EAAkC,EAAlC,CAAD,CAAhB;IAEA,MAAMC,YAAY,GAAGd,GAAG,CAAC,KAAD,CAAxB;IAEA,MAAMe,WAAW,GAAGf,GAAG,CAAC,EAAD,CAAvB,EAEA;;IAEA,MAAMgB,UAAU,GAAGhB,GAAG,CAAC,EAAD,CAAtB,EAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;;IACA,MAAMiB,SAAS,GAAGlB,QAAQ,CAAC,EAAD,CAA1B;IACA,MAAMmB,UAAU,GAAGlB,GAAG,CAAC,EAAD,CAAtB;IACA,MAAMmB,OAAO,GAAGnB,GAAG,CAAC,KAAD,CAAnB;;IAEA,eAAeoB,SAAf,GAA2B;MACzB,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAN,CAAU,4BAAV,EAAwC;UAC7DC,OAAO,EAAEhB,UAAU;QAD0C,CAAxC,CAAvB,CADE,CAIF;QACA;;QACA,MAAMiB,MAAM,GAAGH,QAAQ,CAACI,IAAxB;QAEA,MAAMC,QAAQ,GAAG3B,QAAQ,CAAC,EAAD,CAAzB;QACAyB,MAAM,CAACG,OAAP,CAAgBC,OAAD,IAAa;UAC1B,IAAI,CAACF,QAAQ,CAACG,MAAT,CAAiBC,GAAD,IAASA,GAAG,CAAC,MAAD,CAAH,KAAgBF,OAAO,CAAClB,IAAjD,EAAuDqB,MAAxD,GAAiE,CAArE,EAAwE;YACtEL,QAAQ,CAACM,IAAT,CAAc;cACZtB,IAAI,EAAEkB,OAAO,CAAClB,IADF;cAEZuB,KAAK,EAAE,CAAC,EAAE,GAAGL,OAAL;gBAAcM,QAAQ,EAAE;cAAxB,CAAD;YAFK,CAAd;UAID,CALD,MAKO;YACL,MAAMC,GAAG,GAAGT,QAAQ,CAACU,SAAT,CAAoBN,GAAD,IAASA,GAAG,CAACpB,IAAJ,KAAakB,OAAO,CAAClB,IAAjD,CAAZ;YACAgB,QAAQ,CAACS,GAAD,CAAR,CAAcF,KAAd,CAAoBD,IAApB,CAAyB,EAAE,GAAGJ,OAAL;cAAcM,QAAQ,EAAE;YAAxB,CAAzB;UACD;QACF,CAVD,EATE,CAoBF;QACA;;QACA,OAAOR,QAAP;MACD,CAvBD,CAuBE,OAAOW,GAAP,EAAY;QACZC,OAAO,CAACC,GAAR,CAAYF,GAAZ;MACD;IACF;;IACD,SAASG,WAAT,CAAqBC,SAArB,EAAgC;MAC9B,IAAIxB,SAAS,CAACyB,KAAV,CAAgBb,MAAhB,CAAwBC,GAAD,IAASA,GAAG,CAAC,MAAD,CAAH,KAAgBW,SAAhD,EAA2DV,MAA3D,KAAsE,CAA1E,EAA6E;QAC3E;QACAZ,OAAO,CAACuB,KAAR,GAAgB,KAAhB;QACAxB,UAAU,CAACwB,KAAX,GAAmB,EAAnB;MACD,CAJD,MAIO;QACL;QACAxB,UAAU,CAACwB,KAAX,GAAmBzB,SAAS,CAACyB,KAAV,CAAgBb,MAAhB,CAChBC,GAAD,IAASA,GAAG,CAAC,MAAD,CAAH,KAAgBW,SADR,EAEjB,CAFiB,CAAnB;QAGAtB,OAAO,CAACuB,KAAR,GAAgB,IAAhB;MACD;IACF,EACD;;;IACA,MAAMC,SAAS,GAAGrC,YAAY,EAA9B,EACA;IACA;IAEA;;IACA,MAAMsC,iBAAiB,GAAG5C,GAAG,CAAC,IAAD,CAA7B;IACA,MAAM6C,cAAc,GAAG7C,GAAG,CAAC,IAAD,CAA1B;IACA,MAAM8C,UAAU,GAAG9C,GAAG,CAAC,IAAD,CAAtB;;IAEA,SAAS+C,UAAT,GAAsB;MACpB,IAAI,UAAU7B,UAAU,CAACwB,KAAzB,EAAgC;QAC9BI,UAAU,CAACJ,KAAX,GAAmBxB,UAAU,CAACwB,KAAX,CAAiBT,KAAjB,CAAuBF,MAA1C;QACAa,iBAAiB,CAACF,KAAlB,GAA0BxB,UAAU,CAACwB,KAAX,CAAiBT,KAAjB,CAAuBJ,MAAvB,CACvBmB,EAAD,IAAQ,CAACA,EAAE,CAACC,SADY,EAExBlB,MAFF;QAGAc,cAAc,CAACH,KAAf,GAAuBI,UAAU,CAACJ,KAAX,GAAmBE,iBAAiB,CAACF,KAA5D;MACD,CAND,MAMO;QACLI,UAAU,CAACJ,KAAX,GAAmB,IAAnB;QACAG,cAAc,CAACH,KAAf,GAAuB,IAAvB;QACAE,iBAAiB,CAACF,KAAlB,GAA0B,IAA1B;MACD;IACF;;IAED,IAAIxB,UAAU,CAACwB,KAAX,CAAiBX,MAAjB,GAA0B,CAA9B,EAAiC;MAC/Ba,iBAAiB,CAACF,KAAlB,GAA0BxB,UAAU,CAACwB,KAAX,CAAiBT,KAAjB,CAAuBJ,MAAvB,CACvBmB,EAAD,IAAQ,CAACA,EAAE,CAACC,SADY,EAExBlB,MAFF;IAGD;;IAED9B,SAAS,CAAC,YAAY;MACpBgB,SAAS,CAACyB,KAAV,GAAkB,MAAMtB,SAAS,EAAjC;MACA2B,UAAU;MACVP,WAAW,CAAC9B,IAAI,CAACgC,KAAN,CAAX,CAHoB,CAIpB;IACD,CALQ,CAAT;IAOAxC,SAAS,CAAC,MAAM;MACd6C,UAAU;IACX,CAFQ,CAAT,EAIA;;IACA,SAASG,UAAT,CAAoBC,SAApB,EAA+B;MAC7B,OAAOA,SAAS,CAACC,kBAAV,CAA6B,OAA7B,EAAsC;QAC3CC,KAAK,EAAE,MADoC;QAE3CC,IAAI,EAAE,SAFqC;QAG3CC,GAAG,EAAE;MAHsC,CAAtC,CAAP;IAKD,EAED;;;IACA,SAASC,iBAAT,GAA6B;MAC3B1C,YAAY,CAAC4B,KAAb,GAAqB,KAArB;IACD,EAED;;;IAEA,MAAMe,UAAU,GAAIC,SAAD,IAAe;MAChChD,IAAI,CAACgC,KAAL,GAAagB,SAAS,CAAC9C,WAAV,GAAwBC,KAAxB,CAA8B,CAA9B,EAAiC,EAAjC,CAAb,CADgC,CAEhC;;MACAK,UAAU,CAACwB,KAAX,GAAmBzB,SAAS,CAACY,MAAV,CAAkBC,GAAD,IAASA,GAAG,CAAC,MAAD,CAAH,KAAgBpB,IAAI,CAACgC,KAA/C,EAAsD,CAAtD,CAAnB;MACAvB,OAAO,CAACuB,KAAR,GAAgB,IAAhB,CAJgC,CAMhC;;MACA,IAAI,CAACxB,UAAU,CAACwB,KAAhB,EAAuB;QACrBxB,UAAU,CAACwB,KAAX,GAAmB1C,GAAG,CAAC,EAAD,CAAtB;QACAmB,OAAO,CAACuB,KAAR,GAAgB,KAAhB;MACD;;MACDJ,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBtB,SAAxB;MACAuB,WAAW,CAAC9B,IAAI,CAACgC,KAAN,CAAX;IACD,CAbD,EAeA;;;IACA,SAASiB,QAAT,CAAkBC,KAAlB,EAAyB;MACvB5C,UAAU,CAAC0B,KAAX,GAAmBkB,KAAK,CAACC,MAAN,CAAaC,SAAhC;IACD,EAED;;;IACA,eAAeC,gBAAf,CAAgCnC,OAAhC,EAAyC;MACvC;MACA,IAAIZ,UAAU,CAAC0B,KAAX,IAAoB1B,UAAU,CAAC0B,KAAX,KAAqBd,OAAO,CAACoC,IAArD,EAA2D;QACzD,IAAI;UACF,MAAMxD,KAAK,CAACyD,KAAN,CACJ,uCAAuCrC,OAAO,CAACsC,OAD3C,EAEJ;YAAEF,IAAI,EAAEhD,UAAU,CAAC0B;UAAnB,CAFI,EAGJ;YAAEnB,OAAO,EAAEhB,UAAU;UAArB,CAHI,CAAN,CADE,CAMF;;UACAU,SAAS,CAACyB,KAAV,GAAkB,MAAMtB,SAAS,EAAjC,CAPE,CAQF;;UACAoB,WAAW,CAAC9B,IAAI,CAACgC,KAAN,CAAX;QACD,CAVD,CAUE,OAAOL,GAAP,EAAY;UACZC,OAAO,CAACC,GAAR,CAAYF,GAAZ;QACD;MACF;IACF,EAED;IACA;;;IACA,SAAS8B,YAAT,CAAsBvC,OAAtB,EAA+B;MAC7BV,UAAU,CAACwB,KAAX,CAAiBT,KAAjB,CAAuBN,OAAvB,CAA+B,CAACyC,EAAD,EAAKjC,GAAL,KAAa;QAC1C,IAAIP,OAAO,CAACsC,OAAR,IAAmBE,EAAE,CAACF,OAA1B,EAAmC;UACjChD,UAAU,CAACwB,KAAX,CAAiBT,KAAjB,CAAuBE,GAAvB,EAA4BD,QAA5B,GACE,CAAChB,UAAU,CAACwB,KAAX,CAAiBT,KAAjB,CAAuBE,GAAvB,EAA4BD,QAD/B;QAED;MACF,CALD;IAMD,EAED;;;IAEA,eAAemC,UAAf,GAA4B;MAC1B;MACA,MAAMC,QAAQ,GACZ,UAAUpD,UAAU,CAACwB,KAArB,GAA6BxB,UAAU,CAACwB,KAAX,CAAiBT,KAAjB,CAAuBF,MAAvB,GAAgC,CAA7D,GAAiE,CADnE;;MAGA,IAAIhB,WAAW,CAAC2B,KAAZ,KAAsB,EAA1B,EAA8B;QAC5B,IAAI;UACF,MAAMlC,KAAK,CAAC+D,IAAN,CACJ,4BADI,EAEJ;YACED,QAAQ,EAAEA,QADZ;YAEE5D,IAAI,EAAEA,IAAI,CAACgC,KAFb;YAGEsB,IAAI,EAAEjD,WAAW,CAAC2B,KAHpB;YAIEO,SAAS,EAAE;UAJb,CAFI,EAQJ;YACE1B,OAAO,EAAEhB,UAAU;UADrB,CARI,CAAN,CADE,CAaF;;UACAU,SAAS,CAACyB,KAAV,GAAkB,MAAMtB,SAAS,EAAjC,CAdE,CAeF;;UACAoB,WAAW,CAAC9B,IAAI,CAACgC,KAAN,CAAX,CAhBE,CAiBF;;UACA3B,WAAW,CAAC2B,KAAZ,GAAoB,EAApB;QACD,CAnBD,CAmBE,OAAOL,GAAP,EAAY;UACZC,OAAO,CAACC,GAAR,CAAYF,GAAZ;QACD;MACF,CAvBD,MAuBO;QACLvB,YAAY,CAAC4B,KAAb,GAAqB,IAArB;MACD;IACF,EAED;;;IACA,SAAS8B,UAAT,GAAsB;MACpBtD,UAAU,CAACwB,KAAX,CAAiBT,KAAjB,CAAuBN,OAAvB,CAA+B,CAACC,OAAD,EAAU6C,KAAV,KAAoB;QACjDvD,UAAU,CAACwB,KAAX,CAAiBT,KAAjB,CAAuBwC,KAAvB,EAA8BH,QAA9B,GAAyCG,KAAK,GAAG,CAAjD;MACD,CAFD;IAGD,EAED;;;IACA,eAAeC,YAAf,CAA4B9C,OAA5B,EAAqC;MACnC,IAAI;QACF,MAAMpB,KAAK,CAACyD,KAAN,CACJ,uCAAuCrC,OAAO,CAACsC,OAD3C,EAEJ;UAAEjB,SAAS,EAAErB,OAAO,CAACqB,SAAR,GAAoB,KAApB,GAA4B;QAAzC,CAFI,EAGJ;UAAE1B,OAAO,EAAEhB,UAAU;QAArB,CAHI,CAAN,CADE,CAMF;;QACAU,SAAS,CAACyB,KAAV,GAAkB,MAAMtB,SAAS,EAAjC,CAPE,CAQF;;QACAoB,WAAW,CAAC9B,IAAI,CAACgC,KAAN,CAAX,CATE,CAUF;MACD,CAXD,CAWE,OAAOL,GAAP,EAAY;QACZC,OAAO,CAACC,GAAR,CAAYF,GAAZ;MACD;;MACDU,UAAU;IACX,EAED;IACA;IACA;IACA;IACA;IACA;IAEA;;;IAEA,eAAe4B,UAAf,CAA0B/C,OAA1B,EAAmC;MACjC,IAAI;QACF,MAAMpB,KAAK,CAACc,GAAN,CAAU,uCAAuCM,OAAO,CAACsC,OAAzD,EAAkE;UACtE3C,OAAO,EAAEhB,UAAU;QADmD,CAAlE,CAAN,CADE,CAIF;;QACAU,SAAS,CAACyB,KAAV,GAAkB,MAAMtB,SAAS,EAAjC,CALE,CAMF;;QACAoB,WAAW,CAAC9B,IAAI,CAACgC,KAAN,CAAX;MACD,CARD,CAQE,OAAOL,GAAP,EAAY;QACZC,OAAO,CAACC,GAAR,CAAYF,GAAZ;MACD;IACF,EAED;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA","names":["reactive","ref","onMounted","onUpdated","computed","draggable","ConfettiExplosion","useAuthStore","authHeader","axios","Datepicker","date","Date","toISOString","slice","invalidInput","enteredText","editedText","tasksList","tasksSlice","display","loadTasks","response","get","headers","result","data","newArray","forEach","element","filter","arr","length","push","tasks","editable","idx","findIndex","err","console","log","loadOneTask","task_date","value","authStore","notCompletedTasks","completedTasks","totalTasks","countTasks","ob","completed","formatDate","dateInput","toLocaleDateString","month","year","day","clearInvalidInput","handleDate","modelData","editText","event","target","innerText","applyEditChanges","text","patch","task_id","makeEditable","el","addNewTask","priority","post","updateList","index","checkUncheck","deleteTask"],"sources":["C:/Users/notar/Desktop/Udemy/todo_front/src/pages/TasksTemplate.vue"],"sourcesContent":["<template>\r\n  <div class=\"grid-container\">\r\n    <header>HEADER GOES HERE</header>\r\n    <div class=\"grid-item-todo\">\r\n      <div v-if=\"!display\" class=\"no-tasks\">No Tasks to Display</div>\r\n      <div v-else>\r\n        <h1>{{ formatDate(new Date(tasksSlice.date)) }}</h1>\r\n        <div class=\"flex-headers\">\r\n          <div class=\"header-number\">#</div>\r\n          <div class=\"header-text\">Description</div>\r\n          <div class=\"header-edit\">Edit</div>\r\n          <div class=\"header-delete\">Del.</div>\r\n          <div class=\"header-completed\">Status</div>\r\n        </div>\r\n      </div>\r\n      <draggable\r\n        :list=\"tasksSlice.tasks\"\r\n        item-key=\"task_id\"\r\n        @change=\"updateList\"\r\n      >\r\n        <template #item=\"{ element }\">\r\n          <div class=\"flexbox\">\r\n            <div class=\"flex-id\">\r\n              <p>{{ element.priority }}</p>\r\n            </div>\r\n            <div\r\n              class=\"flex-text\"\r\n              :class=\"{ editSelectedBorder: element.editable }\"\r\n            >\r\n              <p\r\n                :contenteditable=\"element.editable\"\r\n                @input=\"editText\"\r\n                @blur=\"applyEditChanges(element)\"\r\n              >\r\n                {{ element.text }}\r\n              </p>\r\n            </div>\r\n            <div class=\"flex-buttons\">\r\n              <font-awesome-icon\r\n                icon=\"fas fa-pen\"\r\n                class=\"edit-icon\"\r\n                :class=\"{ editSelected: element.editable }\"\r\n                @click=\"makeEditable(element)\"\r\n              />\r\n              <font-awesome-icon\r\n                @click=\"deleteTask(element)\"\r\n                icon=\"fas\r\n              fa-trash\"\r\n                class=\"delete-icon\"\r\n              />\r\n              <font-awesome-icon\r\n                icon=\"fas fa-check\"\r\n                class=\"check-icon\"\r\n                :class=\"{ isChecked: element.completed }\"\r\n                :id=\"element.id\"\r\n                v-model=\"element.completed\"\r\n                @click=\"checkUncheck(element)\"\r\n              />\r\n              <span v-if=\"element.completed\">\r\n                <ConfettiExplosion\r\n                  id=\"confetti\"\r\n                  v-if=\"element.completed\"\r\n                  :stageHeight=\"200\"\r\n                  :stageWidth=\"200\"\r\n                  :particleCount=\"100\"\r\n                  :particleSize=\"5\"\r\n                  :force=\"0.2\"\r\n                  :duration=\"2000\"\r\n                />\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </template>\r\n      </draggable>\r\n      <form class=\"form-control\" @submit.prevent=\"addNewTask\">\r\n        <input\r\n          class=\"task-input\"\r\n          @blur=\"clearInvalidInput\"\r\n          @keyup=\"clearInvalidInput\"\r\n          v-model=\"enteredText\"\r\n          type=\"text\"\r\n        />\r\n        <button class=\"button-74\">add task</button>\r\n      </form>\r\n      <span v-if=\"invalidInput\" class=\"invalid-input\">Please Enter Text</span>\r\n    </div>\r\n    <div class=\"grid-item-calendar\">\r\n      <h1>{{ date }}</h1>\r\n      <Datepicker\r\n        inline\r\n        :enableTimePicker=\"false\"\r\n        :monthChangeOnScroll=\"false\"\r\n        v-model=\"date\"\r\n        autoApply\r\n        @update:modelValue=\"handleDate\"\r\n      />\r\n      <div v-if=\"totalTasks\" class=\"task-status\">\r\n        <p>\r\n          # Tasks: <span id=\"total-tasks\">{{ totalTasks }}</span>\r\n        </p>\r\n        <p>\r\n          # Completed tasks:\r\n          <span id=\"complete-tasks\">{{ completedTasks }}</span>\r\n        </p>\r\n        <p>\r\n          # Not completed tasks:\r\n          <span id=\"uncomplete-tasks\">{{ notCompletedTasks }}</span>\r\n        </p>\r\n      </div>\r\n      <button @click=\"authStore.logout()\">Logout</button>\r\n    </div>\r\n    <footer>\r\n      <p>FOOTER GOES HERE</p>\r\n    </footer>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\n// eslint-disable-next-line\r\nimport { reactive, ref, onMounted, onUpdated, computed } from \"vue\";\r\nimport draggable from \"vuedraggable\";\r\n\r\nimport ConfettiExplosion from \"vue-confetti-explosion\";\r\n\r\nimport { useAuthStore } from \"../components/store/userAuth.js\";\r\n\r\nimport authHeader from \"@/components/services/auth-header\";\r\nimport axios from \"axios\";\r\n\r\nimport Datepicker from \"@vuepic/vue-datepicker\";\r\nimport \"@vuepic/vue-datepicker/dist/main.css\";\r\n\r\nconst date = ref(new Date().toISOString().slice(0, 10));\r\n\r\nconst invalidInput = ref(false);\r\n\r\nconst enteredText = ref(\"\");\r\n\r\n// const dateCal = ref(new Date());\r\n\r\nconst editedText = ref(\"\");\r\n\r\n// const tasksList = reactive([\r\n//   {\r\n//     date: \"2022-10-12\",\r\n//     tasks: [\r\n//       {\r\n//         text: \"BBB\",\r\n//         priority: 1,\r\n//         completed: false,\r\n//         editable: false,\r\n//         task_id: \"X12\",\r\n//       },\r\n//       {\r\n//         text: \"CCC\",\r\n//         priority: 2,\r\n//         completed: true,\r\n//         editable: false,\r\n//         task_id: \"X123\",\r\n//       },\r\n//       {\r\n//         text: \"CCC\",\r\n//         priority: 3,\r\n//         completed: false,\r\n//         editable: false,\r\n//         task_id: \"X1124\",\r\n//       },\r\n//       {\r\n//         text: \"DDD\",\r\n//         priority: 4,\r\n//         completed: true,\r\n//         editable: false,\r\n//         task_id: \"X1sd\",\r\n//       },\r\n//       {\r\n//         text: \"AAA\",\r\n//         priority: 6,\r\n//         completed: false,\r\n//         editable: false,\r\n//         task_id: \"X1sda\",\r\n//       },\r\n//     ],\r\n//   },\r\n//   {\r\n//     date: \"2022-10-13\",\r\n//     tasks: [\r\n//       {\r\n//         text: \"Uno\",\r\n//         priority: 1,\r\n//         completed: false,\r\n//         editable: false,\r\n//         task_id: \"X12\",\r\n//       },\r\n//       {\r\n//         text: \"Dos\",\r\n//         priority: 2,\r\n//         completed: true,\r\n//         editable: false,\r\n//         task_id: \"X123\",\r\n//       },\r\n//       {\r\n//         text: \"Tres\",\r\n//         priority: 3,\r\n//         completed: false,\r\n//         editable: false,\r\n//         task_id: \"X1124\",\r\n//       },\r\n//       {\r\n//         text: \"Quatro\",\r\n//         priority: 4,\r\n//         completed: true,\r\n//         editable: false,\r\n//         task_id: \"X1sd\",\r\n//       },\r\n//       {\r\n//         text: \"Cinco\",\r\n//         priority: 6,\r\n//         completed: true,\r\n//         editable: false,\r\n//         task_id: \"X1sda\",\r\n//       },\r\n//     ],\r\n//   },\r\n// ]);\r\n\r\n// Getting array for specific date\r\nconst tasksList = reactive([]);\r\nconst tasksSlice = ref([]);\r\nconst display = ref(false);\r\n\r\nasync function loadTasks() {\r\n  try {\r\n    const response = await axios.get(\"http://localhost:8000/task\", {\r\n      headers: authHeader(),\r\n    });\r\n    // working with response\r\n    // console.log(response);\r\n    const result = response.data;\r\n\r\n    const newArray = reactive([]);\r\n    result.forEach((element) => {\r\n      if (!newArray.filter((arr) => arr[\"date\"] === element.date).length > 0) {\r\n        newArray.push({\r\n          date: element.date,\r\n          tasks: [{ ...element, editable: false }],\r\n        });\r\n      } else {\r\n        const idx = newArray.findIndex((arr) => arr.date === element.date);\r\n        newArray[idx].tasks.push({ ...element, editable: false });\r\n      }\r\n    });\r\n    // tasksList.value = newArray;\r\n    // console.log(\"NEW ARRAY\", newArray);\r\n    return newArray;\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n}\r\nfunction loadOneTask(task_date) {\r\n  if (tasksList.value.filter((arr) => arr[\"date\"] === task_date).length === 0) {\r\n    // eslint-disable-next-line\r\n    display.value = false;\r\n    tasksSlice.value = [];\r\n  } else {\r\n    // console.log(tasksList.value.filter((arr) => arr[\"date\"] === task_date)[0]);\r\n    tasksSlice.value = tasksList.value.filter(\r\n      (arr) => arr[\"date\"] === task_date\r\n    )[0];\r\n    display.value = true;\r\n  }\r\n}\r\n// SEE IF LOGGED IN\r\nconst authStore = useAuthStore();\r\n// const loggedIn = computed(() => authStore.isAuthenticated);\r\n// console.log(\"LOGGED?\", loggedIn.value);\r\n\r\n// Count the number of tasks\r\nconst notCompletedTasks = ref(null);\r\nconst completedTasks = ref(null);\r\nconst totalTasks = ref(null);\r\n\r\nfunction countTasks() {\r\n  if (\"date\" in tasksSlice.value) {\r\n    totalTasks.value = tasksSlice.value.tasks.length;\r\n    notCompletedTasks.value = tasksSlice.value.tasks.filter(\r\n      (ob) => !ob.completed\r\n    ).length;\r\n    completedTasks.value = totalTasks.value - notCompletedTasks.value;\r\n  } else {\r\n    totalTasks.value = null;\r\n    completedTasks.value = null;\r\n    notCompletedTasks.value = null;\r\n  }\r\n}\r\n\r\nif (tasksSlice.value.length > 0) {\r\n  notCompletedTasks.value = tasksSlice.value.tasks.filter(\r\n    (ob) => !ob.completed\r\n  ).length;\r\n}\r\n\r\nonMounted(async () => {\r\n  tasksList.value = await loadTasks();\r\n  countTasks();\r\n  loadOneTask(date.value);\r\n  // updateList();\r\n});\r\n\r\nonUpdated(() => {\r\n  countTasks();\r\n});\r\n\r\n// custom function to return date in DD month-long YYYY format\r\nfunction formatDate(dateInput) {\r\n  return dateInput.toLocaleDateString(\"en-US\", {\r\n    month: \"long\",\r\n    year: \"numeric\",\r\n    day: \"numeric\",\r\n  });\r\n}\r\n\r\n// clear invalid input - to be used at blur\r\nfunction clearInvalidInput() {\r\n  invalidInput.value = false;\r\n}\r\n\r\n// WORKING WITH CALENDAR\r\n\r\nconst handleDate = (modelData) => {\r\n  date.value = modelData.toISOString().slice(0, 10);\r\n  // getting new slice based on picked date\r\n  tasksSlice.value = tasksList.filter((arr) => arr[\"date\"] === date.value)[0];\r\n  display.value = true;\r\n\r\n  // creating empty array if there no tasks on picked date\r\n  if (!tasksSlice.value) {\r\n    tasksSlice.value = ref([]);\r\n    display.value = false;\r\n  }\r\n  console.log(\"TASKLIST\", tasksList);\r\n  loadOneTask(date.value);\r\n};\r\n\r\n// listen to input inside edited paragraph text\r\nfunction editText(event) {\r\n  editedText.value = event.target.innerText;\r\n}\r\n\r\n// Apply above changes at blur\r\nasync function applyEditChanges(element) {\r\n  // No need to send HTTP request if Text is unchanged\r\n  if (editedText.value && editedText.value !== element.text) {\r\n    try {\r\n      await axios.patch(\r\n        \"http://localhost:8000/task/update/\" + element.task_id,\r\n        { text: editedText.value },\r\n        { headers: authHeader() }\r\n      );\r\n      // rerender ALL to-do tasks\r\n      tasksList.value = await loadTasks();\r\n      // get selected date's slice\r\n      loadOneTask(date.value);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n}\r\n\r\n// make SELECTED paragraph tag editable\r\n// No link with backend here - elements become uneditable after refresh\r\nfunction makeEditable(element) {\r\n  tasksSlice.value.tasks.forEach((el, idx) => {\r\n    if (element.task_id == el.task_id) {\r\n      tasksSlice.value.tasks[idx].editable =\r\n        !tasksSlice.value.tasks[idx].editable;\r\n    }\r\n  });\r\n}\r\n\r\n// adding the task - Post Request\r\n\r\nasync function addNewTask() {\r\n  // priority is 1 if there are not tasks on that day, else it is autoincremented\r\n  const priority =\r\n    \"date\" in tasksSlice.value ? tasksSlice.value.tasks.length + 1 : 1;\r\n\r\n  if (enteredText.value !== \"\") {\r\n    try {\r\n      await axios.post(\r\n        \"http://localhost:8000/task\",\r\n        {\r\n          priority: priority,\r\n          date: date.value,\r\n          text: enteredText.value,\r\n          completed: false,\r\n        },\r\n        {\r\n          headers: authHeader(),\r\n        }\r\n      );\r\n      // rerender ALL to-do tasks\r\n      tasksList.value = await loadTasks();\r\n      // get selected date's slice\r\n      loadOneTask(date.value);\r\n      //clear input field\r\n      enteredText.value = \"\";\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  } else {\r\n    invalidInput.value = true;\r\n  }\r\n}\r\n\r\n// update tasks index/id on change - on drag\r\nfunction updateList() {\r\n  tasksSlice.value.tasks.forEach((element, index) => {\r\n    tasksSlice.value.tasks[index].priority = index + 1;\r\n  });\r\n}\r\n\r\n// Checking or unchecking specific object in an array\r\nasync function checkUncheck(element) {\r\n  try {\r\n    await axios.patch(\r\n      \"http://localhost:8000/task/update/\" + element.task_id,\r\n      { completed: element.completed ? false : true },\r\n      { headers: authHeader() }\r\n    );\r\n    // rerender ALL to-do tasks\r\n    tasksList.value = await loadTasks();\r\n    // get selected date's slice\r\n    loadOneTask(date.value);\r\n    //clear input field\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n  countTasks();\r\n}\r\n\r\n// function checkUncheck(element) {\r\n//   let index = tasksSlice.value.tasks.indexOf(element);\r\n//   tasksSlice.value.tasks[index].completed =\r\n//     !tasksSlice.value.tasks[index].completed;\r\n//   countTasks();\r\n// }\r\n\r\n// Deleting specific task\r\n\r\nasync function deleteTask(element) {\r\n  try {\r\n    await axios.get(\"http://localhost:8000/task/delete/\" + element.task_id, {\r\n      headers: authHeader(),\r\n    });\r\n    // rerender ALL to-do tasks\r\n    tasksList.value = await loadTasks();\r\n    // get selected date's slice\r\n    loadOneTask(date.value);\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n}\r\n\r\n// function deleteTask(element) {\r\n//   let index = tasksSlice.value.tasks.indexOf(element);\r\n//   tasksSlice.value.tasks.splice(index, 1);\r\n//   if (tasksSlice.value.tasks.length === 0) {\r\n//     display.value = false;\r\n//   }\r\n//   updateList();\r\n//   countTasks();\r\n// }\r\n</script>\r\n\r\n<style>\r\n#confetti {\r\n  overflow: visible;\r\n  margin: 0px 0px;\r\n  padding: 0px 0px;\r\n  width: 0%;\r\n}\r\n\r\n/* STYLING CALENDAR */\r\n#app\r\n  > div\r\n  > div.grid-item-calendar\r\n  > div\r\n  > div.dp__menu.dp__relative.dp__theme_light {\r\n  background-color: transparent;\r\n  flex-grow: 1;\r\n  margin: 10px 10px;\r\n}\r\n#app\r\n  > div\r\n  > div.grid-item-calendar\r\n  > div\r\n  > div.dp__menu.dp__relative.dp__theme_light\r\n  > div\r\n  > div\r\n  > div:nth-child(1)\r\n  > div\r\n  > div.dp__calendar\r\n  > div\r\n  > div\r\n  > div.dp__calendar_header {\r\n  width: 100%;\r\n}\r\n#app\r\n  > div\r\n  > div.grid-item-calendar\r\n  > div\r\n  > div.dp__menu.dp__relative.dp__theme_light\r\n  > div\r\n  > div\r\n  > div:nth-child(1)\r\n  > div\r\n  > div.dp__calendar\r\n  > div\r\n  > div\r\n  > div.dp__calendar {\r\n  width: 100%;\r\n}\r\n</style>\r\n<style scoped>\r\n* {\r\n  font-family: \"Kalam\", cursive;\r\n}\r\n\r\nh1 {\r\n  text-align: center;\r\n}\r\n\r\n.form-control {\r\n  margin-top: 20px;\r\n  display: flex;\r\n  height: 40px;\r\n  justify-content: space-between;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.task-input {\r\n  width: 80%;\r\n  margin-left: 30px;\r\n  margin-right: 10px;\r\n  line-height: 25px;\r\n  font-size: 18px;\r\n  background-color: #fbeee0;\r\n  border: 2px solid #422800;\r\n}\r\n\r\n.no-tasks {\r\n  height: 100px;\r\n  justify-content: center;\r\n  display: flex;\r\n  align-items: center;\r\n  font-weight: bold;\r\n  font-size: 20px;\r\n  margin-top: 40px;\r\n}\r\n\r\n/* GENERAL PAGE LAYOUT WITH GRIDS */\r\n.grid-container {\r\n  min-height: 100vh;\r\n  display: grid;\r\n  grid-template-areas:\r\n    \"header header\"\r\n    \"todo calendar\"\r\n    \"footer footer\";\r\n  grid-template-rows: 60px 1fr 60px;\r\n  grid-template-columns: 1fr 1fr;\r\n  gap: 10px;\r\n}\r\n\r\nheader {\r\n  grid-area: header;\r\n  background: skyblue;\r\n  /* making HEADER inside of the grid flexbox */\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\nfooter {\r\n  grid-area: footer;\r\n  background: lightblue;\r\n  /* making FOOTER inside of the grid flexbox */\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.grid-item-todo {\r\n  grid-area: todo;\r\n  background: lightgreen;\r\n}\r\n.grid-item-calendar {\r\n  grid-area: calendar;\r\n  background: lightsteelblue;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .grid-container {\r\n    grid-template-columns: 1fr;\r\n    grid-template-rows: 50px 1fr 1fr 50px;\r\n  }\r\n  header {\r\n    grid-row: 1;\r\n  }\r\n  .grid-item-todo {\r\n    grid-row: 2;\r\n    grid-column: 1;\r\n  }\r\n  .grid-item-calendar {\r\n    grid-row: 3;\r\n    grid-column: 1;\r\n  }\r\n  footer {\r\n    grid-row: 4/5;\r\n  }\r\n  .form-control {\r\n    flex-direction: column;\r\n    align-items: center;\r\n    margin-bottom: 60px;\r\n  }\r\n  .button-74 {\r\n    width: 90px;\r\n    flex-shrink: 0;\r\n    margin-top: 10px;\r\n    margin-right: 40px;\r\n  }\r\n}\r\n\r\n/* TO-DO HEADINGS WITH FLEXBOX */\r\n\r\n.flex-headers {\r\n  display: flex;\r\n  background-color: rgb(97, 213, 136);\r\n  margin: 0px 10px;\r\n  font-size: 14px;\r\n  padding: 5px 0px;\r\n}\r\n.header-number {\r\n  text-align: center;\r\n  justify-content: center;\r\n  align-content: center;\r\n  align-items: center;\r\n  flex-basis: 20px;\r\n}\r\n.header-text {\r\n  flex-grow: 1;\r\n}\r\n\r\n.header-edit,\r\n.header-delete {\r\n  margin-right: 5px;\r\n}\r\n.header-completed {\r\n  margin-left: 5px;\r\n  margin-right: 5px;\r\n}\r\n\r\n/* TO-DO INNER LAYOUT WITH FLEXBOX */\r\n\r\n.flexbox {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-left: 10px;\r\n  margin-right: 10px;\r\n  gap: 5px;\r\n}\r\n.flex-text {\r\n  background: lightgray;\r\n  flex: 1;\r\n}\r\n\r\n.flex-id {\r\n  flex-basis: 15px;\r\n}\r\n.flex-id p {\r\n  font-weight: bold;\r\n}\r\n\r\n/* Change border of the text if edit is selected*/\r\n\r\n.editSelectedBorder {\r\n  border: 1px solid orange;\r\n}\r\n.flex-buttons {\r\n  background: lightyellow;\r\n  flex-basis: 70px;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n  padding: 5px;\r\n}\r\n\r\n.edit-icon {\r\n  font-size: 18px;\r\n}\r\n\r\n.delete-icon:hover {\r\n  color: #9b4848;\r\n}\r\n\r\n/* CHECKBOX */\r\n.check-icon {\r\n  margin-left: 15px;\r\n  color: #b04b4b;\r\n  font-size: 26px;\r\n}\r\n\r\n/* Make pen green if edit is selected*/\r\n\r\n.editSelected {\r\n  color: green;\r\n  margin-top: 5px;\r\n}\r\n\r\n.isChecked {\r\n  color: green;\r\n}\r\n\r\n/* BUTTON */\r\n.button-74 {\r\n  background-color: #fbeee0;\r\n  border: 2px solid #422800;\r\n  border-radius: 25px;\r\n  box-shadow: #422800 3px 3px 0 0;\r\n  color: #422800;\r\n  cursor: pointer;\r\n  font-weight: 300;\r\n  font-size: 16px;\r\n  padding: 0 18px;\r\n  line-height: 20px;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  user-select: none;\r\n  -webkit-user-select: none;\r\n  touch-action: manipulation;\r\n  flex: 0;\r\n  margin-right: 15px;\r\n  flex-basis: 100px;\r\n}\r\n\r\n.button-74:hover {\r\n  background-color: #fff;\r\n}\r\n\r\n.button-74:active {\r\n  box-shadow: #422800 2px 2px 0 0;\r\n  transform: translate(2px, 2px);\r\n}\r\n\r\n.invalid-input {\r\n  color: #b04b4b;\r\n  margin-right: 50px;\r\n  font-weight: bold;\r\n}\r\n.task-status p {\r\n  display: inline-block;\r\n  margin-right: 20px;\r\n}\r\n#total-tasks {\r\n  color: black;\r\n  font-weight: bold;\r\n}\r\n#complete-tasks {\r\n  color: #479d16;\r\n  font-weight: bold;\r\n}\r\n#uncomplete-tasks {\r\n  color: #841460;\r\n  font-weight: bold;\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}